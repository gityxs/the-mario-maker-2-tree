//v0.12更新之前：
//全部重新玩，重新调整平衡，解决里程碑弹窗问题，整合早期遗留杂乱代码，解决第4行层级平衡崩溃
//最后增加新内容完成v0.12
//中文版最后考虑

const decimalElephant = new Decimal(74751)
const decimalCrow = new Decimal(501761)
const decimalPi = new Decimal(3.141592653589793)
const decimalNatral = new Decimal(2.718281828459045)
const decimalInfinity = new Decimal(Number.MAX_VALUE)
const decimalGoogol = new Decimal(1e100)
const decimalGoogolplex = new Decimal("ee100")
const decimalDecker = new Decimal("10^^10")
const decimalGiggol = new Decimal("10^^100")


console.log("You opened the console. Do you want to cheat? I don't think it's good for you. Also, if you modify devSpeed to greater than 1 your save will be marked for cheating.")
console.log("It depends on your consciousness, and no punishment on cheating. Feel free on playing this game!")
console.log("%c[?]%c🍄----------The Mario Maker 2 Tree----------🍄%c[?]", "color:orange", "", "color:orange")

//
const coin = 'coin'

function isDInfinity(decimal) {
    decimal = new Decimal(decimal)
    if (decimal.mag == Infinity || decimal.sign == Infinity || decimal.layer == Infinity)
        return true
    else return false
}
function isDNaN(decimal) {
    decimal = new Decimal(decimal)
    if (isNaN(decimal.mag) || isNaN(decimal.sign) || isNaN(decimal.layer))
        return true
    else return false
}
function d(x) {
    return new Decimal(x)
}
// 特殊层：成就
function hasNormalAchievement(id) {
    return hasAchievement('achievements', id)
}
function hasSecretAchievement(id) {
    return hasAchievement('secret_achievements', id)
}
addLayer("achievements", {
    name: "achievements",
    symbol: "🏆",
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            cc: new Decimal(0),
        }
    },

    color: "#FFE125",                       // The color for this layer, which affects many elements.
    resource: "achievement points",            // The name of this layer's main prestige resource.
    row: "side",                                 // The row this layer is on (0 is the first row).

    layerShown() { return true },          // Returns a bool for if this layer's node should be visible in the tree.

    clickables: {
        11: {
            title: "Tab fix",
            canClick() { return true },
            onClick() { return player.navTab = 'tree-tab' },
            unlocked() { return true },
            display: "Fix your tab if you stuck in a layer tab."
        },
    },
    update() {
        if (player.devSpeed == undefined) player.devSpeed = 1
        if (player.devSpeed > 1) cheat = true
        if (cheat || cheat1 || cheat2 || cheat3 || cheat4 || cheat5 || cheat6 || cheat7 || cheat8 || cheat9) cheat = true,
            cheat1 = true,
            cheat2 = true,
            cheat3 = true,
            cheat4 = true,
            cheat5 = true,
            cheat6 = true,
            cheat7 = true,
            cheat8 = true,
            cheat9 = true
        player.achievements.cc = player.points
        player.lgpoints = player.points.max(1).log(10)

        //keep layer unlocks upgrades
        if (hasNormalAchievement(11) && !hasUpgrade('coin', 14)) player.coin.upgrades.push(14)
        if (hasNormalAchievement(13) && !hasMilestone('coin', 2)) player.coin.milestones.push(2)
        if (hasNormalAchievement(15) && !hasUpgrade('super_mushroom', 15)) player.super_mushroom.upgrades.push(15)
        if (hasNormalAchievement(25) && !hasUpgrade('fire_flower', 25)) player.fire_flower.upgrades.push(25)
        if (hasUpgrade('invincible_star', 13) && !hasUpgrade('fire_flower', 12)) player.fire_flower.upgrades.push(12)
        if (hasUpgrade('invincible_star', 14) && !hasMilestone('super_mushroom', 1)) player.super_mushroom.milestones.push(1)
        if (hasUpgrade('invincible_star', 15) && !hasMilestone('fire_flower', 0)) player.fire_flower.milestones.push(0)
        if (hasNormalAchievement(33) && !hasMilestone('invincible_star', 0)) player.invincible_star.milestones.push(0)
        if (hasNormalAchievement(33) && !hasUpgrade('invincible_star', 15)) player.invincible_star.upgrades.push(15)
        if (hasNormalAchievement(34) && !hasUpgrade('invincible_star', 22)) player.invincible_star.upgrades.push(22)
        if (hasNormalAchievement(34) && !hasUpgrade('coin', 35)) player.coin.upgrades.push(35)
        if (hasNormalAchievement(34) && !hasMilestone('super_mushroom', 0)) player.super_mushroom.milestones.push(0)
        if (hasNormalAchievement(55) && !hasUpgrade('oneup_mushroom', 35)) player.oneup_mushroom.upgrades.push(35)
        if (hasNormalAchievement(55) && !hasUpgrade('invincible_star', 35)) player.invincible_star.upgrades.push(35)
        if (hasNormalAchievement(55) && !hasUpgrade('invincible_star', 25)) player.invincible_star.upgrades.push(25)
        if (hasNormalAchievement(55) && !hasUpgrade('bouncy_ball_flower', 35)) player.bouncy_ball_flower.upgrades.push(35)
        if (hasNormalAchievement(83) && !hasUpgrade('cape_feather', 35)) player.cape_feather.upgrades.push(35)
        if (hasNormalAchievement(83) && !hasUpgrade('yoshi_egg', 25)) player.yoshi_egg.upgrades.push(25)
        if (hasNormalAchievement(83) && !hasMilestone('super_leaf', 2)) player.super_leaf.milestones.push(2)
        if (hasNormalAchievement(83) && !hasMilestone('super_leaf', 3)) player.super_leaf.milestones.push(3)
        if (hasNormalAchievement(83) && !hasMilestone('super_leaf', 6)) player.super_leaf.milestones.push(6)
        if (hasNormalAchievement(83) && !hasMilestone('super_leaf', 7)) player.super_leaf.milestones.push(7)
        if (hasNormalAchievement(83) && !hasMilestone('super_leaf', 8)) player.super_leaf.milestones.push(8)
        if (hasNormalAchievement(83) && !hasMilestone('super_leaf', 9)) player.super_leaf.milestones.push(9)
        if (hasNormalAchievement(85) && !hasUpgrade('yoshi_egg', 31)) player.yoshi_egg.upgrades.push(31)
        if (hasNormalAchievement(102) && !hasUpgrade('propeller_mushroom', 25)) player.propeller_mushroom.upgrades.push(25)
        if (hasNormalAchievement(102) && !hasUpgrade('propeller_mushroom', 35)) player.propeller_mushroom.upgrades.push(35)
        if (hasNormalAchievement(102) && !hasUpgrade('super_hammer', 35)) player.super_hammer.upgrades.push(35)
        if (hasNormalAchievement(121) && !hasUpgrade('master_sword', 75)) player.master_sword.upgrades.push(75)
        if (hasNormalAchievement(121) && !hasUpgrade('usa_mushroom', 35)) player.usa_mushroom.upgrades.push(35)
        if (hasNormalAchievement(121) && !hasUpgrade('frog_suit', 35)) player.frog_suit.upgrades.push(35)
        if (hasNormalAchievement(125) && !hasUpgrade('power_balloon', 35)) player.power_balloon.upgrades.push(15)
        if (hasNormalAchievement(125) && !hasUpgrade('super_acorn', 32)) player.super_acorn.upgrades.push(32)
        if (hasNormalAchievement(135) && !hasUpgrade('boomerang_flower', 35)) player.boomerang_flower.upgrades.push(35)
        if (hasNormalAchievement(145) && !hasUpgrade('mario', 51)) player.mario.upgrades.push(51)
        if (hasNormalAchievement(145) && !hasMilestone('luigi', 3)) player.luigi.milestones.push(3)
        if (hasNormalAchievement(182) && !hasUpgrade('normal', 35)) player.normal.upgrades.push(35)
        if (hasNormalAchievement(192) && !hasUpgrade('expert', 41)) player.expert.upgrades.push(41)
        if (hasNormalAchievement(203) && !hasUpgrade('s_expert', 41)) player.s_expert.upgrades.push(35)
        if (hasNormalAchievement(205) && !hasUpgrade('coop', 15)) player.coop.upgrades.push(15)
        if (hasNormalAchievement(224) && !hasMilestone('versus', 10)) player.versus.milestones.push(10)
    },
    achievements: {
        11: {
            name: "Mario disliked eating mushroom before",
            tooltip: "Unlock Super Mushroom layer. <br> Reward: 1 AP",
            done() { return hasUpgrade('coin', 14) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1")
            },
        },
        12: {
            name: "Rank 1 on total clears",
            tooltip: "Get 821,000 cleared courses. <br> Reward: 3 AP",
            done() { return player.points.gte("821000") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("3")
            },
        },
        13: {
            name: "The enemies",
            tooltip: "Unlock first super mushroom challenge. <br> Reward: 10 AP",
            done() { return hasMilestone('coin', 2) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("10")
            },
        },
        14: {
            name: "The absolute limit of course IDs",
            tooltip: "Get 3.518e13 cleared courses. <br> Reward: 50 AP",
            done() { return player.points.gte("3.518e13") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("50")
            },
        },
        15: {
            name: "Fire attack!",
            tooltip: "Unlock Fire Flower layer. <br> Reward: 333 AP",
            done() { return hasUpgrade('super_mushroom', 15) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("333")
            },
        },
        21: {
            name: "Googol courses cleared!",
            tooltip: "Get 1e100 cleared courses. <br> Reward: 2024 AP",
            done() { return player.points.gte("1e100") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("2024")
            },
        },
        22: {
            name: "Open the key door!",
            tooltip: "Get 10 Pink Key Coins. <br> Reward: 15267 AP",
            done() { return player.coin.pink_key_coin.gte("10") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("15267")
            },
        },
        23: {
            name: "Centillion courses cleared!",
            tooltip: "Get 1e303 cleared courses. <br> Reward: 74751 AP",
            done() { return player.points.gte("1e303") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("74751")
            },
        },
        24: {
            name: "Infinite coins",
            tooltip: "Get 1.79769e308 coins. <br> Reward: 501761 AP",
            done() { return player.coin.points.gte("1.79769313e308") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("501761")
            },
        },
        25: {
            name: "Players' instincts",
            tooltip: "Unlock Invincible Star layer. <br> Reward: 6952965 AP",
            done() { return hasUpgrade('fire_flower', 25) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("6952965")
            },
        },
        31: {
            name: "Destroy the goomba tower!",
            tooltip: "Get 3rd Invincible Star upgrade. <br> Reward: 12413170 AP <br> Autobuy coin upgrades, forever.",
            done() { return hasUpgrade('invincible_star', 13) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("12413170")
            },
        },
        32: {
            name: "Shiny!",
            tooltip: "Get 4th Invincible Star upgrade. <br> Reward: 20190628 AP <br> Super Mushroom resets nothing, forever.",
            done() { return hasUpgrade('invincible_star', 14) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("20190628")
            },
        },
        33: {
            name: "Watch out! A Gap!",
            tooltip: "Get 5th Invincible Star upgrade. <br> Reward: 178,228,909 AP <br> Autobuy coin buyables 1~3, forever.",
            done() { return hasUpgrade('invincible_star', 15) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("178228909")
            },
        },
        34: {
            name: "Invincible Stars also have drawbacks",
            tooltip: "Get 7th Invincible Star upgrade. <br> Reward: 1.68e9 AP <br> Generate 100% Coins and Super Mushrooms passively, forever.",
            done() { return hasUpgrade('invincible_star', 22) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1.68e9")
            },
        },
        35: {
            name: "1UP!",
            tooltip: "Unlock 1UP Mushroom layer. <br> Reward: 7.77e10 AP",
            done() { return hasUpgrade('invincible_star', 25) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("7.77e10")
            },
        },
        41: {
            name: "Max lives in SM3DW",
            tooltip: "Get 1110 1UP Mushroom. <br> Reward: 1.14e13 AP",
            done() { return player.oneup_mushroom.points.gte(1110) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1.14e13")
            },
        },
        42: {
            name: "The Mushroom Kingdom",
            tooltip: "Get 1e1000 Super Mushroom. <br> Reward: 2.67e15 AP",
            done() { return player.super_mushroom.points.gte("1e1000") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("2.67e15")
            },
        },
        43: {
            name: "Geometry",
            tooltip: "Unlock Bouncy Ball Flower layer. <br> Reward: 1.00e20 AP",
            done() { return hasUpgrade('invincible_star', 35) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1.00e20")
            },
        },
        44: {
            name: "Crazy amount",
            tooltip: "Get 1e10000 Cleared Courses. <br> Reward: 1.66e31 AP <br> Autobuy Invincible Star and it resets nothing, forever.",
            done() { return player.points.gte("1e10000") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1.66e31")
            },
        },
        45: {
            name: "Bounce speed like light",
            tooltip: "Get 299,792,458 Bouncy Ball Flowers. <br> Reward: 3.21e42 AP",
            done() { return player.bouncy_ball_flower.points.gte("299792458") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("3.21e42")
            },
        },
        51: {
            name: "Best star shine!",
            tooltip: "Get 20 Invincible Stars. <br> Reward: 1.00e50 AP <br>",
            done() { return player.invincible_star.points.gte(20) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e50")
            },
        },
        52: {
            name: "The giant",
            tooltip: "Unlock Big Mushroom layer. <br> Reward: 1.00e74 AP <br>",
            done() { return player.invincible_star.points.gte(20) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e74")
            },
        },
        53: {
            name: "I don't want to click the challenge anymore",
            tooltip: "Get 11th 1UP Mushroom upgrade. <br> Reward: 1.00e99 AP <br> Auto complete challenge Goomba, forever.",
            done() { return hasUpgrade('oneup_mushroom', 31) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e99")
            },
            effect() {
                if (hasUpgrade('oneup_mushroom', 31) || hasAchievement('achievements', 53))
                    return player.super_mushroom.challenges[11] = new Decimal(3)
            },
        },
        54: {
            name: "Broke all the ice",
            tooltip: "Get 10000 Broken Ice Blocks. <br> Reward: 1.00e126 AP <br>",
            done() { return player.big_mushroom.broken_ice_block.gte(10000) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e126")
            },
        },
        55: {
            name: "Fly!",
            tooltip: "Unlock Super Leaf layer. <br> Reward: 1.00e200 AP <br>",
            done() { return hasUpgrade('oneup_mushroom', 35) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e200")
            },
        },
        61: {
            name: "Necessary automation",
            tooltip: "Get your first Super Leaf. <br> Reward: 1.79e308 AP <br> Keep the reward on 1st Super Leaf milestone forever.",
            done() { return hasMilestone('super_leaf', 0) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1.79e308")
            },
        },
        62: {
            name: "Clicking too much is tiring",
            tooltip: "Get your second Super Leaf. <br> Reward: 2.71e412 AP <br> Keep the reward on 2nd Super Leaf milestone forever.",
            done() { return hasMilestone('super_leaf', 1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("2.71e412")
            },
        },
        63: {
            name: "Flying training",
            tooltip: "Get your fourth Super Leaf. <br> Reward: 5.10e541 AP <br> Keep the reward about automation on 3rd and 4th Super Leaf milestones forever.",
            done() { return hasMilestone('super_leaf', 3) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("5.10e541")
            },
        },
        64: {
            name: "Fly faster",
            tooltip: "Get your sixth Super Leaf. <br> Reward: 7.77e777 AP <br> Keep the reward on 6th Super Leaf milestone forever.",
            done() { return hasMilestone('super_leaf', 5) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("7.77e777")
            },
        },
        65: {
            name: "Flying skills",
            tooltip: "Get 1 SL Skill Point. <br> Reward: 1.66e1209 AP <br>",
            done() { return player.super_leaf.slsp.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1.66e1209")
            },
        },
        71: {
            name: "10^elephant",
            tooltip: "Get 1e74751 Cleared Courses. <br> Reward: 1.00e1500 AP <br>",
            done() { return player.points.gte("1e74751") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e1500")
            },
        },
        72: {
            name: "Dropped from a bird?",
            tooltip: "Unlock Cape Feather layer. <br> Reward: 1.00e2024 AP <br>",
            done() { return hasUpgrade('super_leaf', 321) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e2024")
            },
        },
        73: {
            name: "10^crow",
            tooltip: "Get 1e501761 Cleared Courses. <br> Reward: 1.00e3250 AP <br>",
            done() { return player.points.gte("1e501761") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e3250")
            },
        },
        74: {
            name: "10^Vrabbit",
            tooltip: "Get 1e1666390 Cleared Courses. <br> Reward: 1.00e5000 AP <br>",
            done() { return player.points.gte("1e1666390") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e5000")
            },
        },
        75: {
            name: "Destroy the icy world",
            tooltip: "Get 1e1000 Broken Ice Blocks. <br> Reward: 1.00e7500 AP <br>",
            done() { return player.big_mushroom.broken_ice_block.gte("1e1000") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e7500")
            },
        },
        81: {
            name: "It's your friend, not your tool!",
            tooltip: "Unlock Yoshi Egg layer. <br> Reward: 1.00e11451 AP <br>",
            done() { return hasUpgrade('cape_feather', 35) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e11451")
            },
        },
        82: {
            name: "Green or red?",
            tooltip: "Get 501761 Yoshis and 501761 Red Yoshis. <br> Reward: 1.00e24500 AP <br>",
            done() { return player.yoshi_egg.yoshi.gte(501761) && player.yoshi_egg.red_yoshi.gte(501761) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e24500")
            },
        },
        83: {
            name: "Helicopter",
            tooltip: "Unlock Propeller Mushroom layer and get 1 Propeller Mushroom. <br> Reward: 1.00e47000 AP <br>Keep all the automations (like 1st PM milestone said) in row 3. Nice Qol",
            done() { return player.propeller_mushroom.points.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e47000")
            },
        },
        84: {
            name: "Micrillion fire shots",
            tooltip: "Get 1e3000003 Fire Flowers. <br> Reward: 1.00e81818 AP.",
            done() { return player.fire_flower.points.gte("1e3000003") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e81818")
            },
        },
        85: {
            name: "Another flying training",
            tooltip: "Unlock 1st Propeller Mushroom challenge. <br> Reward: 1.00e100000 AP.",
            done() { return hasUpgrade('yoshi_egg', 31) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e100000")
            },
        },
        91: {
            name: "Golden power-up",
            tooltip: "Unlock Super Bell layer. <br> Reward: 1.00e300000 AP.",
            done() { return hasUpgrade('propeller_mushroom', 25) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e300000")
            },
        },
        92: {
            name: "Trialogue clears??",
            tooltip: "Get e1e10 Cleared Courses. <br> Reward: 1.00e1200000 AP.",
            done() { return player.points.gte("ee10") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e1200000")
            },
        },
        93: {
            name: "Giga bell (Bowser's Fury)",
            tooltip: "Get 1e200 Super Bells. <br> Reward: 1.00e2400000 AP.",
            done() { return player.super_bell.points.gte(1e200) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e2400000")
            },
        },
        94: {
            name: "For workers?",
            tooltip: "Unlock Super Hammer layer. <br> Reward: 1.00e3600000 AP.",
            done() { return hasUpgrade('propeller_mushroom', 35) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e3600000")
            },
        },
        95: {
            name: "Centipicillion clears",
            tooltip: "Get e3e14 Cleared Courses. <br> Reward: 1.00e7250000 AP.",
            done() { return player.points.gte("e3e14") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e7250000")
            },
        },
        101: {
            name: "Create",
            tooltip: "Unlock Super Hammer challenges. <br> Reward: 1.00e10000000 AP.",
            done() { return hasUpgrade('super_bell', 35) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e10000000")
            },
        },
        102: {
            name: "Proof of the master",
            tooltip: "Unlock Master Sword layer. <br> Reward: 1.00e19860221 AP.",
            done() { return hasUpgrade('super_hammer', 35) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e19860221")
            },
        },
        103: {
            name: "Center area",
            tooltip: "Aim the center area for explotion. <br> Reward: 1.00e31700000 AP.",
            done() { return player.master_sword.links_bomb_random == 5 },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e31700000")
            },
        },
        104: {
            name: "A lot of golden rupee!",
            tooltip: "Get 300,000,000 Rupee. <br> Reward: 1.00e100,000,000 AP.",
            done() { return player.master_sword.rupee.gte(300000000) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("1e100000000")
            },
        },
        105: {
            name: "You still remember this",
            tooltip: "Get 1e258 Super Hammer. <br> Reward: e1.000e10 AP, unlock 33rd Master Sword upgrade.",
            done() { return player.super_hammer.points.gte(1e258) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee10")
            },
        },
        111: {
            name: "SMB2?",
            tooltip: "Unlock SMB2 Mushroom layer. <br> Reward: e1.111e11 AP.",
            done() { return hasUpgrade('master_sword', 75) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1.111e11")
            },
        },
        112: {
            name: "Grabbing is easier",
            tooltip: "Buy 'Exa Grabbing' once. <br> Reward: e1.500e13 AP.",
            done() { return player.usa_mushroom.buyables[31].gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1.500e13")
            },
        },
        113: {
            name: "Quetta+",
            tooltip: "Get 1e1000 Grabbing Enemies. <br> Reward: e5.500e15 AP.",
            done() { return player.usa_mushroom.grabs.gte("1e1000") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e2.500e15")
            },
        },
        114: {
            name: "Cat, raccoon and... Frog?",
            tooltip: "Unlock Frog Suit layer. <br> Reward: e2.000e20 AP.",
            done() { return hasMilestone('oneup_mushroom', 2) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e2.000e20")
            },
        },
        115: {
            name: "Physics does not exist!",
            tooltip: "Make Frog Mario's swimming speed over than light speed (c). <br> Reward: e2.024e24 AP.",
            done() { return player.frog_suit.swim_speed.gte(299792458) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e2.024e24")
            },
        },
        121: {
            name: "Why balloons can't wear helmets?",
            tooltip: "Unlock Power Balloon layer. <br> Reward: e1e32 AP.",
            done() { return hasUpgrade('frog_suit', 35) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee32")
            },
        },
        122: {
            name: "Newton's acorn",
            tooltip: "Unlock Super Acorn layer. <br> Reward: e1e35 AP.",
            done() { return hasUpgrade('power_balloon', 15) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee35")
            },
        },
        123: {
            name: "Infinite Space",
            tooltip: "Get 1.79e308 Expansion Space. <br> Reward: e1e38 AP.",
            done() { return player.power_balloon.space.gte("1.79e308") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee38")
            },
        },
        124: {
            name: "Milestone^2",
            tooltip: "Overpower your first milestone. <br> Reward: e1e41 AP.",
            done() { return hasUpgrade('power_balloon', 45) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee41")
            },
        },
        125: {
            name: "The last power-up has arrived!",
            tooltip: "Unlock Boomerang Flower layer. <br> Reward: e1e50 AP.",
            done() { return hasUpgrade('super_acorn', 32) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee50")
            },
        },
        131: {
            name: "Loyal object",
            tooltip: "Get your 1st Boomerang. <br> Reward: e5e55 AP.",
            done() { return player.boomerang_flower.boomerang.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e5e55")
            },
        },
        132: {
            name: "Loyal II",
            tooltip: "Unlock 1st Boomerang's effect. <br> Reward: e4e57 AP.",
            done() { return player.boomerang_flower.boomerang.gte(500) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e4e57")
            },
        },
        133: {
            name: "Loyal III",
            tooltip: "Unlock all 3 Boomerang's effects. <br> Reward: e3e59 AP.",
            done() { return player.boomerang_flower.boomerang.gte(1e21) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e3e59")
            },
        },
        134: {
            name: "The last power-up showtime!",
            tooltip: "Have 4 overpowered milestones. <br> Reward: e3e63 AP.",
            done() { return hasUpgrade('super_acorn', 103) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e3e63")
            },
        },
        135: {
            name: "Mario time!",
            tooltip: "Unlock Mario layer. <br> Reward: e3e66 AP.",
            done() { return hasUpgrade('boomerang_flower', 35) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e3e66")
            },
        },
        141: {
            name: "Mario's great adventure",
            tooltip: "Mario cleared his first course. <br> Reward: e5e70 AP.",
            done() { return player.mario.c_re.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e5e70")
            },
        },
        142: {
            name: "Mario is a hero",
            tooltip: "Mario cleared his first imaginary course. <br> Reward: e3e80 AP.",
            done() { return player.mario.c_im.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e3e80")
            },
        },
        143: {
            name: "Mansion cleaner",
            tooltip: "Unlock Luigi layer. <br> Reward: e1e90 AP.",
            done() { return hasUpgrade('mario', 51) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1e90")
            },
        },
        144: {
            name: "Different journey",
            tooltip: "Luigi cleared his first course. <br> Reward: e1e115 AP.",
            done() { return player.luigi.c.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1e115")
            },
        },
        145: {
            name: "Hey! Where's the captain?",
            tooltip: "Unlock Toad layer. <br> Reward: e1e145 AP.",
            done() { return hasMilestone('luigi', 3) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1e145")
            },
        },
        151: {
            name: "Level up!",
            tooltip: "Toad level 1. <br> Reward: e1e180 AP.",
            done() { return player.toad.level.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1e180")
            },
        },
        152: {
            name: "Tier up!",
            tooltip: "Toad tier 1. <br> Reward: e1e210 AP.",
            done() { return player.toad.tier.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1e210")
            },
        },
        153: {
            name: "All 4 characters",
            tooltip: "Unlock Toadette layer. <br> Reward: e1e240 AP.",
            done() { return player.toad.tier.gte(4) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1e240")
            },
        },
        154: {
            name: "Supertier layer up!",
            tooltip: "Toad tetr 1. <br> Reward: e1e270 AP.",
            done() { return player.toad.supertier[0].gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1e270")
            },
        },
        155: {
            name: "Awakening",
            tooltip: "Get 1 Awaken Power. <br> Reward: e1.7976e308 AP.",
            done() { return player.toad.awaken_power.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1.7976e308")
            },
        },
        161: {
            name: "Googolplexichime",
            tooltip: "Get e1e1000 cleared courses. <br> Reward: e3.69e369 AP, keep PCK in coin layer.",
            done() { return player.points.gte("ee1000") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e3.69e369")
            },
        },
        162: {
            name: "Mario locked",
            tooltip: "Reach Mario cleared courses hardcap^3. <br> Reward: e4.56e456 AP.",
            done() { return player.mario.c_re.gte('1e6000003') },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e4.56e456")
            },
        },
        163: {
            name: "Special power in NSMBUDX",
            tooltip: "Get 1 Toadette's crown. <br> Reward: e3e1000 AP.",
            done() { return player.toadette.crown.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e3e1000")
            },
        },
        164: {
            name: "Toadette becomes a princess?",
            tooltip: "Peachette level 1. <br> Reward: e3e1500 AP.",
            done() { return player.toadette.peachette.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e3e1500")
            },
        },
        165: {
            name: "Hardcap: softcap",
            tooltip: "Reach the softcap of Toad level 3 effect. <br> Reward: e3e3000 AP.",
            done() { return player.toad.level.gte(500) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e3e3000")
            },
        },
        171: {
            name: "Is that too easy?",
            tooltip: "Unlock Easy Endless Challenge layer. <br> Reward: e3e5000 AP.",
            done() { return player.toad.supertier[0].gte(6) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e3e5000")
            },
        },
        172: {
            name: "No damage",
            tooltip: "Cleared 1 easy endless course without taking damage. <br> Reward: e1e7000 AP.",
            done() { return player.easy.no_dmg.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1e7000")
            },
        },
        173: {
            name: "Fastest way to gain a clear",
            tooltip: "Get 1 Free Clear. <br> Reward: e1e12000 AP.",
            done() { return player.easy.free_c.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1e12000")
            },
        },
        174: {
            name: "Raise the difficulty",
            tooltip: "Unlock Normal Endless Challenge layer. <br> Reward: e1e30000 AP.",
            done() { return player.toad.supertier[2].gte(3) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1e30000")
            },
        },
        175: {
            name: "One shot master",
            tooltip: "Cleared 1 normal endless course with one attempt. <br> Reward: e1e50000 AP.",
            done() { return player.normal.oneshot.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1e50000")
            },
        },
        181: {
            name: "Live for a millennium (1000年生きてる/存活千年)",
            tooltip: "Accumulate 1000 years in 2nd Normal Endless upgrade time. <br> Reward: e1e140000 AP.",
            done() { return tmp.normal.upgrades[12].time.gte(31556926080) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1e140000")
            },
        },
        182: {
            name: "Are you an expert for this?",
            tooltip: "Unlock Expert Endless Challenge layer. <br> Reward: e3.33e333333 AP.",
            done() { return hasUpgrade('normal', 35) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e3.33e333333")
            },
        },
        183: {
            name: "Bosses...",
            tooltip: "Enter a boss challenge. <br> Reward: e1.00e1000000 AP.",
            done() { return inExpertBossChallenge() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1e1000000")
            },
        },
        184: {
            name: "Tetralogue clears!!",
            tooltip: "Get ee1e10 Cleared Courses. <br> Reward: e1.00e10,000,000 AP.",
            done() { return player.points.gte("ee1e10") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1e10000000")
            },
        },
        185: {
            name: "Tiers and layers",
            tooltip: "Toad Oct 1. <br> Reward: e1.00e100,000,000 AP.",
            done() { return player.toad.tierlayer.gte(8) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1e100000000")
            },
        },
        191: {
            name: "No no no too hard for defeating it!",
            tooltip: "Defeat 1 Iggy. <br> Reward: ee1,000,000,000 AP.",
            done() { return player.expert.iggy.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1e1000000000")
            },
        },
        192: {
            name: "The hardest, let's go!",
            tooltip: "Unlock Super Expert Endless Challenge layer. <br> Reward: ee10,000,000,000 AP.",
            done() { return hasUpgrade('expert', 41) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1e10000000000")
            },
        },
        193: {
            name: "They can jump higher",
            tooltip: "Get 1 Wing. <br> Reward: ee100,000,000,000 AP.",
            done() { return player.expert.wing.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("e1e100000000000")
            },
        },
        194: {
            name: "I hope this course have no flaw",
            tooltip: "Get 3e40 Wings. <br> Reward: ee1.00e13 AP.",
            done() { return player.expert.wing.gte(3e40) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee1e13")
            },
        },
        195: {
            name: "Layer^10",
            tooltip: "Toad Dec 1. <br> Reward: ee1.00e16 AP.",
            done() { return player.toad.tierlayer.gte(10) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee1e16")
            },
        },
        201: {
            name: "Is this really a Boss?",
            tooltip: "Defeat 1 Boom Boom. <br> Reward: ee3.00e20 AP.",
            done() { return player.s_expert.boom_boom.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee3e20")
            },
        },
        202: {
            name: "Don't try to drink that",
            tooltip: "Get 301 Poison. <br> Reward: ee3.00e21 AP.",
            done() { return player.s_expert.poison.gte(301) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee3e21")
            },
        },
        203: {
            name: "Teamwork!",
            tooltip: "Unlock Multiplayer Co-op layer. <br> Reward: ee1.45e26 AP.",
            done() { return hasSEendlessUpgrade(35) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee1.45e26")
            },
        },
        204: {
            name: "The top",
            tooltip: "Get 1e30 Super Expert Endless Clears. <br> Reward: ee1e27 AP, you can keep Boom Booms and Poom Pooms amount of once beaten at least.",
            done() { return player.s_expert.points.gte(1e30) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee1e27")
            },
        },
        205: {
            name: "Everyone's battle",
            tooltip: "Unlock Multiplayer Versus layer. <br> Reward: ee1e28 AP",
            done() { return hasUpgrade('coop', 15) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee1e28")
            },
        },
        211: {
            name: "Win an 1v1 first",
            tooltip: "Reach Versus Rating 70. <br> Reward: ee1e31 AP",
            done() { return player.versus.points.gte(75) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee1e31")
            },
        },
        212: {
            name: "Who's his mother?",
            tooltip: "Complete challenge 'Bowser Jr.' 3 times. <br> Reward: ee1e34 AP, 5x lava gain.",
            done() { return d(challengeCompletions('coop', 11)).gte(3) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee1e34")
            },
        },
        213: {
            name: "Ahh wooah!",
            tooltip: "Complete challenge 'Bowser Jr.' 20 times. <br> Reward: ee1e37 AP",
            done() { return d(challengeCompletions('coop', 11)).gte(20) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee1e37")
            },
        },
        214: {
            name: "Rank up!",
            tooltip: "Reach Versus Rating 1000. <br> Reward: ee1e40 AP.",
            done() { return player.versus.points.gte(1000) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee1e40")
            },
        },
        215: {
            name: "Ikillion",
            tooltip: "Get ee3e60 Cleared Courses. <br> Reward: ee3e45 AP.",
            done() { return player.points.gte('ee3e60') },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee3e45")
            },
        },
        221: {
            name: "I hate lags",
            tooltip: "Player a VS comptition in lag. <br> Reward: ee5e50 AP.",
            done() { return player.versus.lag.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee5e50")
            },
        },
        222: {
            name: "One pow block, three Bowsers",
            tooltip: "Get 60 Pow Blocks. <br> Reward: ee6e57 AP.",
            done() { return player.s_expert.pow_block.gte(60) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee6e57")
            },
        },
        223: {
            name: "Googolduplex",
            tooltip: "Get ee1e100 Cleared Courses. <br> Reward: ee6.8686e68 AP.",
            done() { return player.points.gte("ee1e100") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee6.8686e68")
            },
        },
        224: {
            name: "Coursebot",
            tooltip: "Unlock Themed Course layer. <br> Reward: ee7.9797e79 AP.",
            done() { return tmp.themed.layerShown },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee7.9797e79")
            },
        },
        225: {
            name: "Upload limit",
            tooltip: "Upload 100 Themed Courses. <br> Reward: ee1e100 AP.",
            done() { return player.themed.points.gte(100) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee1e100")
            },
        },
        231: {
            name: "Too many 1-1!",
            tooltip: "Clear World 1-1 100 times. <br> Reward: ee1e120 AP.",
            done() { return player.themed.w11.gte(100) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee1e120")
            },
        },
        232: {
            name: "Your skill is key",
            tooltip: "Win a versus competition with a batoko course. <br> Reward: ee1e140 AP.",
            done() { return player.versus.batoko.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee1e140")
            },
        },
        233: {
            name: "ee infinity",
            tooltip: "Get ee1.798e308 Cleared Courses. <br> Reward: ee1e180 AP.",
            done() { return player.points.gte("ee1.798e308") },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee1e180")
            },
        },
        234: {
            name: "We're halfway there, right?",
            tooltip: "Raise your Versus Rating to 4000 (Rank S). <br> Reward: ee1e220 AP.",
            done() { return player.versus.points.gte(4000) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee1e220")
            },
        },
        235: {
            name: "Oh no! Just need one frame more!",
            tooltip: "Unlock Speedrun Course layer. <br> Reward: ee1e260 AP.",
            done() { return player.toad.tierlayer.gte(30) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee1e260")
            },
        },
        241: {
            name: "Running for the record",
            tooltip: "Clear 1 TA Course. <br> Reward: ee1.7977e308 AP.",
            done() { return player.speedrun.TA.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee1.7977e308")
            },
        },
        242: {
            name: "Meta toad layer",
            tooltip: "Toad Pentacont 1. <br> Reward: ee1e450 AP.",
            done() { return player.toad.tierlayer.gte(50) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee1e450")
            },
        },
        243: {
            name: "<i>Fort of Silence</i>",
            tooltip: "Make the theoretical time of your TA Course greater or equal to 9.999 seconds and set your style and theme to NSMBU and Castle in No Damage Challenge tab. <br> Reward: ee1e600 AP, 9.999e9x TA Courses gain.<br><br><i>Course ID: DXF-27M-9NF</i>",
            done() { return tmp.speedrun.approach_difference.lte(0.00100001) && player.easy.random_style.eq(4) && player.easy.random_theme.eq(10) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee1e600")
            },
        },
        244: {
            name: "There is no invinsible star",
            tooltip: "Unlock Precision Course layer. <br> Reward: ee1e900 AP",
            done() { return hasMilestone('speedrun', 3) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add("ee1e900")
            },
        },
    },
    upgrades: {
        11: {
            title: "希望不会有BUG",
            description: "但愿吧。",
            cost: new Decimal("e^12413170 1.241"),
        },
    },
})
// 特殊层：隐藏成就
addLayer("secret_achievements", {
    name: "secret achievements",
    symbol: "SAc",
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            secretnumber: new Decimal(0),
        }
    },

    color: "#A060FF",                       // The color for this layer, which affects many elements.
    resource: "secret achievements",            // The name of this layer's main prestige resource.
    row: "side",                                 // The row this layer is on (0 is the first row).

    layerShown() { return true },          // Returns a bool for if this layer's node should be visible in the tree.
    clickables: {
        11: {
            title() {
                title = formatWhole(player[this.layer].secretnumber)
                return title
            },
            display() {
                dis = ""
                if (player.secret_achievements.secretnumber.eq(69)) dis = "lol"
                if (player.secret_achievements.secretnumber.eq(114514)) dis = "homo"
                if (player.secret_achievements.secretnumber.eq(1919810)) dis = "臭死力"
                if (player.secret_achievements.secretnumber.eq(74751)) dis = "嬲"
                if (player.secret_achievements.secretnumber.eq(501761)) dis = "乌鸦喝水，爱你呦！"
                if (player.secret_achievements.secretnumber.gte("1e1000")) dis = "Are you still here?"
                if (player.secret_achievements.secretnumber.gte("1e10000")) dis = "Seriously?"
                if (player.secret_achievements.secretnumber.gte("1e100000")) dis = "Impressive."
                if (player.secret_achievements.secretnumber.gte("1e1000000")) dis = "Are you using autoclicker and afk for hours?"
                if (player.secret_achievements.secretnumber.gte("ee10")) dis = "You cheated!"
                return dis
            },
            canClick() { return true },
        },
        21: {
            title: "+1",
            canClick() { return true },
            onClick() { return player[this.layer].secretnumber = player[this.layer].secretnumber.add(1) },
        },
        22: {
            title: "+10",
            canClick() { return true },
            onClick() { return player[this.layer].secretnumber = player[this.layer].secretnumber.add(10) },
        },
        23: {
            title: "x2",
            canClick() { return true },
            onClick() { return player[this.layer].secretnumber = player[this.layer].secretnumber.times(2) },
        },
        24: {
            title: "x10",
            canClick() { return true },
            onClick() { return player[this.layer].secretnumber = player[this.layer].secretnumber.times(10) },
        },
        25: {
            title: "=0",
            canClick() { return true },
            onClick() { return player[this.layer].secretnumber = decimalZero },
        },
    },
    achievements: {
        11: {
            name: "Super Mario Galaxy",
            tooltip() {
                if (hasAchievement(this.layer, this.id)) return "Set the game theme to galaxy"
                else return "Where can you find the galaxy?"
            },
            done() { return options.theme == "galaxy" },
            onComplete() {
                return player[this.layer].points = player[this.layer].points.add(1)
            },
        },
        12: {
            name: "How can you read this notation?",
            tooltip() {
                if (hasAchievement(this.layer, this.id)) return "Set the notation to Standard"
                else return "A difficult notation"
            },
            done() { return player.notation == "Standard" },
            onComplete() {
                return player[this.layer].points = player[this.layer].points.add(1)
            },
        },
        13: {
            name: "Did you use the autoclicker?",
            tooltip() {
                if (hasAchievement(this.layer, this.id)) return "Make the number in Secret Achievement layer to 1e10000 or larger"
                else return "Why?"
            },
            done() { return player.secret_achievements.secretnumber.gte("1e10000") },
            onComplete() {
                return player[this.layer].points = player[this.layer].points.add(1)
            },
        },
        14: {
            name: "Nice",
            tooltip() {
                if (hasAchievement(this.layer, this.id)) return "Make the number in Secret Achievement layer equal to 69"
                else return "Funny"
            },
            done() { return player.secret_achievements.secretnumber.eq(69) },
            onComplete() {
                return player[this.layer].points = player[this.layer].points.add(1)
            },
        },
        15: {
            name: "Heng heng heng aaaaahhhhh!",
            tooltip() {
                if (hasAchievement(this.layer, this.id)) return "Make the number in Secret Achievement layer equal to 114514"
                else return "Smelly!"
            },
            done() { return player.secret_achievements.secretnumber.eq(114514) },
            onComplete() {
                return player[this.layer].points = player[this.layer].points.add(1)
            },
        },
        21: {
            name: "Why can't I pass 29?",
            tooltip() {
                if (hasAchievement(this.layer, this.id)) return "Buyable 'Pedaka swimming' level is 7 or larger"
                else return "Bowser said you can't pass this, or this game would be unbalanced"
            },
            done() { return getBuyableAmount('frog_suit', 21).gte(7) },
            onComplete() {
                return player[this.layer].points = player[this.layer].points.add(1)
            },
        },
        22: {
            name: "Best mystery mushroom ever",
            tooltip() {
                if (hasAchievement(this.layer, this.id)) return "Find Yu Ayasaki"
                else return "Find a secret button to unlock"
            },
            done() { return player.toadette.yu_ayasaki },
            onComplete() {
                return player[this.layer].points = player[this.layer].points.add(1)
            },
        },
        23: {
            name: "Anti-cheesed lava",
            tooltip() {
                if (hasAchievement(this.layer, this.id)) return "Input a negative number in spending lava input and try to gain lava by cheesing."
                else return "Loss a negative number amount is win"
            },
            done() { return player.s_expert.lavaSpendInput.lt(0) },
            onComplete() {
                return player[this.layer].points = player[this.layer].points.add(1)
            },
        },
        24: {
            name: "The broken history timelines",
            tooltip() {
                if (hasAchievement(this.layer, this.id)) return "Use five different notations shown and get over 1e15 currency in your input history (You can do this in the World 1-1 or Batoko)."
                else return "You win 1Qa, you win 1e15, you win E15#1..."
            },
            done() {
                let cur
                let notdif = [0, 0]
                let gain1e15 = [0, 0]
                let done = false
                for (let i = 0; i < 2; i++) {
                    if (i == 0) cur = "themed"
                    if (i == 1) cur = "versus"
                    for (let j = 0; j < 5; j++) {
                        if (player[cur].history_gain[j].gte(1e15)) gain1e15[i] += 1
                        notdif[i] = new Set(player[cur].history_notation).size
                        if (notdif[i] == 5 && gain1e15[i] == 5) done = true
                    }
                }
                return done
            },
            onComplete() {
                return player[this.layer].points = player[this.layer].points.add(1)
            },
        },
    },
})
// 特殊层：统计
addLayer("stats", {
    name: "Statistics",
    symbol: "St",
    points: new Decimal(0),
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
        }
    },

    color: "#FFFFFF",                       // The color for this layer, which affects many elements.
    resource: "statistics",            // The name of this layer's main prestige resource.
    row: "side",                                 // The row this layer is on (0 is the first row).
    tooltip: "Statistics",

    layerShown() { return true },          // Returns a bool for if this layer's node should be visible in the tree.

    tabFormat: [
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Cleared Courses": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return "You have <h2 style='color: #ffffff; text-shadow: 0 0 10px #ffffff'>" + format(player.points) + "</h2> Cleared Courses."
                    }],
                    ["display-text", function () {
                        if (player.points.lte(836000))
                            return "The number of Cleared Courses is " + format(player.points.div(3000)) + " times of Rosalina's outfits' requirment."
                        else if (player.points.lte(1e20))
                            return "The number of Cleared Courses is " + format(player.points.div(836000)) + " times of Total Clears Rank 1's (Feb. 2024) amount."
                        else if (player.points.lte(1e180))
                            return "If you wrote 3 numbers a second, it would take you " + format(player.points.log(10).div(3)) + " seconds to write down your Cleared Courses amount.<br>"
                        else if (player.points.lte("1e10800"))
                            return "If you wrote 3 numbers a second, it would take you " + format(player.points.log(10).div(180)) + " minutes to write down your Cleared Courses amount.<br>Also you can clear " + formatWhole(player.points.log(10).div(180).times(1.1)) + " courses in Easy Endless."
                        else if (player.points.lte("1e259200"))
                            return "If you wrote 3 numbers a second, it would take you " + format(player.points.log(10).div(10800)) + " hours to write down your Cleared Courses amount.<br>Also you can clear " + formatWhole(player.points.log(10).div(180).times(1.1)) + " courses in Easy Endless."
                        else if (player.points.lte("1e94608000"))
                            return "If you wrote 3 numbers a second, it would take you " + format(player.points.log(10).div(259200)) + " days to write down your Cleared Courses amount.<br>Also you can clear " + formatWhole(player.points.log(10).div(1440)) + " courses in Super Expert Endless."
                        else if (player.points.lte("e9.4608e10"))
                            return "If you wrote 3 numbers a second, it would take you " + format(player.points.log(10).div(94608000)) + " years to write down your Cleared Courses amount.<br>Also you can get a " + formatWhole(player.points.log(10).div(540).log(4)) + "-win streak in Versus Mode."
                        else
                            return "If you wrote 3 numbers a second, it would take you " + formatTimeLong(player.points.log(10).div(3)) + " to write down your Cleared Courses amount.<br>Also you can get a " + formatWhole(player.points.log(10).div(540).log(4)) + "-win streak in Versus Mode."
                    }],
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, white, #cccccc)',
                        'border-color': 'white',
                        'color': 'black',
                    }
                },
            },
            "Currencies": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", function () {
                        return `<div class = "textAlignLeft">Coin: ${textStyle_h4(format(player.coin.points), 'feb252')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('coin', 31))
                            return `<div class = "textAlignLeft">Pink Key Coin: ${textStyle_h4(format(player.coin.pink_key_coin), 'ff746f')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.super_mushroom.layerShown)
                            return `<div class = "textAlignLeft">Super Mushroom: ${textStyle_h4(format(player.super_mushroom.points), 'c42533')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.fire_flower.layerShown)
                            return `<div class = "textAlignLeft">Fire Flower: ${textStyle_h4(format(player.fire_flower.points), 'ff8d00')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.invincible_star.layerShown)
                            return `<div class = "textAlignLeft">Invincible Star: ${textStyle_h4(format(player.invincible_star.points), 'ffb15a')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.oneup_mushroom.layerShown)
                            return `<div class = "textAlignLeft">1UP Mushroom: ${textStyle_h4(format(player.oneup_mushroom.points), '5bbf2f')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('usa_mushroom', 35))
                            return `<div class = "textAlignLeft">Rotten Mushroom: ${textStyle_h4(format(player.oneup_mushroom.rotten_mushroom), '9600b1')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.bouncy_ball_flower.layerShown)
                            return `<div class = "textAlignLeft">Bouncy Ball Flower: ${textStyle_h4(format(player.bouncy_ball_flower.points), '606040')}</div>`
                    }],
                    ["raw-html", function () {
                        if (tmp.bouncy_ball_flower.layerShown)
                            return `<div class = "textAlignLeft">Bouncy Ball: ${textStyle_h4(format(player.bouncy_ball_flower.bouncy_ball), 'e4e4b2')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.big_mushroom.layerShown)
                            return `<div class = "textAlignLeft">Big Mushroom: ${textStyle_h4(format(player.big_mushroom.points), 'f7341d')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('big_mushroom', 11))
                            return `<div class = "textAlignLeft">Broken Brick: ${textStyle_h4(format(player.big_mushroom.broken_brick), 'a05911')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('big_mushroom', 15))
                            return `<div class = "textAlignLeft">Broken Hard Brick: ${textStyle_h4(format(player.big_mushroom.broken_hard_brick), 'ffff80')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('big_mushroom', 25))
                            return `<div class = "textAlignLeft">Broken Ice Block: ${textStyle_h4(format(player.big_mushroom.broken_ice_block), '55dff8')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.super_leaf.layerShown)
                            return `<div class = "textAlignLeft">Super Leaf: ${textStyle_h4(format(player.super_leaf.points), 'f83a11')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('super_leaf', 15))
                            return `<div class = "textAlignLeft">Super Leaf Skill Points (SLST): ${textStyle_h4(format(player.super_leaf.slsp), 'f83a11')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.cape_feather.layerShown)
                            return `<div class = "textAlignLeft">Cape Feather: ${textStyle_h4(format(player.cape_feather.points), 'fcbf02')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('cape_feather', 15))
                            return `<div class = "textAlignLeft">Cape Essence: ${textStyle_h4(format(player.cape_feather.ce), 'fcbf02')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.yoshi_egg.layerShown)
                            return `<div class = "textAlignLeft">Yoshi Egg: ${textStyle_h4(format(player.yoshi_egg.points), '00d800')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasMilestone('yoshi_egg', 0))
                            return `<div class = "textAlignLeft">Yoshi: ${textStyle_h4(format(player.yoshi_egg.yoshi), '00d800')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasMilestone('yoshi_egg', 0))
                            return `<div class = "textAlignLeft">Red Yoshi: ${textStyle_h4(format(player.yoshi_egg.red_yoshi), 'f70000')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.propeller_mushroom.layerShown)
                            return `<div class = "textAlignLeft">Propeller Mushroom: ${textStyle_h4(format(player.propeller_mushroom.points), 'f83a11')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.super_bell.layerShown)
                            return `<div class = "textAlignLeft">Super Bell: ${textStyle_h4(format(player.super_bell.points), 'b6a017')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.super_hammer.layerShown)
                            return `<div class = "textAlignLeft">Super Hammer: ${textStyle_h4(format(player.super_hammer.points), '403739')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('super_bell', 35))
                            return `<div class = "textAlignLeft">Characters' Box: ${textStyle_h4(format(player.super_hammer.characters_box), 'a0733c')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.master_sword.layerShown)
                            return `<div class = "textAlignLeft">Master Sword: ${textStyle_h4(format(player.master_sword.points), '2730b8')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('master_sword', 15))
                            return `<div class = "textAlignLeft">Link's Bomb: ${textStyle_h4(format(player.master_sword.links_bomb), '2730b8')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('master_sword', 15))
                            return `<div class = "textAlignLeft">Explosion Defeats: ${textStyle_h4(format(player.master_sword.defeats_by_explosion), '2730b8')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('master_sword', 33))
                            return `<div class = "textAlignLeft">Rupee: ${textStyle_h4(format(player.master_sword.rupee), '107010')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('master_sword', 41))
                            return `<div class = "textAlignLeft">Hyrule Shield: ${textStyle_h4(format(player.master_sword.hyrule_shield), '2730b8')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('master_sword', 61))
                            return `<div class = "textAlignLeft">Link's Bow: ${textStyle_h4(format(player.master_sword.links_bow), '2730b8')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('master_sword', 62))
                            return `<div class = "textAlignLeft">Arrow: ${textStyle_h4(format(player.master_sword.arrow), '42b2fa')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('master_sword', 63))
                            return `<div class = "textAlignLeft">Ranged Kills: ${textStyle_h4(format(player.master_sword.ranged_kills), '2730b8')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('master_sword', 72))
                            return `<div class = "textAlignLeft">Total Containers: ${textStyle_h4(format(player.master_sword.container_total), '2730b8')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('master_sword', 72))
                            return `<div class = "textAlignLeft">Container of Heart: ${textStyle_h4(format(player.master_sword.container_of_heart), 'ff2a32')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('master_sword', 73))
                            return `<div class = "textAlignLeft">Container of Energy: ${textStyle_h4(format(player.master_sword.container_of_energy), '00dd00')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.usa_mushroom.layerShown)
                            return `<div class = "textAlignLeft">SMB2 Mushroom: ${textStyle_h4(format(player.usa_mushroom.points), 'f93414')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('usa_mushroom', 12))
                            return `<div class = "textAlignLeft">Grabbing Enemy: ${textStyle_h4(format(player.usa_mushroom.grabs), 'f93414')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.frog_suit.layerShown)
                            return `<div class = "textAlignLeft">Frog Suit: ${textStyle_h4(format(player.frog_suit.points), '24aa0c')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('frog_suit', 15))
                            return `<div class = "textAlignLeft">Current Swimming Speed: ${textStyle_h4(format(player.frog_suit.swim_speed) + " m/s", '24aa0c')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('power_balloon', 14))
                            return `<div class = "textAlignLeft">Best Swimming Speed: ${textStyle_h4(format(player.power_balloon.SSbest) + " m/s", '24aa0c')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.power_balloon.layerShown)
                            return `<div class = "textAlignLeft">Power Balloon: ${textStyle_h4(format(player.power_balloon.points), 'ffff6e')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('power_balloon', 21))
                            return `<div class = "textAlignLeft">Balloon Space: ${textStyle_h4(format(player.power_balloon.space), 'ffff6e')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('power_balloon', 21))
                            return `<div class = "textAlignLeft">Resistance: ${textStyle_h4(format(player.power_balloon.resistance), 'ffff6e')}</div>`
                    }],

                    "blank",
                    ["raw-html", function () {
                        if (tmp.super_acorn.layerShown)
                            return `<div class = "textAlignLeft">Super Acorn: ${textStyle_h4(format(player.super_acorn.points), 'd74a19')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('super_acorn', 15))
                            return `<div class = "textAlignLeft">Flying Strength: ${textStyle_h4(format(player.super_acorn.strength), 'd74a19')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('super_acorn', 15))
                            return `<div class = "textAlignLeft">SMB3 Flying Power: ${textStyle_h4(format(player.super_acorn.SMBsan), 'd74a19')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('super_acorn', 15))
                            return `<div class = "textAlignLeft">SMW Flying Power: ${textStyle_h4(format(player.super_acorn.SMWorld), 'd74a19')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('super_acorn', 15))
                            return `<div class = "textAlignLeft">NSMBU Flying Power: ${textStyle_h4(format(player.super_acorn.NSMBrosU), 'd74a19')}</div>`
                    }],

                    "blank",
                    ["raw-html", function () {
                        if (tmp.boomerang_flower.layerShown)
                            return `<div class = "textAlignLeft">Boomerang Flower: ${textStyle_h4(format(player.boomerang_flower.points), '0097ef')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('boomerang_flower', 22))
                            return `<div class = "textAlignLeft">Boomerang: ${textStyle_h4(format(player.boomerang_flower.boomerang), '0097ef')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.mario.layerShown)
                            return `<div class = "textAlignLeft">Mario: ${textStyle_h4(format(player.mario.points), 'ff0018')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('mario', 15) && !hasUpgrade('mario', 43))
                            return `<div class = "textAlignLeft">Mario Cleared Courses: ${textStyle_h4(format(player.mario.c_re), 'ff0018')}</div>`
                        else if (hasUpgrade('mario', 15) && hasUpgrade('mario', 43))
                            return `<div class = "textAlignLeft">Mario Cleared Courses: ${textStyle_h4(format(player.mario.c_re) + " + " + format(player.mario.c_im) + "i", 'ff0018')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.luigi.layerShown)
                            return `<div class = "textAlignLeft">Luigi: ${textStyle_h4(format(player.luigi.points), '5cb73d')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('luigi', 12))
                            return `<div class = "textAlignLeft">Luigi Cleared Courses: ${textStyle_h4(format(player.luigi.c), '5cb73d')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('toad', 11))
                            return `<div class = "textAlignLeft">Cheesed Luigi Cleared Courses: ${textStyle_h4(format(player.luigi.cheesed), '5cb73d')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.toad.layerShown)
                            return `<div class = "textAlignLeft">Toad: ${textStyle_h4(format(player.toad.points), '0047ff')}</div>`
                    }],
                    ["raw-html", function () {
                        if (player.toad.supertier[0].gte(1))
                            return `<div class = "textAlignLeft">Awaken Power: ${textStyle_h4(format(player.toad.awaken_power), 'ffca00')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.toadette.layerShown)
                            return `<div class = "textAlignLeft">Toadette: ${textStyle_h4(format(player.toadette.points), 'ff4899')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('toadette', 23))
                            return `<div class = "textAlignLeft">Toadette's Crown: ${textStyle_h4(format(player.toadette.crown), 'ff4899')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('toadette', 23))
                            return `<div class = "textAlignLeft">Peachette Level: ${textStyle_h4(format(player.toadette.peachette), 'ff4899')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.easy.layerShown)
                            return `<div class = "textAlignLeft">Easy Endless Clear: ${textStyle_h4(format(player.easy.points), '2dbba4')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('easy', 15))
                            return `<div class = "textAlignLeft">Easy Endless No Damage Clear: ${textStyle_h4(format(player.easy.no_dmg), '2dbba4')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('easy', 31))
                            return `<div class = "textAlignLeft">Free Clear: ${textStyle_h4(format(player.easy.free_c), '2dbba4')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.normal.layerShown)
                            return `<div class = "textAlignLeft">Normal Endless Clear: ${textStyle_h4(format(player.normal.points), '77a831')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('normal', 12) && tmp.normal.upgrades[12].time.lte(31556926080))
                            return `<div class = "textAlignLeft">Time Spent in 2nd Normal Endless upgrade: ${textStyle_h4(formatTime(tmp.normal.upgrades[12].time), '77a831')}</div>`
                        else if (hasUpgrade('normal', 12) && tmp.normal.upgrades[12].time.gt(31556926080))
                            return `<div class = "textAlignLeft">Time Spent in 2nd Normal Endless upgrade: ${textStyle_h4(formatTimeLong(tmp.normal.upgrades[12].time), '77a831')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('normal', 15))
                            return `<div class = "textAlignLeft">One Shot Clear: ${textStyle_h4(format(player.normal.oneshot), '77a831')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('normal', 25))
                            return `<div class = "textAlignLeft">Auto-Mario Course: ${textStyle_h4(format(player.normal.auto_mario), '77a831')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('normal', 25))
                            return `<div class = "textAlignLeft">Semi-auto Course: ${textStyle_h4(format(player.normal.semi_auto), '77a831')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('normal', 25))
                            return `<div class = "textAlignLeft">Condition Courses: ${textStyle_h4(format(player.normal.condition_course), '77a831')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.expert.layerShown)
                            return `<div class = "textAlignLeft">Expert Endless Clear: ${textStyle_h4(format(player.expert.points), 'be924f')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasExpertEndlessUpgrade(13))
                            return `<div class = "textAlignLeft">Larry: ${textStyle_h4(format(player.expert.larry), '21f519')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasExpertEndlessUpgrade(13))
                            return `<div class = "textAlignLeft">Larry's Magic: ${textStyle_h4(format(player.expert.larry_m), '21f519')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasExpertEndlessUpgrade(15))
                            return `<div class = "textAlignLeft">Lemmy: ${textStyle_h4(format(player.expert.lemmy), 'fac215')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasExpertEndlessUpgrade(15))
                            return `<div class = "textAlignLeft">Lemmy's Ball: ${textStyle_h4(format(player.expert.lemmy_b), 'fac215')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasExpertEndlessUpgrade(24))
                            return `<div class = "textAlignLeft">Wendy: ${textStyle_h4(format(player.expert.wendy), 'ff0066')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasExpertEndlessUpgrade(24))
                            return `<div class = "textAlignLeft">Wendy's Magic: ${textStyle_h4(format(player.expert.wendy_m), 'ff0066')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasExpertEndlessUpgrade(35))
                            return `<div class = "textAlignLeft">Iggy: ${textStyle_h4(format(player.expert.iggy), '003ad7')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasExpertEndlessUpgrade(35))
                            return `<div class = "textAlignLeft">Iggy's Magic: ${textStyle_h4(format(player.expert.iggy_m), '003ad7')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasExpertEndlessUpgrade(42))
                            return `<div class = "textAlignLeft">Morton: ${textStyle_h4(format(player.expert.morton), '606060')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasExpertEndlessUpgrade(42))
                            return `<div class = "textAlignLeft">Morton's Magic: ${textStyle_h4(format(player.expert.morton_m), '606060')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasExpertEndlessUpgrade(52))
                            return `<div class = "textAlignLeft">Roy: ${textStyle_h4(format(player.expert.roy), 'ac009e')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasExpertEndlessUpgrade(52))
                            return `<div class = "textAlignLeft">Roy's Magic: ${textStyle_h4(format(player.expert.roy_m), 'ac009e')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasExpertEndlessUpgrade(54))
                            return `<div class = "textAlignLeft">Ludwig: ${textStyle_h4(format(player.expert.ludwig), '07c5d8')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasExpertEndlessUpgrade(54))
                            return `<div class = "textAlignLeft">Ludwig's Magic: ${textStyle_h4(format(player.expert.ludwig_m), '07c5d8')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasAchievement('achievements', 185))
                            return `<div class = "textAlignLeft">Extra Magic: ${textStyle_h4(format(player.expert.magic), 'be924f')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasExpertEndlessUpgrade(62))
                            return `<div class = "textAlignLeft">Wing: ${textStyle_h4(format(player.expert.wing), 'ffffff')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasExpertEndlessUpgrade(72))
                            return `<div class = "textAlignLeft">Boss Rush Course: ${textStyle_h4(format(player.expert.boss_rush), 'be924f')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasExpertEndlessUpgrade(72))
                            return `<div class = "textAlignLeft">Flaw: ${textStyle_h4(format(player.expert.flaw), 'be924f')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.s_expert.layerShown)
                            return `<div class = "textAlignLeft">Super Expert Endless Clear: ${textStyle_h4(format(player.s_expert.points), '6a4fae')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasSEendlessUpgrade(15))
                            return `<div class = "textAlignLeft">Lava: ${textStyle_h4(format(player.s_expert.lava), 'ffbf16')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasExpertEndlessUpgrade(74))
                            return `<div class = "textAlignLeft">Boom Boom: ${textStyle_h4(format(player.s_expert.boom_boom), '6a4fae')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasSEendlessUpgrade(23))
                            return `<div class = "textAlignLeft">Poison: ${textStyle_h4(format(player.s_expert.poison), 'fc2bf0')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasExpertEndlessUpgrade(75))
                            return `<div class = "textAlignLeft">Poom Poom: ${textStyle_h4(format(player.s_expert.poom_poom), '6a4fae')}</div>`
                    }],
                    ["raw-html", function () {
                        if (player.versus.skill.gte(2.024e10))
                            return `<div class = "textAlignLeft">Pow Block: ${textStyle_h4(format(player.s_expert.pow_block), '7c83f6')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.coop.layerShown)
                            return `<div class = "textAlignLeft">Multiplayer Co-op Clear: ${textStyle_h4(format(player.coop.points), 'ffcf03')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('coop', 23))
                            return `<div class = "textAlignLeft">Check Point: ${textStyle_h4(format(player.coop.check_point), '0a1416', 'ffffff')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        let ratingcolor = "ffffff"
                        if (player.versus.points.gte(6000)) ratingcolor = "e9aca9"
                        if (tmp.versus.layerShown)
                            return `<div class = "textAlignLeft">Versus Rating: ${textStyle_h4(format(player.versus.points) + " (" + versusRank(player.versus.points) + ")", ratingcolor)}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('versus', 22))
                            return `<div class = "textAlignLeft">Total experience: ${textStyle_h4(format(player.versus.experienceTotal), 'ffcf03')}</div>`
                    }],
                    ["raw-html", function () {
                        if (player.toad.tierlayer.gte(13))
                            return `<div class = "textAlignLeft">VS Skill tries: ${textStyle_h4(format(player.versus.skill), 'ffcf03')}</div>`
                    }],
                    ["raw-html", function () {
                        if (player.toad.tierlayer.gte(15) && player.points.gte('ee3.25e79') || player.versus.lag.gt(0))
                            return `<div class = "textAlignLeft">Lag competition played: ${textStyle_h4(format(player.versus.lag), 'ffcf03')}</div>`
                    }],
                    ["raw-html", function () {
                        if (player.toad.tierlayer.gte(21) && player.points.gte('ee3.25e79') || player.versus.lag.gt(0))
                            return `<div class = "textAlignLeft">Batoko Wins: ${textStyle_h4(format(player.versus.batoko), 'ffcf03')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.themed.layerShown)
                            return `<div class = "textAlignLeft">Themed Courses: ${textStyle_h4(format(player.themed.points), '748bff')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('themed', 23))
                            return `<div class = "textAlignLeft">World 1-1 Clears: ${textStyle_h4(format(player.themed.w11), '748bff')}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.speedrun.layerShown)
                            return `<div class = "textAlignLeft">Speedrun Courses: ${textStyle_h4(format(player.speedrun.points), '6c3b14')}</div>`
                    }],
                    ["raw-html", function () {
                        if (hasUpgrade('speedrun', 15))
                            return `<div class = "textAlignLeft">TA Courses: ${textStyle_h4(format(player.speedrun.TA), '6c3b14')}</div>`
                    }],
                    ["raw-html", function () {
                        let timeshow = textStyle_h4(formatTimeLong(tmp.speedrun.theoretical_time), '6c3b14')
                        if (tmp.speedrun.approach_difference.abs().lt(0.001)) timeshow = textStyle_h4("10 seconds - " + formatTimeLong(tmp.speedrun.approach_difference), '6c3b14')
                        if (hasUpgrade('speedrun', 15))
                            return `<div class = "textAlignLeft">Theoretical time: ${timeshow}</div>`
                    }],
                    "blank",
                    ["raw-html", function () {
                        if (tmp.precision.layerShown)
                            return `<div class = "textAlignLeft">Precision Courses: ${textStyle_h4(format(player.precision.points), '808080')}</div>`
                    }],
                    ["h-line", "600px"],
                    //开发者测试用，请不要将其显示
                    /*["raw-html", function () {
                        let test = format(player.devTest)
                        return format(player.devTest)
                    }],*/
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, red, orange, yellow, lime, cyan, blue, purple, magenta, pink)',
                        'border-color': '#ffffff',
                        'color': 'black',
                    }
                },
            },
        },
    },
    update() {
        player.devTest = d(10).tetrate(d(player.coop.resetTime).div(1000).add(1))
    }
}),
    // 第一层：金币
    function pinkKeyCoinEffect(x) {
        Decimal.pow(player.coin.pink_key_coin.max(0), 1.5).add(1)
    }
addLayer("coin", {
    name: "coin", // This is optional, only used in a few places, If absent it just uses the layer id.
    symbol: "C", // This appears on the layer's node. Default is the id with the first letter capitalized
    position: 0, // Horizontal position within a row. By default it uses the layer id and sorts in alphabetical order
    componentStyles: {
        "buyable"() {
            return {
                'margin-left': '-7px',
                'margin-right': '-7px',
            }
        }
    },
    startData() {
        return {
            unlocked: true,
            points: new Decimal(0),
            pink_key_coin: new Decimal(0),
        }
    },
    color: "#FEB252",
    requires: new Decimal(10), // Can be a function that takes requirement increases into account
    resource: "Coins", // Name of prestige currency
    baseResource: "cleared courses", // Name of resource prestige is based on
    baseAmount() { return player.points }, // Get the current amount of baseResource
    type: "normal", // normal: cost to gain currency depends on amount gained. static: cost depends on how much you already have
    exponent: 0.5, // Prestige currency exponent
    gainMult() { // Calculate the multiplier for main currency from bonuses
        let mult = new Decimal(1).times(tmp["fire_flower"].effect)
        if (hasMilestone('coin', 0)) mult = mult.times(2.5)
        if (hasMilestone('coin', 1)) mult = mult.times(3)
        if (hasUpgrade('coin', 21)) mult = mult.times(upgradeEffect('coin', 21))
        if (hasUpgrade('coin', 22)) mult = mult.times(20)
        if (hasUpgrade('coin', 23)) mult = mult.times(100)
        if (hasUpgrade('coin', 24)) mult = mult.times(2024)
        if (hasUpgrade('coin', 25)) mult = mult.times(9402011)
        if (player.coin.pink_key_coin.gte(1)) mult = mult.times(tmp.coin.pinkKeyCoinEffect)
        if (hasUpgrade('coin', 33)) mult = mult.times(100)
        if (hasUpgrade('invincible_star', 34)) mult = mult.times(1e100)
        if (hasMilestone('coin', 3)) mult = mult.times(1e50)
        if (hasUpgrade('yoshi_egg', 23) && !inChallenge('super_hammer', 11)) mult = mult.times(tmp.yoshi_egg.yoshiEff.green2)
        return mult
    },
    gainExp() { // Calculate the exponent on main currency from bonuses
        exp = new Decimal(1)
        if (inChallenge('invincible_star', 11)) exp = exp.times(0.1)
        if (hasChallenge('invincible_star', 12)) exp = exp.times(1.1)
        if (hasUpgrade('super_bell', 13) && player.points.lte("e1e11")) exp = exp.times(2)
        if (hasUpgrade('propeller_mushroom', 31)) exp = exp.times(3)
        return exp
    },
    softcap() {
        let Csoftcap = new Decimal("e1.8e12")
        if (hasUpgrade('super_hammer', 14)) Csoftcap = new Decimal("e30000000000003")
        return new Decimal(Csoftcap)
    },
    softcapPower() {
        let power = new Decimal(0.2)
        if (player.coin.points.gte(player.points)) power = new Decimal(0)
        return power
    },
    row: 0, // Row the layer is in on the tree (0 is the first row)
    hotkeys: [
        { key: "c", description: "C: Reset for Coins", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],
    layerShown() { return true },
    passiveGeneration() { return hasMilestone('super_mushroom', 0) || hasAchievement('achievements', 34) },
    update(diff) {
        let multPKC = new Decimal(1)
        if (hasUpgrade("coin", 31)) multPKC = multPKC.times(buyableEffect('coin', 11))
        if (hasUpgrade("coin", 31)) multPKC = multPKC.times(buyableEffect('coin', 12))
        if (hasUpgrade('coin', 33)) multPKC = multPKC.times(100)
        if (hasUpgrade('invincible_star', 24)) multPKC = multPKC.times(1e100)
        if (hasUpgrade('fire_flower', 22)) multPKC = multPKC.times(buyableEffect('coin', 13))
        if (hasUpgrade('oneup_mushroom', 25)) multPKC = multPKC.times(1e30)
        if (hasChallenge('oneup_mushroom', 11)) multPKC = multPKC.times(challengeEffect('oneup_mushroom', 11).max(1))
        if (inChallenge('invincible_star', 12)) multPKC = multPKC.times(0)
        if (hasUpgrade("coin", 31)) player.coin.pink_key_coin = player.coin.pink_key_coin.add(multPKC.times(diff))

        let start = d('e9e45')
        if (hasMilestone('boomerang_flower', 8)) start = d('e3e63')
        if (hasMilestone('toad', 5)) start = d('ee800')
        if (hasUpgrade('super_acorn', 101)) player.coin.points = player.coin.points.add(start)
    },
    autoUpgrade() { return hasUpgrade('fire_flower', 12) || hasAchievement('achievements', 31) },
    pinkKeyCoinEffect() {
        let eff = Decimal.pow(player.coin.pink_key_coin.max(0), 1.5).add(1)
        return eff
        /*
          you should use this.layer instead of <layerID>
          Decimal.pow(num1, num2) is an easier way to do
          num1.pow(num2)
        */
    },
    doReset(resettingLayer) {
        if (layers[resettingLayer].row > layers[this.layer].row) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('super_mushroom', 0)) {
                kept.push("milestones")
            }
            if (hasMilestone('master_sword', 8)) {
                kept.push("upgrades")
            }
            if (hasAchievement('achievements', 161)) {
                kept.push("pink_key_coin")
            }
            layerDataReset(this.layer, kept)
        }
    },
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    upgrades: {
        11: {
            title: "It begins!",
            description: "Triple your cleared courses gain.",
            cost: new Decimal(1),
        },
        12: {
            title: "Here are more coins!",
            description: "Multiply cleared courses gain based on your current coins.",
            cost: new Decimal(5),
            unlocked() { return hasUpgrade('coin', 11) },
            effect() {
                let exp = new Decimal(1)
                if (player.toad.tier.gte(238)) exp = exp.times(5)
                let eff = player[this.layer].points.add(1).pow(0.5)
                if (eff.gte(tmp.super_hammer.cu2sc) && hasMilestone('toadette', 4) == false)
                    eff = player[this.layer].points.add(1).pow(0.1).times(tmp.super_hammer.cu2sc)
                if (hasMilestone('toadette', 4)) eff = player[this.layer].points.add(1).pow(0.3).times(tmp.super_hammer.cu2sc.pow(0.4)).pow(exp)
                return eff

            },
            effectDisplay() {
                if (this.effect().gte(tmp.super_hammer.cu2sc))
                    return format(upgradeEffect(this.layer, this.id)) + "x (softcapped)"
                else return format(upgradeEffect(this.layer, this.id)) + "x"
            }, // Add formatting to the effect
        },
        13: {
            title: "Coin reward room",
            description: "Multiply cleared courses gain based on theirselves.",
            cost: new Decimal(20),
            unlocked() { return hasUpgrade('coin', 12) },
            effect() {
                return player.points.add(1).pow(0.2).times(1.5)
            },
            effectDisplay() {
                return format(upgradeEffect(this.layer, this.id)) + "x"
            },
        },
        14: {
            title: "You need a power-up!",
            description: "Double your cleared courses gain and unlock a new layer",
            cost: new Decimal(125),
            unlocked() { return hasUpgrade('coin', 13) },
        },
        15: {
            title: "Faster and faster",
            description: "Multiply cleared courses gain based on theirselves.",
            cost: new Decimal(2024),
            unlocked() { return hasUpgrade('super_mushroom', 12) },
            effect() {
                return player.points.max(0).add(10).log(10)
            },
            effectDisplay() {
                return format(upgradeEffect(this.layer, this.id)) + "x"
            },
        },
        21: {
            title: "From coins to 1-ups",
            description: "Multiply coin gain based on super mushrooms.",
            cost: new Decimal(501761),
            unlocked() { return hasUpgrade('coin', 15) },
            effect() {
                return player.super_mushroom.points.add(3).log(3)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        22: {
            title: "Coin pool",
            description: "20x coin gain",
            cost: new Decimal(1e19),
            unlocked() { return hasUpgrade('coin', 21) },
        },
        23: {
            title: "Lakitu throws coins",
            description: "100x coin gain",
            cost: new Decimal(1.5267e26),
            unlocked() { return hasUpgrade('coin', 22) },
        },
        24: {
            title: "Bullet launches coins",
            description: "2024x coin gain",
            cost: new Decimal(5e30),
            unlocked() { return hasUpgrade('coin', 23) },
        },
        25: {
            title: "Red pipe generates coins",
            description: "9,402,011x coin gain and unlock 5th super mushroom upgrade",
            cost: new Decimal(7.777e37),
            unlocked() { return hasUpgrade('coin', 24) },
        },
        31: {
            title: "Key door",
            description: "Start to generate 1 pink key coin every second.",
            cost: new Decimal(1.234e77),
            unlocked() { return hasUpgrade('fire_flower', 13) },
        },
        32: {
            title: "Key door trolls are bad",
            description: "Unlock the 2nd coin buyable.",
            cost: new Decimal(1.111e100),
            unlocked() { return hasUpgrade('coin', 31) },
        },
        33: {
            title: "P switches affect coins",
            description: "100x Coin and Pink Key Coin gain",
            cost: new Decimal(1.111e150),
            unlocked() { return hasUpgrade('coin', 32) },
        },
        34: {
            title: "More coins and more fire?",
            description: "Gain more Fire Flower based on coins with a weak effect.",
            cost: new Decimal("3.33e333"),
            unlocked() { return hasUpgrade('coin', 33) },
            effect() {
                return player.coin.points.max(1).log(10).div(10).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        35: {
            title: "Automate mushrooms",
            description: "Passive gain 100% Super Mushroom every second and unlock more Fire Flower upgrades.",
            cost: new Decimal("1.2e345"),
            unlocked() { return hasUpgrade('coin', 34) },
        },
    },
    buyables: {
        11: {
            title: "Fragments of the key",
            cost(x) { return new Decimal(2).pow(Decimal.pow(x, 1.5).add(1)) },
            display() {
                return ` Multiply Pink Key Coin gain by 5x every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Pink Key Coins`
            },
            canAfford() { return player[this.layer].pink_key_coin.gte(this.cost()) },
            buy() {
                player[this.layer].pink_key_coin = player[this.layer].pink_key_coin.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) { return new Decimal(5).pow(x) },
            unlocked() { return hasUpgrade('fire_flower', 13) },
            style() {
                if (this.canAfford()) return {
                    'background-color': '#ff746f'
                }
            },
        },
        12: {
            title: "No key touching challenge in SM3DW",
            cost(x) { return new Decimal(5).pow(Decimal.pow(x, 1.75).add(1)) },
            display() {
                return ` Multiply Pink Key Coin gain by 10x every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Pink Key Coins`
            },
            canAfford() { return player[this.layer].pink_key_coin.gte(this.cost()) },
            buy() {
                player[this.layer].pink_key_coin = player[this.layer].pink_key_coin.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))

            },
            effect(x) { return new Decimal(10).pow(x) },
            unlocked() { return hasUpgrade('coin', 32) },
            style() {
                if (this.canAfford()) return {
                    'background-color': '#ff746f'
                }
            },
        },
        13: {
            title: "Keys are in bubbles",
            cost(x) { return new Decimal(8).pow(Decimal.pow(x, 2).add(1)) },
            display() {
                return ` Multiply Pink Key Coin gain by ${f(2019)}x every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Pink Key Coins`
            },
            canAfford() { return player[this.layer].pink_key_coin.gte(this.cost()) },
            buy() {
                player[this.layer].pink_key_coin = player[this.layer].pink_key_coin.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))

            },
            effect(x) { return new Decimal(2019).pow(x) },
            unlocked() { return hasUpgrade('fire_flower', 22) },
            style() {
                if (this.canAfford()) return {
                    'background-color': '#ff746f'
                }
            },
        },
    },
    automate() {
        if (player.coin.pink_key_coin.lte(0)) return
        if (hasMilestone('fire_flower', 0)) {
            if (player.coin.pink_key_coin) {
                hasMilestone("fire_flower", 0) ? setBuyableAmount("coin", 11, tmp.coin.buyables[11].canAfford ? player.coin.pink_key_coin.max(2).log(2).subtract(1).pow(1 / 1.5).floor().add(1) : getBuyableAmount("coin", 11)) : buyBuyable("coin", 11)
            }
            if (player.coin.pink_key_coin) {
                hasMilestone("fire_flower", 0) ? setBuyableAmount("coin", 12, tmp.coin.buyables[12].canAfford ? player.coin.pink_key_coin.max(5).log(5).subtract(1).pow(1 / 1.75).floor().add(1) : getBuyableAmount("coin", 12)) : buyBuyable("coin", 12)
            }
            if (hasMilestone("invincible_star", 0)) {
                hasMilestone("invincible_star", 0) ? setBuyableAmount("coin", 13, tmp.coin.buyables[13].canAfford ? player.coin.pink_key_coin.max(8).log(8).subtract(1).pow(1 / 2).floor().add(1) : getBuyableAmount("coin", 13)) : buyBuyable("coin", 13)
            }
        }
        if (hasAchievement('achievements', 33)) {
            if (player.coin.pink_key_coin) {
                hasAchievement('achievements', 33) ? setBuyableAmount("coin", 11, tmp.coin.buyables[11].canAfford ? player.coin.pink_key_coin.max(2).log(2).subtract(1).pow(1 / 1.5).floor().add(1) : getBuyableAmount("coin", 11)) : buyBuyable("coin", 11)
            }
            if (player.coin.pink_key_coin) {
                hasAchievement('achievements', 33) ? setBuyableAmount("coin", 12, tmp.coin.buyables[12].canAfford ? player.coin.pink_key_coin.max(5).log(5).subtract(1).pow(1 / 1.75).floor().add(1) : getBuyableAmount("coin", 12)) : buyBuyable("coin", 12)
            }
            if (player.coin.pink_key_coin) {
                hasAchievement('achievements', 33) ? setBuyableAmount("coin", 13, tmp.coin.buyables[13].canAfford ? player.coin.pink_key_coin.max(8).log(8).subtract(1).pow(1 / 2).floor().add(1) : getBuyableAmount("coin", 13)) : buyBuyable("coin", 13)
            }
        }
    },
    milestones: {
        0: {
            requirementDescription() {
                des = `Reach ${f(6871)} cleared courses`
                return des
            },
            effectDescription() {
                des = "Multiply coins gain by 2.5x."
                if (milestoneOverpowered('coin', 0)) des = des + "<br> Overpowered effect: Delay 2nd Coin upgrade's softcap by ^25."
                return des
            },
            overpowered() { return hasUpgrade('power_balloon', 45) },
            done() { return player.points.gte(6871) },
        },
        1: {
            requirementDescription() {
                let des = `Reach ${f(74751)} coins`
                return des
            },
            effectDescription() {
                let des = "Triple coin gain."
                let start = f('e9e45')
                if (hasMilestone('boomerang_flower', 8)) start = f('e3e63')
                if (hasMilestone('toad', 5)) start = f('ee800')
                if (milestoneOverpowered('coin', 1)) des = des + "<br> Overpowered effect: You start every reset with " + start + " Coins."
                return des
            },
            overpowered() { return hasUpgrade('super_acorn', 101) },
            done() { return player.coin.points.gte(74751) },
        },
        2: {
            requirementDescription: "Reach 50,000,000 coins",
            effectDescription: "Unlock a super mushroom challenge.",
            done() { return player.coin.points.gte(50000000) },
        },
        3: {
            requirementDescription() { return "Reach " + format(new Decimal(1e175)) + " coins" },
            effectDescription() { return `Cleared courses gain is multiplied by ${f(1e50)}x.` },
            done() { return player.coin.points.gte(1e175) },
        },
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + format(player.points) + ` Cleared Courses`],
        ["display-text", () => `Your best amount of coin is ` + formatWhole(player.coin.best)],
        ["display-text", function () { if (player.coin.points.gte('ee10')) return `Softcap starts at ${f(tmp.coin.softcap)} Coins` }],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Coin is the basic resource in 2D Mario game. <br> It never has been changed!`],
                    "blank",
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]

            },
            "Pink Key Coins": {
                unlocked() { return (hasUpgrade("fire_flower", 13)) },
                content: [
                    ["blank", "15px"],
                    ["display-text", () => "You have <h2 style='color: #ff746f; text-shadow: 0 0 10px #ff746f'>" + format(player.coin.pink_key_coin) + "</h2> Pink Key Coins, multiplying Coin gain by <h2 style='color: #ff746f; text-shadow: 0 0 10px #ff746f'> <br>" + format(player.coin.pink_key_coin.max(1).pow(1.5)) + "x</h2>.<br>"],
                    ["display-text", function () { if (!hasUpgrade('coin', 31)) return 'You need to buy 11th coin upgrade to gain Pink Key Coin!' }],
                    "buyables"
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #ff746f, #c93e27)',
                        'border-color': '#ff746f',
                        'color': 'black',
                    }
                },
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones"
                ]
            },
        },
    },
})
// 第二层：超级蘑菇
addLayer("super_mushroom", {
    name: "super_mushroom", // This is optional, only used in a few places, If absent it just uses the layer id.
    symbol: "SM", // This appears on the layer's node. Default is the id with the first letter capitalized
    position: 0, // Horizontal position within a row. By default it uses the layer id and sorts in alphabetical order
    startData() {
        return {
            unlocked: true,
            points: new Decimal(0),
        }
    },
    color: "#C42533",
    requires: new Decimal(500), // Can be a function that takes requirement increases into account
    resource: "Super Mushrooms", // Name of prestige currency
    baseResource: "coins", // Name of resource prestige is based on
    baseAmount() { return player.coin.points }, // Get the current amount of baseResource
    type: "normal", // normal: cost to gain currency depends on amount gained. static: cost depends on how much you already have
    exponent: 1 / 3, // Prestige currency exponent
    gainMult() { // Calculate the multiplier for main currency from bonuses
        mult = new Decimal(1)
        if (hasUpgrade('super_mushroom', 12)) mult = mult.times(1.5)
        mult = mult.times(challengeEffect('super_mushroom', '11'))
        if (hasMilestone('invincible_star', 1)) mult = mult.times(6879)
        if (hasAchievement('achievements', 43)) mult = mult.times(player.bouncy_ball_flower.bouncy_ball.max(1).pow(2.35))
        return mult
    },
    gainExp() { // Calculate the exponent on main currency from bonuses
        exp = new Decimal(1)
        if (hasUpgrade('fire_flower', 24)) exp = exp.times(1.1)
        if (inChallenge('oneup_mushroom', 11)) exp = exp.times(0.01)
        return exp
    },
    row: 1, // Row the layer is in on the tree (0 is the first row)
    hotkeys: [
        { key: "m", description: "M: Reset for Super Mushrooms", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],
    branches: ["coin"],
    resetsNothing() { return hasMilestone('super_mushroom', 1) || hasAchievement('achievements', 32) },
    layerShown() { return hasUpgrade('coin', 14) || hasAchievement('achievements', 11) },
    passiveGeneration() { return hasUpgrade('coin', 35) || hasAchievement('achievements', 34) },
    autoUpgrade() { return hasMilestone('invincible_star', 3) || hasAchievement('achievements', 61) },
    doReset(resettingLayer) {
        if (layers[resettingLayer].row >= 12) return undefined
        else
            if (layers[resettingLayer].row > layers[this.layer].row) {
                let kept = ["unlocked", "auto"]
                if (hasMilestone('invincible_star', 2)) {
                    kept.push("milestones")
                }
                if (hasMilestone('master_sword', 9)) {
                    kept.push("upgrades")
                }

                layerDataReset(this.layer, kept)
            }
    },
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    upgrades: {
        11: {
            title: "I'm stronger!",
            description: "Multiply cleared courses gain based on super mushrooms.",
            cost: new Decimal(1),
            effect() {
                return player.super_mushroom.points.add(2).pow(1.25).times(2)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        12: {
            title: "Be able to break normal bricks",
            description: "1.5x super mushroom gain and unlock more coin upgrades.",
            cost: new Decimal(3),
            unlocked() { return hasUpgrade('super_mushroom', 11) },
        },
        13: {
            title: "Jump on the enemies!",
            description: "Multiply cleared courses gain based on time spent on this super mushroom reset.",
            cost: new Decimal(1528),
            effect() {
                let SMU13factor = player.super_mushroom.resetTime + 1
                return Decimal.pow(SMU13factor, 1.5)
            },
            unlocked() { return hasUpgrade('super_mushroom', 12) },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        14: {
            title: "Life farming",
            description: "Challenge Goomba's base is 15 now.",
            cost: new Decimal(3e10),
            unlocked() { return hasUpgrade('super_mushroom', 13) },
        },
        15: {
            title: "You need a stronger power-up, right?",
            description: "Unlock a new layer",
            cost: new Decimal(5e20),
            unlocked() { return hasUpgrade('coin', 25) || hasUpgrade(this.layer, this.id) },
        }
    },
    milestones: {
        0: {
            requirementDescription() {
                let dis = "Reach 125138 super mushrooms"
                return dis
            },
            effectDescription() {
                let dis = "Gain coins 100% of your reset every second passively. Keep Coin milestones on row 2 reset"
                if (this.overpowered()) dis = dis + "<br>Overpowered effect: Boost Boomerang gain based on Super Mushroom.<br>Currently: " + format(upgradeEffect('super_acorn', 102)) + "x"
                return dis
            },
            done() { return player.super_mushroom.points.gte(125138) },
            overpowered() { return hasUpgrade('super_acorn', 102) }
        },
        1: {
            requirementDescription() { return `Reach ${f(1.5267e105)} super mushrooms` },
            effectDescription: "Super mushroom resets nothing.",
            done() { return player.super_mushroom.points.gte(1.5267e105) },
        },
    },
    buyables: {
        11: {
            title: "999-coin clear condition",
            cost(x) { return new Decimal(3e24).pow(Decimal.pow(x, 1.5).add(1)) },
            display() {
                return ` Multiply cleared courses gain by ${f(1e10)}x every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} super mushrooms`
            },
            canAfford() { return player[this.layer].points.gte(this.cost()) },
            buy() {
                player[this.layer].points = player[this.layer].points.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) { return new Decimal(1e10).pow(x) },
            unlocked() { return hasUpgrade('fire_flower', 11) }
        },
    },
    challenges: {
        11: {
            name: "Goombas",
            challengeDescription: "Square root cleared courses gain",
            goal() {
                let basicSMC1 = new Decimal(5000)
                let x = d(challengeCompletions("super_mushroom", 11)).add(1)
                let goal = basicSMC1.pow(x)
                return goal
            },
            goalDescription() {
                let des = `${f(challengeGoal(this.layer, this.id))} cleared courses`
                return des
            },
            completionLimit: new Decimal(3),
            canComplete: function () {
                return player.points.gte(challengeGoal(this.layer, this.id))
            },
            rewardDescription() {
                let des = `${f(this.rewardBase())}x super mushroom gain per every completion.`
                return des
            },
            rewardBase() {
                let b = d(10)
                if (hasUpgrade('super_mushroom', 14)) b = b.add(5)
                return b
            },
            rewardEffect() {
                let x = (challengeCompletions("super_mushroom", 11))
                let eff = this.rewardBase().pow(x)
                return eff
            },
            rewardDisplay() { return format(challengeEffect(this.layer, this.id)) + "x <br> Completions: " + formatWhole(challengeCompletions(this.layer, this.id)) + "/3" },
            unlocked() { return hasMilestone('coin', 2) || hasAchievement('achievements', 13) },
            style() {
                return {
                    'border-radius': '5%',
                }
            },
        },
    },
    automate() {
        if (player.super_mushroom.points.lte(0)) return
        if (hasMilestone('oneup_mushroom', 0)) {
            if (player.super_mushroom.points) {
                hasMilestone('oneup_mushroom', 0) ? setBuyableAmount("super_mushroom", 11, tmp.super_mushroom.buyables[11].canAfford ? player.super_mushroom.points.max(3e24).log(3e24).subtract(1).root(1.5).floor().add(1) : getBuyableAmount("super_mushroom", 11)) : buyBuyable("super_mushroom", 11)
            }
        }
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + formatWhole(player.coin.points) + ` coins`],
        ["display-text", () => `Your best amount of Super Mushroom is ` + formatWhole(player.super_mushroom.best)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Super Mushroom upgrades are stronger! <br>Super Mushroom is a kind of Power-ups, first appearance is in SMB1 (1985, FC/NES).`],
                    "blank",
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]

            },
            "Buyables": {
                unlocked() { return (hasUpgrade("fire_flower", 11)) },
                content: [
                    ["blank", "15px"],
                    "buyables"
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones"
                ]
            },
            "Challenges": {
                unlocked() { return hasMilestone('coin', 2) || hasAchievement('achievements', 13) },
                content: [
                    ["blank", "15px"],
                    "challenges"
                ]
            },
        },
    },
})
// 第三层：火之花
addLayer("fire_flower", {
    effect() {
        let eff = Decimal.pow(player[this.layer].points, 2).add(1)
        if (hasUpgrade('easy', 25)) eff = eff.pow(1000)
        return eff
        /*
          you should use this.layer instead of <layerID>
          Decimal.pow(num1, num2) is an easier way to do
          num1.pow(num2)
        */
    },
    effectDescription() {
        return `multiplying coin gain by ${textStyle_h2(format(tmp[this.layer].effect) + "x", 'ff8d00')}`
        /*
          use format(num) whenever displaying a number
        */
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
        }
    },
    name: "fire_flower",
    symbol: "FF",
    color: "#FF8D00",                       // The color for this layer, which affects many elements.
    resource: "Fire Flowers",            // The name of this layer's main prestige resource.
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 1,
    baseResource: "coins",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.coin.points },  // A function to return the current amount of baseResource.

    requires: new Decimal(1e55),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent() { return new Decimal(0.015) },                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let mult = new Decimal(1)
        if (hasUpgrade('coin', 34)) mult = mult.times(upgradeEffect('coin', 34))
        if (hasUpgrade('fire_flower', 14)) mult = mult.times(2.5)
        if (hasUpgrade('fire_flower', 15)) mult = mult.times(upgradeEffect('fire_flower', 15))
        if (hasUpgrade('fire_flower', 21)) mult = mult.times(upgradeEffect('fire_flower', 21))
        if (hasUpgrade('invincible_star', 11)) mult = mult.times(2)
        if (hasUpgrade('invincible_star', 12)) mult = mult.times(2)
        if (hasUpgrade('invincible_star', 21)) mult = mult.times(upgradeEffect('invincible_star', 21))
        if (hasChallenge('invincible_star', 11)) mult = mult.times(challengeEffect('invincible_star', 11))
        if (hasUpgrade('super_leaf', 221)) mult = mult.times(4.89e166)
        if (hasMilestone('yoshi_egg', 0) && !inChallenge('super_hammer', 11)) mult = mult.times(tmp.yoshi_egg.yoshiEff.red1)
        if (hasUpgrade('propeller_mushroom', 21)) mult = mult.times(upgradeEffect('propeller_mushroom', 21))
        return mult              // Factor in any bonuses multiplying gain here.
    },
    gainDiv() {
        let div = new Decimal(1)                         // Returns your multiplier to your gain of the prestige resource.
        return div              // Factor in any bonuses multiplying gain here.
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        let exp = new Decimal(1)
        if (hasUpgrade('invincible_star', 23)) exp = exp.times(1.5)
        if (hasUpgrade('oneup_mushroom', 24)) exp = exp.times(1.35)
        if (inChallenge('oneup_mushroom', 12)) exp = exp.times(0.05)
        return exp
    },
    softcap() {
        return new Decimal("e3e39")
    },
    softcapPower() {
        return new Decimal(1)
    },
    hotkeys: [
        { key: "f", description: "F: Reset for Fire Flowers", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],
    branches: ["coin"],
    layerShown() { return hasUpgrade('super_mushroom', 15) || hasAchievement('achievements', 15) },          // Returns a bool for if this layer's node should be visible in the tree.

    autoUpgrade() { return hasUpgrade('invincible_star', 32) || hasAchievement('achievements', 61) },

    passiveGeneration() { return hasUpgrade('bouncy_ball_flower', 12) || hasAchievement('achievements', 61) },

    doReset(resettingLayer) {
        if (layers[resettingLayer].row >= 12) return undefined
        else
            if (layers[resettingLayer].row > layers[this.layer].row) {
                let kept = ["unlocked", "auto"]
                if (hasMilestone('invincible_star', 3)) {
                    kept.push("milestones")
                }
                if (hasMilestone('master_sword', 10)) {
                    kept.push("upgrades")
                }

                layerDataReset(this.layer, kept)
            }
    },

    componentStyles: {
    },
    upgrades: {
        11: {
            title: "Press Y to fire attack",
            description: "Unlock a buyable in super mushroom layer.",
            cost: new Decimal(3),
        },
        12: {
            title: "Don't feel tired!",
            description: "Auto buy coin upgrades.",
            cost: new Decimal(10),
            unlocked() { return hasUpgrade('fire_flower', 11) }
        },
        13: {
            title: "A tier 2 power-up",
            description: "Unlock a coin buyable, a new resource and an upgrade in coin layer.",
            cost: new Decimal(50),
            unlocked() { return hasUpgrade('fire_flower', 12) }
        },
        14: {
            title: "Melt frozen coins",
            description: "2.5x Fire Flower gain",
            cost: new Decimal(2020202),
            unlocked() { return hasUpgrade('coin', 35) || hasUpgrade(this.layer, this.id) }
        },
        15: {
            title: "Spin jump with two fire shots",
            description: "Multiply Fire Flowers gain based on Pink Key Coins.",
            cost: new Decimal(20190628),
            unlocked() { return hasUpgrade('fire_flower', 14) },
            effect() {
                return player.coin.pink_key_coin.add(100).max(100).log(10).div(2)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        21: {
            title: "Get tier 1 first, then tier 2",
            description: "Multiply Fire Flowers gain based on Super Mushrooms.",
            cost: new Decimal(2.75e8),
            unlocked() { return hasUpgrade('fire_flower', 15) },
            effect() {
                return player.super_mushroom.points.max(1).log(10).div(10).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        22: {
            title: "Use fire to defeat goombas",
            description: "Unlock the third coin buyable.",
            cost: new Decimal(6.54e9),
            unlocked() { return hasUpgrade('fire_flower', 21) },
        },
        23: {
            title: "Mario's white hat",
            description: "^1.05 cleared courses gain",
            cost: new Decimal(3.14e13),
            unlocked() { return hasUpgrade('fire_flower', 22) },
        },
        24: {
            title: "Luigi also has a white hat",
            description: "^1.1 Super Mushroom gain",
            cost: new Decimal(4.19e14),
            unlocked() { return hasUpgrade('fire_flower', 23) },
        },
        25: {
            title: "Stronger!",
            description: "Unlock a new layer",
            cost: new Decimal(7.00e15),
            unlocked() { return hasUpgrade('fire_flower', 24) || hasUpgrade(this.layer, this.id) },
        },
        // Look in the upgrades docs to see what goes here!
    },
    milestones: {
        0: {
            requirementDescription() {
                let dis = `Get ${f(1920000)} Fire Flowers`
                return dis
            },
            effectDescription() {
                dis = "Autobuy coin buyables 1 and 2."
                if (hasUpgrade('super_acorn', 103)) dis = dis + "<br>Overpowered effect: 14th BF upgrade also affacts Boomerang."
                return dis
            },
            done() { return player.fire_flower.points.gte(1920000) },
            overpowered() { return hasUpgrade('super_acorn', 102) }
        },
        1: {
            requirementDescription() {
                let dis = `Get ${f(1e51)} Fire Flowers`
                return dis
            },
            effectDescription: "Unlock 10th Invincible Star upgrade.",
            done() { return player.fire_flower.points.gte(1e51) },
        },
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + formatWhole(player.coin.points) + ` coins`],
        ["display-text", () => `Your best amount of Fire Flower is ` + formatWhole(player.fire_flower.best)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Fire Flower is the first kind of tier 2 power-ups. <br> It can fire attack.`],
                    "blank",
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]

            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones"
                ]
            },
        },
    },
})
// 第四层：无敌星
addLayer("invincible_star", {
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            opmtime: new Decimal(0),
        }
    },
    symbol: "IS",
    color: "#FFB15A",                       // The color for this layer, which affects many elements.
    resource: "Invincible Stars",            // The name of this layer's main prestige resource.
    row: 2,                                 // The row this layer is on (0 is the first row).
    position: 0,
    baseResource: "Fire Flowers",                 // The name of the resource your prestige gain is based on.
    branches: ["fire_flower"],
    baseAmount() { return player.fire_flower.points },  // A function to return the current amount of baseResource.
    effect() {
        let ISfactor = ((player[this.layer].points).add(10)).log(10)
        if (hasUpgrade('cape_feather', 13)) ISfactor = ISfactor.times(10)
        if (hasUpgrade('cape_feather', 14)) ISfactor = ISfactor.times(10)
        return Decimal.pow(10, (ISfactor).times(player[this.layer].points)).max(1)
        /*
          you should use this.layer instead of <layerID>
          Decimal.pow(num1, num2) is an easier way to do
          num1.pow(num2)
        */
    },
    effectDescription() {
        return `multiplying Cleared Courses gain by ${textStyle_h2(format(tmp[this.layer].effect) + "x", 'ffb15a')}`
        /*
          use format(num) whenever displaying a number
        */
    },
    requires: new Decimal(1e16),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "static",                         // Determines the formula used for calculating prestige currency.
    exponent: 2.5,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        return mult
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },
    directMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        if (hasUpgrade('boomerang_flower', 32)) mult = mult.times(1e19)
        return mult
    },

    layerShown() { return hasUpgrade('fire_flower', 25) || hasAchievement('achievements', 25) },          // Returns a bool for if this layer's node should be visible in the tree.

    hotkeys: [
        { key: "i", description: "I: Reset for Invincible Stars", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    canBuyMax() { return hasMilestone("invincible_star", 2) || hasAchievement('achievements', 61) },

    resetsNothing() { return hasAchievement("achievements", 44) || hasAchievement('achievements', 61) },
    autoPrestige() { return hasAchievement("achievements", 44) || hasAchievement('achievements', 61) },
    autoUpgrade() { return hasAchievement('achievements', 63) || hasMilestone('super_leaf', 0) },
    doReset(resettingLayer) {
        if (layers[resettingLayer].row >= 12) return undefined
        else
            if (layers[resettingLayer].row > layers[this.layer].row) {
                let kept = ["unlocked", "auto"]
                if (hasAchievement('achievements', 63)) {
                    kept.push("challenges")
                }
                if (hasMilestone('super_leaf', 8) || hasMilestone('super_leaf', 5)) {
                    kept.push("milestones")
                }
                if (hasMilestone('master_sword', 11)) {
                    kept.push("upgrades")
                }
                kept.push("opmtime")

                layerDataReset(this.layer, kept)
            }
    },
    upgrades: {
        11: {
            title: "I'm invincible!",
            description: "1,666,390x Cleared Courses, 2x Fire Flowers gain.",
            cost: new Decimal(1),
            unlocked() { return tmp.invincible_star.layerShown },
        },
        12: {
            title: "10-second rush!!!",
            description: "12,413,170x Cleared Courses gain, 2x Fire Flowers gain again.",
            cost: new Decimal(1),
            unlocked() { return hasUpgrade('invincible_star', 11) },
        },
        13: {
            title: "Star provides a speed boost!",
            description: "Keep 2nd Fire Flower upgrade on reset. (Instant)",
            cost: new Decimal(2),
            unlocked() { return hasUpgrade('invincible_star', 12) },
        },
        14: {
            title: "What a dazzing star!",
            description: "Keep 2nd Super Mushroom milestone on reset. (Instant)",
            cost: new Decimal(2),
            unlocked() { return hasUpgrade('invincible_star', 13) },
        },
        15: {
            title: "Light the ghost house!",
            description: "Keep 1st Fire Flower milestone on reset. (Instant)",
            cost: new Decimal(2),
            unlocked() { return hasUpgrade('invincible_star', 14) },
        },
        21: {
            title: "Running on the spikes",
            description: "Multiply Fire Flowers gain based on best Invincible Stars.",
            cost: new Decimal(2),
            unlocked() { return hasUpgrade('invincible_star', 15) },
            effect() {
                let ISBest = player.invincible_star.best
                return Decimal.ln(ISBest.add(2.71828)).times(100).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        22: {
            title: "Run into fire",
            description: "Keep 15th Coin upgrade and 1st Super Mushroom milestone on reset.",
            cost: new Decimal(3),
            unlocked() { return hasUpgrade('invincible_star', 21) },
        },
        23: {
            title: "Hidden invincible star for a dev exit",
            description: "^1.5 Fire Flower gain.",
            cost: new Decimal(3),
            unlocked() { return hasUpgrade('invincible_star', 22) },
        },
        24: {
            title: "5 pink key coins are in a gear",
            description() { return `${f(1e100)}x Pink Key Coin gain` },
            cost: new Decimal(5),
            unlocked() { return hasUpgrade('invincible_star', 23) },
        },
        25: {
            title: "What happened when you defeat 8 ememies in a star?",
            description: "Unlock a new layer.",
            cost: new Decimal(7),
            unlocked() { return hasMilestone('fire_flower', 1) || hasUpgrade(this.layer, this.id) },
        },
        31: {
            title: "Be faster when you have a star!",
            description() { return `Remove the 1st hardcap in 1UP Mushroom upgrade 4. (2nd hardcap is ${f(4000)}x)` },
            cost: new Decimal(10),
            unlocked() { return hasUpgrade('invincible_star', 25) },
        },
        32: {
            title: "Share the star in co-op!",
            description: "Autobuy Fire Flower upgrades.",
            cost: new Decimal(12),
            unlocked() { return hasUpgrade('invincible_star', 31) },
        },
        33: {
            title: "Fire and Invincible",
            description: "Square 1st Invincible Star Challenge's effect.(Doesn't affact the hardcap)",
            cost: new Decimal(12),
            unlocked() { return hasUpgrade('invincible_star', 32) },
        },
        34: {
            title: "Coins among the spikes",
            description() { return `${f(1e100)}x Coin gain.` },
            cost: new Decimal(13),
            unlocked() { return hasUpgrade('invincible_star', 33) },
        },
        35: {
            title: "And... What's next?",
            description: "Unlock a new layer.",
            cost: new Decimal(15),
            unlocked() { return hasUpgrade('invincible_star', 34) || hasUpgrade(this.layer, this.id) },
        },
    },
    // Look in the upgrades docs to see what goes here!
    milestones: {
        0: {
            requirementDescription: "Get 1 Invincible Star",
            effectDescription: "Autobuy 3rd coin buyable. Keep 1st Super Mushroom milestone on row 3 reset",
            done() { return player.invincible_star.points.gte(1) },
        },
        1: {
            requirementDescription() {
                dis = "Get 2 Invincible Stars"
                if (hasUpgrade('super_acorn', 111)) dis = dis + " (Overpowered)"
                return dis
            },
            effectDescription() {
                dis = "6879x Super Mushroom gain."
                if (hasUpgrade('super_acorn', 111)) dis = dis + "<br>Overpowered effect: Root Mario gain cost based on IS and time since you overpowered this milestone. (hardcap at 1h) <br>Time: " + formatTime(player[this.layer].opmtime) + " Currently: " + format(upgradeEffect('super_acorn', 111)) + "√"
                return dis
            },
            done() { return player.invincible_star.points.gte(2) },
            style() { if (hasUpgrade('super_acorn', 111)) return { 'background-color': '#ffad00' } }
        },
        2: {
            requirementDescription: "Get 4 Invincible Stars",
            effectDescription: "You can buy max Invincible Stars. Keep Super Mushroom milestones on row 3 resets.",
            done() { return player.invincible_star.points.gte(4) },
        },
        3: {
            requirementDescription() {
                let dis = "Get 9 Invincible Stars"
                if (milestoneOverpowered(this.layer, 3)) dis = dis + " (Overpowered)"
                return dis
            },
            effectDescription() {
                let d = "Autobuy Super Mushroom upgrades and unlock 6th 1UP Mushroom upgrade. Keep Fire Flower milestones on row 3 resets."
                if (milestoneOverpowered(this.layer, 3)) d = d + "<br>Overpowered effect: Invincible Star boosts CC in Expert Boss challenges.(After exp. cal.) <br>Currently: " + format(upgradeEffect('super_acorn', 112)) + "x"
                return d
            },
            overpowered() { return hasUpgrade('super_acorn', 112) },
            done() { return player.invincible_star.points.gte(9) },
            style() { if (milestoneOverpowered(this.layer, 3)) return { 'background-color': '#ffad00' } },
        },
        4: {
            requirementDescription: "Get 21 Invincible Stars",
            effectDescription() { return `${f(1e20)}x Bouncy Ball gain.` },
            done() { return player.invincible_star.points.gte(20.99999) },
        },
    },
    challenges: {
        11: {
            name: "Koopa troopas",
            challengeDescription: "^0.1 Coin gain",
            goalDescription() { return `Get ${f(5.55e55)} Cleared Courses` },
            canComplete: function () {
                return player.points.gte(5.55e55)
            },
            rewardDescription() {
                let hc = `(Hardcap at ${f(1e100)}x)`
                if (hasUpgrade('yoshi_egg', 22)) hc = ''
                let des = `Multiply Fire Flower gain based on 1UP Mushroom. ${hc}`
                return des
            },
            rewardEffect() {
                let IS1Chardcap = new Decimal(1e100)
                if (hasUpgrade('yoshi_egg', 32)) IS1Chardcap = new Decimal("10^^1.79e308")
                let IS1Cfactor = player.oneup_mushroom.points.pow(2).max(1)
                if (hasUpgrade('invincible_star', 33)) IS1Cfactor = IS1Cfactor.pow(2).min(IS1Chardcap)
                else IS1Cfactor = IS1Cfactor.min(IS1Chardcap)
                return IS1Cfactor
            },
            rewardDisplay() { return format(challengeEffect(this.layer, this.id)) + "x" },
            unlocked() { return hasUpgrade('oneup_mushroom', 15) },
            autoComplete() { if (hasAchievement('achievements', 63)) player[this.layer].challenges[this.id] = 1 },
        },
        12: {
            name: "Spikeys",
            challengeDescription: "You can't gain Pink Key Coins. Enter this challenge will reset your Pink Key Coin",
            goalDescription() { return `Get ${f('1e730')} Cleared Courses` },
            canComplete: function () {
                return player.points.gte("1e730")
            },
            onEnter() { return player.coin.pink_key_coin = new Decimal(0) },
            rewardDescription: "^1.1 Super Mushroom gain",
            unlocked() { return hasChallenge('invincible_star', 11) || hasAchievement('achievements', 63) },
            autoComplete() { if (hasAchievement('achievements', 63)) player[this.layer].challenges[this.id] = 1 },
        },
    },
    update(diff) {
        tick = new Decimal(0.05)
        if (hasUpgrade('super_acorn', 111) && player[this.layer].opmtime.lt(3600)) player[this.layer].opmtime = player[this.layer].opmtime.add(diff)

        if (hasMilestone('invincible_star', 0)) {
            if (!hasMilestone('super_mushroom', 0)) player.super_mushroom.milestones.push(0)
        }
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + formatWhole(player.fire_flower.points) + ` Fire Flowers`],
        ["display-text", () => `Your best amount of Invincible Star is ` + formatWhole(player.invincible_star.best)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Most invincible stars are for hidden reward in 2D Mario games. <br> But in SMM series, most of them are for dev exits.`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]

            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones"
                ]
            },
            "Challenges": {
                unlocked() { return hasUpgrade('oneup_mushroom', 15) || hasAchievement('achievements', 63) },
                content: [
                    ["blank", "15px"],
                    "challenges"
                ],
            },
        },
    },
})
// 第五层：1UP蘑菇
addLayer("oneup_mushroom", {
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            sacrifice: new Decimal(0),
            rotten_mushroom: new Decimal(0),
        }
    },

    color: "#5BBF2F",                       // The color for this layer, which affects many elements.
    resource: "1UP Mushrooms",              // The name of this layer's main prestige resource.
    symbol: "1UP",
    row: 2,
    position: 1,                               // The row this layer is on (0 is the first row).
    branches: ["fire_flower"],

    baseResource: "Fire Flowers",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.fire_flower.points },  // A function to return the current amount of baseResource.

    requires: new Decimal(3e51),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 1e-5,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)
        if (hasUpgrade("oneup_mushroom", 11)) mult = mult.times(2)              // Factor in any bonuses multiplying gain here.
        if (hasUpgrade("oneup_mushroom", 12)) mult = mult.times(upgradeEffect('oneup_mushroom', 12))
        if (hasUpgrade("oneup_mushroom", 13)) mult = mult.times(2)
        if (hasUpgrade("oneup_mushroom", 14)) mult = mult.times(upgradeEffect('oneup_mushroom', 14))
        if (hasUpgrade("oneup_mushroom", 21)) mult = mult.times(upgradeEffect('oneup_mushroom', 21))
        if (hasUpgrade("oneup_mushroom", 23)) mult = mult.times(upgradeEffect('oneup_mushroom', 23))
        if (hasUpgrade("bouncy_ball_flower", 34)) mult = mult.times(510541)
        if (hasUpgrade('big_mushroom', 22)) mult = mult.times(upgradeEffect('big_mushroom', 22))
        if (hasUpgrade('super_leaf', 23)) mult = mult.times(upgradeEffect('super_leaf', 23))
        if (hasUpgrade('oneup_mushroom', 32)) mult = mult.times(100)
        if (hasUpgrade('oneup_mushroom', 33)) mult = mult.times(100)
        if (hasUpgrade('oneup_mushroom', 34)) mult = mult.times(100)
        if (hasMilestone('super_leaf', 4)) mult = mult.times(10)
        return mult
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        exp = new Decimal(1)
        if (hasUpgrade("super_leaf", 222)) exp = exp.times(1.5)
        return exp
    },

    layerShown() { return hasUpgrade('invincible_star', 25) || hasAchievement('achievements', 35) },          // Returns a bool for if this layer's node should be visible in the tree.

    autoUpgrade() { return hasMilestone('super_leaf', 6) || hasAchievement('achievements', 83) },
    passiveGeneration() { return hasMilestone('super_leaf', 5) || hasAchievement('achievements', 64) },
    doReset(resettingLayer) {
        if (layers[resettingLayer].row >= 12) return undefined
        else
            if (layers[resettingLayer].row > layers[this.layer].row) {
                let kept = ["unlocked", "auto"]
                if (hasAchievement('achievements', 63)) {
                    kept.push("challenges")
                }
                if (hasMilestone('super_leaf', 8)) {
                    kept.push("milestones")
                }
                if (hasMilestone('master_sword', 13)) {
                    kept.push("upgrades")
                }

                layerDataReset(this.layer, kept)
            }
    },
    hotkeys: [
        { key: "1", description: "1: Reset for 1UP Mushrooms", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],
    update(diff) {
        let multRM = new Decimal(1)
        if (hasUpgrade('usa_mushroom', 35)) multRM = multRM.times(player.oneup_mushroom.sacrifice.max(1).log(10).max(1).log(10).max(0))
        if (hasMilestone('oneup_mushroom', 1)) multRM = multRM.times(10)
        if (hasUpgrade('frog_suit', 24)) multRM = multRM.pow(upgradeEffect('frog_suit', 24))
        if (hasUpgrade('usa_mushroom', 35)) player.oneup_mushroom.rotten_mushroom = player.oneup_mushroom.rotten_mushroom.add(multRM.times(diff))
        if (hasMilestone('super_acorn', 1) && hasUpgrade('usa_mushroom', 35)) player.oneup_mushroom.sacrifice = player.oneup_mushroom.sacrifice.add(player.oneup_mushroom.points.times(diff))
    },
    upgrades: {
        11: {
            title: "Nice design in the end of a course",
            description: "Double 1UP Mushroom gain.",
            cost: new Decimal(2),
            unlocked() { return tmp.oneup_mushroom.layerShown },
        },
        12: {
            title: "Softlocks with 1UP mushrooms",
            description: "Multiply 1UP Mushrooms gain based on Invincible Stars.",
            cost: new Decimal(6),
            unlocked() { return hasUpgrade('oneup_mushroom', 11) },
            effect() {
                let oneUPU2factor = player.invincible_star.points.add(1)
                if (hasUpgrade('oneup_mushroom', 22)) oneUPU2factor = oneUPU2factor.pow(2)
                return oneUPU2factor
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        13: {
            title: "Don't be greedy!",
            description: "Double 1UP Mushroom gain, again.",
            cost: new Decimal(45),
            unlocked() { return hasUpgrade('oneup_mushroom', 12) },
        },
        14: {
            title: "Use shell to farm lives",
            description() {
                let hc = d(20)
                if (hasUpgrade('invincible_star', 31)) hc = d(4000)
                return `Multiply 1UP Mushroom based on itself. (Hardcap at ${f(hc)}x)`
            },
            cost: new Decimal(64),
            unlocked() { return hasUpgrade('oneup_mushroom', 13) },
            effect() {
                let oneUPU4factor = Decimal.cbrt(player.oneup_mushroom.points.add(1))
                if (hasUpgrade('invincible_star', 31)) oneUPU4factor = oneUPU4factor.min(4000)
                else oneUPU4factor = oneUPU4factor.min(20)
                return oneUPU4factor
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        15: {
            title: "Life farming master",
            description: "Unlock two Invincible Star challenges.",
            cost: new Decimal(512),
            unlocked() { return hasUpgrade('oneup_mushroom', 14) },
        },
        21: {
            title: "In hidden blocks",
            description: "Multiply 1UP Mushroom gain besed on Fire Flowers.",
            cost: new Decimal(1888),
            unlocked() { return hasMilestone('invincible_star', 3) },
            effect() {
                return player.fire_flower.points.add(10).log(10).pow(1.25).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        22: {
            title: "Reward for beating the extra challenge",
            description: "Square 2nd 1UP Mushroom upgrade's effect.",
            cost: new Decimal(1234567),
            unlocked() { return hasUpgrade('oneup_mushroom', 21) },
        },
        23: {
            title: "Reward in minigames",
            description: "Multiply 1UP Mushroom based on Super Mushroom.",
            cost: new Decimal(1.985e8),
            unlocked() { return hasUpgrade('oneup_mushroom', 22) },
            effect() {
                return player.super_mushroom.points.add(10).log(10).sqrt()
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        24: {
            title: "999-1UP Mushroom condition",
            description: "^1.35 Fire Flower gain.",
            cost: new Decimal(5e10),
            unlocked() { return hasUpgrade('oneup_mushroom', 23) },
        },
        25: {
            title: "Better rewards",
            description() { return `${f(1e30)}x Pink Key Coin gain.` },
            cost: new Decimal(2.019e11),
            unlocked() { return hasUpgrade('oneup_mushroom', 24) },
        },
        31: {
            title: "Auto defeating Goombas",
            description: "Auto complete challenge Goomba",
            cost: new Decimal(1e19),
            unlocked() { return hasUpgrade('oneup_mushroom', 25) },
            effect() {
                if (hasUpgrade('oneup_mushroom', 31) || hasAchievement('achievements', 53))
                    return player.super_mushroom.challenges[11] = new Decimal(3)
            },
        },
        32: {
            title: "A nice sound effect",
            description: "100x 1UP Mushroom gain",
            cost: new Decimal(1.82e30),
            unlocked() { return hasUpgrade('big_mushroom', 35) },
        },
        33: {
            title: "A nicer sound effect",
            description: "100x 1UP Mushroom gain, again",
            cost: new Decimal(2.82e32),
            unlocked() { return hasUpgrade('oneup_mushroom', 32) },
        },
        34: {
            title: "Important life farming",
            description: "100x 1UP Mushroom gain, again^2.",
            cost: new Decimal(3.82e34),
            unlocked() { return hasUpgrade('oneup_mushroom', 33) },
        },
        35: {
            title: "Go to a new style",
            description: "Unlock a new layer at the row 4.",
            cost: new Decimal(4.82e36),
            unlocked() { return hasUpgrade('oneup_mushroom', 34) || hasUpgrade(this.layer, this.id) },
        },
        // Look in the upgrades docs to see what goes here!
    },
    milestones: {
        0: {
            requirementDescription: "Life Maxed - Get 99 1UP Mushrooms",
            effectDescription: "Autobuy Super Mushroom buyable 1.",
            done() { return player.oneup_mushroom.points.gte(99) },
        },
        1: {
            requirementDescription() {
                let d = `Get ${f(2000)} Rotten Mushrooms`
                return d
            },
            effectDescription() {
                let d = "10x Rotten Mushroom gain."
                if (milestoneOverpowered(this.layer, 1)) d = d + "<br>Overpowered Effect: 1UP Mushroom boosts SE Endless Clears gain<br>"
                    + "Currently: " + format(upgradeEffect('super_acorn', 113)) + "x"
                return d
            },
            done() { return player.oneup_mushroom.rotten_mushroom.gte(2000) },
            overpowered() { return hasUpgrade('super_acorn', 113) },
            unlocked() { return hasUpgrade('usa_mushroom', 35) },
            style() {
                if (hasMilestone('oneup_mushroom', 1) && !milestoneOverpowered(this.layer, 1)) return { "background-color": "#9600b1" }
                else if (hasMilestone('oneup_mushroom', 1) && milestoneOverpowered(this.layer, 1)) return { "background": "linear-gradient(45deg, #9600b1, #ffad00)" }
            }
        },
        2: {
            requirementDescription() {
                let d = `Get ${f(30000)} Rotten Mushrooms`
                return d
            },
            effectDescription: "Finally, unlock the last layer on row 6.",
            done() { return player.oneup_mushroom.rotten_mushroom.gte(30000) },
            unlocked() { return hasUpgrade('usa_mushroom', 35) },
            style() { if (hasMilestone('oneup_mushroom', 2)) return { "background-color": "#9600b1" } }
        },
    },
    challenges: {
        11: {
            name: "Bob-ombs",
            challengeDescription: "^0.01 Super Mushroom gain",
            goalDescription() {
                return `Get ${f('1e1205')} Cleared Courses`
            },
            canComplete: function () {
                return player.points.gte("1e1205")
            },
            rewardDescription() {
                let dest = ''
                if (hasUpgrade('super_leaf', 25)) dest = ' (Destroyed)'
                let des = `Multiply Pink Key Coin gain based on 1UP Mushrooms. (Hardcap at ${f('1e5000')}${dest})`
            },
            rewardEffect() {
                if (hasUpgrade('super_leaf', 25)) return player.oneup_mushroom.points.pow(Decimal.log10((player.oneup_mushroom.points.max(0).add(10))).min(75)).max(1)
                else return player.oneup_mushroom.points.pow(Decimal.log10((player.oneup_mushroom.points.max(0).add(10)))).min("1e5000").max(1)
            },
            rewardDisplay() { return format(challengeEffect(this.layer, this.id)) + "x" },
            unlocked() { return hasUpgrade('bouncy_ball_flower', 15) },
            autoComplete() { if (hasAchievement('achievements', 63)) player[this.layer].challenges[this.id] = 1 },
        },
        12: {
            name: "Fire bubbles",
            challengeDescription: "^0.05 Fire Flower gain.",
            goalDescription() {
                return `Get ${f('1e7998')} Cleared Courses`
            },
            canComplete: function () {
                return player.points.gte("1e7998")
            },
            rewardDescription: "Multiply Bouncy Ball gain by 15x, Flower and unlock 6th Bounce Ball upgrade.",
            unlocked() { return hasChallenge('oneup_mushroom', 11) || hasAchievement('achievements', 63) },
            autoComplete() { if (hasAchievement('achievements', 63)) player[this.layer].challenges[this.id] = 1 },
        },
    },
    clickables: {
        11: {
            title: "Sacrifice",
            display() {
                return "Sacrifice your 1UP Mushroom to gain Rotten Mushrooms."
            },
            canClick() { return true },
            onClick() {
                return player.oneup_mushroom.sacrifice = player.oneup_mushroom.sacrifice.add(player.oneup_mushroom.points),
                    player.oneup_mushroom.points = new Decimal(0)
            },
            style: {
                'background-color': '#9600b1',
                'color': 'white'
            },
        },
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + formatWhole(player.fire_flower.points) + ` Fire Flowers`],
        ["display-text", () => `Your best amount of 1UP Mushroom is ` + formatWhole(player.oneup_mushroom.best)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">1UP Mushroom is a rare reward in 2D Mario games. When you get one, you can get 1 extra life. <br> In SMM 100-Mario challenge and SMM2 endless challenge, you can only get 3 extra lives at most in one course.`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]

            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones"
                ]
            },
            "Challenges": {
                unlocked() { return hasUpgrade('bouncy_ball_flower', 15) || hasAchievement('achievements', 63) },
                content: [
                    ["blank", "15px"],
                    "challenges"
                ],
            },
            "Rotten Mushroom": {
                unlocked() { return hasUpgrade('usa_mushroom', 35) },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Rotten mushroom follows you and wants to hurt you. But if you are invincible, it will escape from you.`],
                    ["display-text", function () {
                        let RMpsec = format(player.oneup_mushroom.sacrifice.max(1).log(10).max(1).log(10).max(0))
                        if (hasMilestone('oneup_mushroom', 1)) RMpsec = format(player.oneup_mushroom.sacrifice.max(1).log(10).max(1).log(10).max(0).times(10))
                        if (hasUpgrade('frog_suit', 24)) RMpsec = format(player.oneup_mushroom.sacrifice.max(1).log(10).max(1).log(10).max(0).times(10).pow(upgradeEffect('frog_suit', 24)))
                        return "You have sacrificed <h2 style='color: #5bbf2f; text-shadow: 0 0 10px #5bbf2f'>" + format(player.oneup_mushroom.sacrifice) + "</h2> 1UP Mushrooms, generating <h2 style='color: #9600b1; text-shadow: 0 0 10px #9600b1'>" + RMpsec + " </h2> Rotten Mushrooms every second."
                    }],
                    ["display-text", function () {
                        let normal = "You have <h2 style='color: #9600b1; text-shadow: 0 0 10px #9600b1'>" + format(player.oneup_mushroom.rotten_mushroom) + "</h2> Rotten Mushrooms."
                        return normal
                    }],
                    "clickables",
                    "buyables",
                ],
                buttonStyle() {
                    return {
                        'background-color': '#9600b1',
                        'border-color': '#84009d',
                        'color': 'white',
                    }
                },
            },
        },
    },
})
// 第六层：弹力球之花
addLayer("bouncy_ball_flower", {
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            bouncy_ball: new Decimal(0),
            upgrade_bought: new Decimal(0),
        }
    },

    color: "#606040",                       // The color for this layer, which affects many elements.
    resource: "Bouncy Ball Flowers",            // The name of this layer's main prestige resource.
    row: 2,                                 // The row this layer is on (0 is the first row).
    position: 2,
    symbol: "BBF",
    branches: ["super_mushroom"],

    baseResource: "Super Mushrooms",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.super_mushroom.points },  // A function to return the current amount of baseResource.
    // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.

    exponent: 1 / 1825.6,                          // "normal" prestige gain is (currency^exponent).

    requires: new Decimal("1e1700"),

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)
        if (hasUpgrade("bouncy_ball_flower", 14)) mult = mult.times(upgradeEffect('bouncy_ball_flower', 14))
        if (hasChallenge("oneup_mushroom", 12)) mult = mult.times(15)
        if (hasUpgrade("bouncy_ball_flower", 21)) mult = mult.times(2)
        if (hasUpgrade("bouncy_ball_flower", 22)) mult = mult.times(3)
        if (hasUpgrade("bouncy_ball_flower", 23)) mult = mult.times(4)
        if (hasUpgrade("bouncy_ball_flower", 24)) mult = mult.times(5)
        if (hasUpgrade("bouncy_ball_flower", 25)) mult = mult.times(6)
        if (hasUpgrade("bouncy_ball_flower", 31)) mult = mult.times(upgradeEffect('bouncy_ball_flower', 31))
        if (hasUpgrade("big_mushroom", 23)) mult = mult.times(upgradeEffect("big_mushroom", 23))
        if (hasMilestone('super_leaf', 4)) mult = mult.times(10)
        if (hasMilestone('super_leaf', 0)) mult = mult.times(2)
        return mult
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },

    layerShown() { return hasUpgrade('invincible_star', 35) || hasAchievement('achievements', 43) },          // Returns a bool for if this layer's node should be visible in the tree.

    passiveGeneration() { return hasMilestone('super_leaf', 5) || hasAchievement('achievements', 64) },
    autoUpgrade() { return hasMilestone('super_leaf', 7) || hasAchievement('achievements', 83) }, //冲突点位，需要调整
    doReset(resettingLayer) {
        if (layers[resettingLayer].row >= 12) return undefined
        else
            if (layers[resettingLayer].row > layers[this.layer].row) {
                let kept = ["unlocked", "auto"]
                if (hasMilestone('super_leaf', 8)) {
                    kept.push("milestones")
                }
                if (hasMilestone('master_sword', 14)) {
                    kept.push("upgrades")
                }

                layerDataReset(this.layer, kept)
            }
    },
    hotkeys: [
        { key: "b", description: "B: Reset for Bouncy Ball Flowers", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],
    update(diff) {
        let multBB = new Decimal(1)
        multBB = multBB.add(buyableEffect('bouncy_ball_flower', 11))
        multBB = multBB.times(buyableEffect('bouncy_ball_flower', 12))
        multBB = multBB.times(buyableEffect('bouncy_ball_flower', 13))
        if (hasMilestone('invincible_star', 4)) multBB = multBB.times(1e20)
        if (hasUpgrade('super_leaf', 24)) multBB = multBB.times("1.797e308")
        if ((hasUpgrade('bouncy_ball_flower', 32) || hasAchievement('achievements', 62)) && hasUpgrade('bouncy_ball_flower', 11)) player.bouncy_ball_flower.bouncy_ball = player.bouncy_ball_flower.bouncy_ball.add(multBB.times(diff).times(10))
        //购买项自动化
        let bb = player.bouncy_ball_flower.bouncy_ball
        let x1 = player.bouncy_ball_flower.buyables[11]
        let x2 = player.bouncy_ball_flower.buyables[12]
        let x3 = player.bouncy_ball_flower.buyables[13]
        if ((hasUpgrade("bouncy_ball_flower", 13) || hasMilestone('super_leaf', 2) || hasAchievement('achievements', 63)) && bb.gte(new Decimal(20).times(Decimal.pow(x1, 1.05).add(1)))) player.bouncy_ball_flower.buyables[11] = player.bouncy_ball_flower.bouncy_ball.div(20).subtract(1).pow(1 / 1.05).floor().add(1)
        if ((hasUpgrade("bouncy_ball_flower", 33) || hasMilestone('super_leaf', 2) || hasAchievement('achievements', 63)) && bb.gte(new Decimal(10).pow(Decimal.pow(x2, 1.05).add(1)))) player.bouncy_ball_flower.buyables[12] = player.bouncy_ball_flower.bouncy_ball.log(10).subtract(1).pow(1 / 1.05).floor().add(1)
        if ((hasUpgrade("bouncy_ball_flower", 33) || hasMilestone('super_leaf', 2) || hasAchievement('achievements', 63)) && bb.gte(new Decimal(10).pow(Decimal.pow(x3, 1.24).add(1)))) player.bouncy_ball_flower.buyables[13] = player.bouncy_ball_flower.bouncy_ball.log(10).subtract(1).pow(1 / 1.24).floor().add(1)
    },
    upgrades: {
        11: {
            title: "The first bounce",
            description: "Unlock Bouncy Ball subtab.",
            cost: new Decimal(1),
            unlocked() { return true },
        },
        12: {
            title: "Two kinds of flowers",
            description: "Passive gain 100% Fire Flower per second.",
            cost: new Decimal(3),
            unlocked() { return hasUpgrade('bouncy_ball_flower', 11) && hasMilestone('bouncy_ball_flower', 2) },
        },
        13: {
            title: "Auto bouncy shots",
            description: "Autobuy 1st Bouncy Ball Flower buyable and buy max.",
            cost: new Decimal(15),
            unlocked() { return hasUpgrade('bouncy_ball_flower', 12) },
        },
        // Look in the upgrades docs to see what goes here!
        14: {
            title: "Don't let it go to off-screen!",
            description: "Multiply Bouncy Ball Flower gain based on Bouncy Ball.",
            cost: new Decimal(49),
            unlocked() { return hasUpgrade('bouncy_ball_flower', 13) },
            effect() {
                return player.bouncy_ball_flower.bouncy_ball.max(0).add(10).log(10).div(45).add(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        15: {
            title: "Bouncy Ball can't farm lives",
            description: "Unlock two 1UP Mushroom challenges.",
            cost: new Decimal(125),
            unlocked() { return hasUpgrade('bouncy_ball_flower', 14) },
        },
        21: {
            title: "Grayish-yellow style",
            description: "Double Bouncy Ball Flowers gain.",
            cost: new Decimal(2496),
            unlocked() { return hasChallenge("oneup_mushroom", 12) },
        },
        22: {
            title: "Mario's gray hat",
            description: "Triple Bouncy Ball Flowers gain.",
            cost: new Decimal(4992),
            unlocked() { return hasUpgrade('bouncy_ball_flower', 21) },
        },
        23: {
            title: "Luigi's gray hat",
            description: "Quadruple Bouncy Ball Flowers gain.",
            cost: new Decimal(14976),
            unlocked() { return hasUpgrade('bouncy_ball_flower', 22) },
        },
        24: {
            title: "Toad's gray head",
            description: "Quintuple Bouncy Ball Flowers gain.",
            cost: new Decimal(69904),
            unlocked() { return hasUpgrade('bouncy_ball_flower', 23) },
        },
        25: {
            title: "Toadette's gray braids",
            description: "Sextuple Bouncy Ball Flowers gain.",
            cost: new Decimal(510541),
            unlocked() { return hasUpgrade('bouncy_ball_flower', 24) },
        },
        31: {
            title: "Like reflection of light",
            description: "One BBF upgrade you bought, BBF gain x1.5.",
            cost: new Decimal(4200000),
            unlocked() { return hasUpgrade('bouncy_ball_flower', 25) },
            effect() {
                return Decimal.pow(1.5, d(countUniqueValues(player.bouncy_ball_flower.upgrades)))
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        32: {
            title: "Get the key beside the corner",
            description: "Generate 1,000% Bouncy Ball per second.",
            cost: new Decimal(300000000),
            unlocked() { return hasUpgrade('bouncy_ball_flower', 31) },
        },
        33: {
            title: "Defeat the boom-boom on the top of the screen",
            description: "Autobuy BBF buyables 2 and 3.",
            cost: new Decimal(410000000),
            unlocked() { return hasUpgrade('bouncy_ball_flower', 32) },
        },
        34: {
            title: "Is there a new kind of flowers?",
            description() { return `${f(510541)}x 1UP Mushroom gain.` },
            cost: new Decimal(600000000),
            unlocked() { return hasUpgrade('bouncy_ball_flower', 33) },
        },
        35: {
            title: "Yes. But it's too early for now",
            description: "Unlock a new layer.",
            cost: new Decimal(1e9),
            unlocked() { return hasUpgrade('bouncy_ball_flower', 34) || hasUpgrade(this.layer, this.id) },
        },
    },
    clickables: {
        11: {
            title: "Bounce to touch everything",
            display() {
                let clickBB = new Decimal(1)
                clickBB = clickBB.add(buyableEffect('bouncy_ball_flower', 11))
                clickBB = clickBB.times(buyableEffect('bouncy_ball_flower', 12))
                clickBB = clickBB.times(buyableEffect('bouncy_ball_flower', 13))
                if (hasMilestone('invincible_star', 4)) clickBB = clickBB.times(1e20)
                return "Click or hold this botton to gain " + format(clickBB) + " Bouncy Balls"
            },
            canClick() { return hasUpgrade(this.layer, 11) },
            onClick() {
                let clickBB = new Decimal(1)
                clickBB = clickBB.add(buyableEffect('bouncy_ball_flower', 11))
                clickBB = clickBB.times(buyableEffect('bouncy_ball_flower', 12))
                clickBB = clickBB.times(buyableEffect('bouncy_ball_flower', 13))
                if (hasMilestone('invincible_star', 4)) clickBB = clickBB.times(1e20)
                return player.bouncy_ball_flower.bouncy_ball = player.bouncy_ball_flower.bouncy_ball.add(clickBB)
            },
            onHold() { return this.onClick() },
            style: {
                'background-color': '#e4e4b2',
                'width': '200px',
                'min-height': '100px',
                'border-radius': '5px',
            },
        },
    },
    buyables: {
        11: {
            title: "Bounce to touch coins",
            cost(x) { return new Decimal(20).times(Decimal.pow(x, 1.05).add(1)) },
            display() {
                if (player.bouncy_ball_flower.buyables[11].gte(1e30)) return ` Get more Bouncy Balls clicking the button above. <br>
                Effect: +${format(this.effect())} (softcapped)<br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Bouncy Balls`
                else return ` Get more Bouncy Balls clicking the button above. <br>
                Effect: +${format(this.effect())} <br>
                Level: ${format(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Bouncy Balls`
            },
            canAfford() { return player[this.layer].bouncy_ball.gte(this.cost()) },
            buy() {
                player[this.layer].bouncy_ball = player[this.layer].bouncy_ball.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                BBFB1effect = x
                BBFB1softcap = new Decimal(0.9)
                if (hasUpgrade('super_leaf', 231)) BBFB1softcap = new Decimal(0.7)
                if (hasUpgrade('cape_feather', 22)) BBFB1softcap = new Decimal(0.3)
                if (player.bouncy_ball_flower.buyables[11].gte(1e30)) BBFB1effect = BBFB1effect.div(Decimal.pow(BBFB1effect.div(1e30), BBFB1softcap))
                return BBFB1effect
            },
            unlocked() { return hasUpgrade(this.layer, 11) },
        },
        12: {
            title: "Bounce to touch keys",
            cost(x) { return new Decimal(10).pow(Decimal.pow(x, 1.05).add(1)) },
            display() {
                return ` Get more Bouncy Balls clicking the button above with a strong effect. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Bouncy Balls`
            },
            canAfford() { return player[this.layer].bouncy_ball.gte(this.cost()) },
            buy() {
                player[this.layer].bouncy_ball = player[this.layer].bouncy_ball.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) { return new Decimal(2).pow(x).max(1) },
            unlocked() { return hasMilestone('bouncy_ball_flower', 0) },
        },
        13: {
            title: "Bounce to touch P switches",
            cost(x) { return new Decimal(10).pow(Decimal.pow(x, 1.24).add(1)) },
            display() {
                return ` Get more Bouncy Balls clicking the button above with a stronger effect. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Bouncy Balls`
            },
            canAfford() { return player[this.layer].bouncy_ball.gte(this.cost()) },
            buy() {
                player[this.layer].bouncy_ball = player[this.layer].bouncy_ball.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) { return new Decimal(20).pow(x).max(1) },
            unlocked() { return hasMilestone('bouncy_ball_flower', 1) },
        },
    },
    milestones: {
        0: {
            requirementDescription() {
                let d = "Get 300 Bouncy Balls"
                return d
            },
            effectDescription() {
                let d = "Unlock 2nd Bouncy Ball Flower buyable."
                if (hasUpgrade('super_acorn', 121)) d = d + "<br>Overpowered effect: Power Normal Endless Clear effect based on BBF.<br>Currently: ^" + format(upgradeEffect('super_acorn', 121))
                return d
            },
            done() { return player.bouncy_ball_flower.bouncy_ball.gte(300) },
        },
        1: {
            requirementDescription() {
                let d = `Get ${f(8888)} Bouncy Balls`
                return d
            },
            effectDescription: "Unlock 3rd Bouncy Ball Flower buyable.",
            done() { return player.bouncy_ball_flower.bouncy_ball.gte(8888) },
        },
        2: {
            requirementDescription() {
                let d = `Get ${f(1e33)} Bouncy Balls`
                return d
            },
            effectDescription: "Unlock 2nd Bouncy Ball Flower upgrade.",
            done() { return player.bouncy_ball_flower.bouncy_ball.gte(1e33) },
        },
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + formatWhole(player.super_mushroom.points) + ` Super Mushrooms`],
        ["display-text", () => `Your best amount of Bouncy Ball Flower is ` + formatWhole(player.bouncy_ball_flower.best)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">First appearance of Bouncy Ball Flower is in Super Mario Land (1989, GB). <br> The characters will be gray when they get this power-up. <br> Can you find out which is Bouncy Ball Mario, which is Bouncy Ball Luigi?`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]

            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "Bouncy Ball": {
                unlocked() { return hasUpgrade('bouncy_ball_flower', 11) },
                content: [
                    ["blank", "15px"],
                    ["display-text", () => "You have <h2 style='color: #e4e4b2; text-shadow: 0 0 10px #e4e4b2'>" + format(player.bouncy_ball_flower.bouncy_ball) + "</h2> Bouncy Balls, multiplying Super Mushroom gain by <h2 style='color: #e4e4b2; text-shadow: 0 0 10px #e4e4b2'> <br>" + format(player.bouncy_ball_flower.bouncy_ball.max(1).pow(2.35)) + "x</h2>. (Before the exponentional calculation)"],
                    "clickables",
                    "blank",
                    "buyables",
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #606040, #e4e4b2)',
                        'border-color': '#606040',
                        'color': 'black',
                    }
                },
            },
        },
    },
})
// 第七层：大蘑菇
addLayer("big_mushroom", {
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),
            broken_brick: new Decimal(0),
            broken_hard_brick: new Decimal(0),
            broken_ice_block: new Decimal(0),
            clickBrBfactor2: new Decimal(3),           // "points" is the internal name for the main resource of the layer.
        }
    },

    color: "#F7431D",                       // The color for this layer, which affects many elements.
    resource: "Big Mushrooms",            // The name of this layer's main prestige resource.
    row: 2,
    position: 3,
    symbol: "BM",
    // The row this layer is on (0 is the first row).
    branches: ["fire_flower"],
    baseResource: "Fire Flowers",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.fire_flower.points },  // A function to return the current amount of baseResource.

    requires: new Decimal('3e507'),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.004,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let mult = new Decimal(1)              // Factor in any bonuses multiplying gain here.
        mult = mult.times(clickableEffect('big_mushroom', 12))
        if (hasUpgrade('big_mushroom', 14)) mult = mult.times(10)
        if (hasUpgrade('big_mushroom', 24)) mult = mult.times(25)
        if (hasMilestone('super_leaf', 4)) mult = mult.times(10)
        if (hasUpgrade('cape_feather', 11)) mult = mult.times(upgradeEffect('cape_feather', 11))
        if (hasMilestone('propeller_mushroom', 0)) mult = mult.times(1e50)
        if (hasMilestone('super_leaf', 0)) mult = mult.times(2)
        return mult
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        exp = new Decimal(1)
        if (hasUpgrade('big_mushroom', 34)) exp = exp.times(2)
        return exp
    },
    passiveGeneration() { return hasMilestone('super_leaf', 5) || hasAchievement('achievements', 64) },
    layerShown() { return hasUpgrade('bouncy_ball_flower', 35) || hasAchievement('achievements', 52) },          // Returns a bool for if this layer's node should be visible in the tree.

    autoUpgrade() { return hasMilestone('super_leaf', 9) || hasAchievement('achievements', 83) }, // 冲突

    doReset(resettingLayer) {
        if (layers[resettingLayer].row >= 12) return undefined
        else if (layers[resettingLayer].row > layers[this.layer].row) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('super_leaf', 8)) {
                kept.push("milestones")
            }
            if (hasMilestone('master_sword', 15)) {
                kept.push("upgrades")
            }

            layerDataReset(this.layer, kept)
        }
    },

    hotkeys: [
        { key: "B", description: "Shift+B: Reset for Big Mushrooms", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],
    upgrades: {
        11: {
            title: "Jump onto it",
            description: "Unlock Destruction subtab.",
            cost: new Decimal(1),
            unlocked() { return true },
        },
        12: {
            title: "Faster breaking",
            description: "Multiply Broken Bricks based on Big Mushrooms.",
            cost: new Decimal(6),
            unlocked() { return hasMilestone('big_mushroom', 0) },
            effect() {
                return player.big_mushroom.points.max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        13: {
            title: "Light jump onto bricks",
            description: "Auto click 1st BM clickable 100 times/sec.",
            cost: new Decimal(9),
            unlocked() { return hasUpgrade('big_mushroom', 12) },
            effect() {
                let BMclickpersec = new Decimal(100)
                if (hasMilestone('big_mushroom', 1)) BMclickpersec = BMclickpersec.times(2019)
                if (hasUpgrade('big_mushroom', 32)) BMclickpersec = BMclickpersec.times(upgradeEffect('big_mushroom', 32))
                return BMclickpersec
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + " times/sec" },
        },
        14: {
            title: "Giants",
            description: "10x Big Mushroom gain",
            cost: new Decimal(15),
            unlocked() { return hasUpgrade('big_mushroom', 13) },
        },
        15: {
            title: "1.5-block wide",
            description: "Start to generate 1 Broken Hard Block every second.",
            cost: new Decimal(223),
            unlocked() { return hasUpgrade('big_mushroom', 14) },
        },
        21: {
            title: "Stronger jumps",
            description: "1st BM clickable also affects Broken Hard Bricks.",
            cost: new Decimal(777),
            unlocked() { return hasMilestone('big_mushroom', 2) },
        },
        22: {
            title: "Mushroom affects mushroom",
            description: "Multiply 1UP Mushroom based on Big Mushroom.",
            cost: new Decimal(1000),
            unlocked() { return hasUpgrade('big_mushroom', 21) },
            effect() {
                return player.big_mushroom.points.pow(0.6).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        23: {
            title: "Stronger jumps",
            description: "Multiply Bouncy Ball Flower based on Big Mushroom.",
            cost: new Decimal(3125),
            unlocked() { return hasUpgrade('big_mushroom', 22) },
            effect() {
                return player.big_mushroom.points.pow(0.8).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        24: {
            title: "Super giants",
            description: "25x Big Mushroom gain",
            cost: new Decimal(4000),
            unlocked() { return hasUpgrade('big_mushroom', 23) },
        },
        25: {
            title: "Frozen breaking",
            description: "Start to generate 1 Broken Ice Block every second.",
            cost: new Decimal(201906),
            unlocked() { return hasUpgrade('big_mushroom', 24) },
        },
        31: {
            title: "Powerful jumps",
            description: "1st BM clickable also affects Broken Ice Blocks.",
            cost: new Decimal(1666390),
            unlocked() { return hasMilestone('big_mushroom', 3) },
        },
        32: {
            title: "Don't break the question block!",
            description: "Multiply the click speed on 1st BM clickable based on BBF.",
            cost: new Decimal(6952965),
            unlocked() { return hasUpgrade('big_mushroom', 31) },
            effect() {
                return player.bouncy_ball_flower.points.pow(3)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        33: {
            title: "Buffer jump onto bricks",
            description: "Passive gain 1000% Broken Bricks like clicking.",
            cost: new Decimal(30303030),
            unlocked() { return hasUpgrade('big_mushroom', 32) },
        },
        34: {
            title: "Land on on-off switch",
            description: "Square Big Mushroom gain",
            cost: new Decimal(77788999),
            unlocked() { return hasUpgrade('big_mushroom', 33) },
        },
        35: {
            title: "Don't create a softlock",
            description: "Unlock 12th 1UP Mushroom upgrade.",
            cost: new Decimal(5e17),
            unlocked() { return hasUpgrade('big_mushroom', 34) },
        },
    },
    // Look in the upgrades docs to see what goes here!
    clickables: {
        11: {
            title: "Destroy more!",
            display() {
                if (hasMilestone('super_bell', 0))
                    return "Click or hold to increase Broken Bricks gain multiplier. <br> Currently: " + format(player.big_mushroom.clickBrBfactor2.log(3).pow(72535)) + "x"
                else return "Click or hold to increase Broken Bricks gain multiplier. <br> Currently: " + format(player.big_mushroom.clickBrBfactor2.log(3)) + "x"
            },
            canClick() { return hasUpgrade(this.layer, 11) },
            onClick() {
                player.big_mushroom.clickBrBfactor2 = player.big_mushroom.clickBrBfactor2.add(3)
                return player.big_mushroom.clickBrBfactor2
            },
            onHold() { return this.onClick() },
            effect() {
                if (hasMilestone('super_bell', 0)) return player.big_mushroom.clickBrBfactor2.log(3).pow(72535)
                else return player.big_mushroom.clickBrBfactor2.log(3)
            }
        },
        12: {
            title: "Break the bricks",
            display() {
                let clickBrB = new Decimal(1)
                let BMBHBeff = player.big_mushroom.broken_hard_brick.max(1).pow(1.75)
                clickBrB = clickBrB.times(BMBHBeff)
                clickBrB = clickBrB.times(clickableEffect('big_mushroom', 11))
                if (hasUpgrade('big_mushroom', 12)) clickBrB = clickBrB.times(upgradeEffect('big_mushroom', 12))
                return "Click or hold this botton to gain " + format(clickBrB) + " Broken Bricks"
            },
            canClick() { return hasUpgrade(this.layer, 11) },
            onClick() {
                let clickBrB = new Decimal(1)
                let BMBHBeff = player.big_mushroom.broken_hard_brick.max(1).pow(1.75)
                clickBrB = clickBrB.times(BMBHBeff)
                clickBrB = clickBrB.times(clickableEffect('big_mushroom', 11))
                if (hasUpgrade('big_mushroom', 12)) clickBrB = clickBrB.times(upgradeEffect('big_mushroom', 12))
                return player.big_mushroom.broken_brick = player.big_mushroom.broken_brick.add(clickBrB)
            },
            onHold() {
                return this.onClick()
            },
            effect() {
                return player.big_mushroom.broken_brick.max(1).pow(0.1)
            }
        },
    },
    milestones: {
        0: {
            requirementDescription() {
                let d = `Get ${f(500)} Broken Bricks`
                return d
            },
            effectDescription() {
                let d = "Unlock 2nd Big Mushroom upgrade."
                if (hasUpgrade('super_acorn', 122)) d = d + `<br>Overpowered effect: Boost Wing gain based on Big Mushroom<br>Currently: ${format(upgradeEffect('super_acorn', 122))}x`
                return d
            },
            done() { return player.big_mushroom.broken_brick.gte(500) },
        },
        1: {
            requirementDescription() {
                let d = `Get ${f(201906)} Broken Bricks`
                return d
            },
            effectDescription: "Auto click 1st BM clickable 2019x faster.",
            done() { return player.big_mushroom.broken_brick.gte(201906) },
        },
        2: {
            requirementDescription: "Get 59 Broken Hard Bricks",
            effectDescription: "Unlock 6th Big Mushroom upgrade.",
            done() { return player.big_mushroom.broken_hard_brick.gte(59) },
        },
        3: {
            requirementDescription: "Get 61 Broken Ice Blocks",
            effectDescription: "Unlock 11th Big Mushroom upgrade.",
            done() { return player.big_mushroom.broken_ice_block.gte(61) },
        },
    },
    update(diff) {
        let BMBB = new Decimal(1)
        let BMBHBeff = player.big_mushroom.broken_hard_brick.max(1).pow(1.75)
        BMBB = BMBB.times(BMBHBeff)
        BMBB = BMBB.times(clickableEffect('big_mushroom', 11))
        if (hasUpgrade('big_mushroom', 12)) BMBB = BMBB.times(upgradeEffect('big_mushroom', 12))
        if (hasUpgrade('super_leaf', 11)) BMBB = BMBB.times(20)
        if (hasUpgrade('super_leaf', 13)) BMBB = BMBB.times(20).pow(1.25).times(0.05)
        if (hasMilestone('cape_feather', 0)) BMBB = BMBB.times(1e200)
        if ((hasUpgrade('big_mushroom', 33) || hasAchievement('achievements', 62)) && hasUpgrade('big_mushroom', 11)) player.big_mushroom.broken_brick = player.big_mushroom.broken_brick.add(BMBB.times(10).times(diff))
        let BMBHB = new Decimal(1)
        if (hasMilestone('super_leaf', 0)) BMBHB = BMBHB.times(1.25)
        if (hasUpgrade('big_mushroom', 21)) BMBHB = BMBHB.times(clickableEffect('big_mushroom', 11))
        let BMBICeff = player.big_mushroom.broken_ice_block.max(1).pow(2.75)
        BMBHB = BMBHB.times(BMBICeff)
        if (hasMilestone('super_leaf', 2)) BMBHB = BMBHB.times(10)
        if (hasUpgrade('super_leaf', 11)) BMBHB = BMBHB.times(20)
        if (hasUpgrade('big_mushroom', 15)) player.big_mushroom.broken_hard_brick = player.big_mushroom.broken_hard_brick.add(BMBHB.times(diff))
        let BMBIC = new Decimal(1)
        if (hasMilestone('super_leaf', 1)) BMBIC = BMBIC.times(1.25)
        if (hasUpgrade('big_mushroom', 31)) BMBIC = BMBIC.times(clickableEffect('big_mushroom', 11))
        if (hasMilestone('super_leaf', 2)) BMBIC = BMBIC.times(10)
        if (hasUpgrade('super_leaf', 11)) BMBIC = BMBIC.times(20)
        if (hasUpgrade('super_leaf', 22)) BMBIC = BMBIC.times(489040)
        if (hasUpgrade('cape_feather', 25)) BMBIC = BMBIC.times(upgradeEffect('cape_feather', 25))
        if (hasUpgrade('big_mushroom', 25)) player.big_mushroom.broken_ice_block = player.big_mushroom.broken_ice_block.add(BMBIC.times(diff))
        let clickBrBfactor2 = new Decimal(100)
        if (hasMilestone('big_mushroom', 1)) clickBrBfactor2 = clickBrBfactor2.times(2019)
        if (hasUpgrade('big_mushroom', 32)) clickBrBfactor2 = clickBrBfactor2.times(upgradeEffect('big_mushroom', 32))
        if (hasUpgrade('big_mushroom', 13)) player.big_mushroom.clickBrBfactor2 = player.big_mushroom.clickBrBfactor2.add(clickBrBfactor2.times(diff))
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + formatWhole(player.fire_flower.points) + ` Fire Flowers`],
        ["display-text", () => `Your best amount of Big Mushroom is ` + formatWhole(player.big_mushroom.best)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Big Mushroom is from Super Mario Maker (2015, Wii U). <br> Characters can be so big, and they are able to destroy bricks when they jump onto them.`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]

            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "Destruction": {
                unlocked() { return hasUpgrade('big_mushroom', 11) },
                content: [
                    ["blank", "15px"],
                    ["display-text", () => "You have <h2 style='color: #a05911; text-shadow: 0 0 10px #a05911'>" + format(player.big_mushroom.broken_brick) + "</h2> Broken Bricks, multiplying Big Mushroom gain by <h2 style='color: #a05911; text-shadow: 0 0 10px #a05911'> <br>" + format(player.big_mushroom.broken_brick.max(1).pow(0.1)) + "x</h2>. <br>You have <h2 style='color: #ffff80; text-shadow: 0 0 10px #ffff80'>" + format(player.big_mushroom.broken_hard_brick) + "</h2> Broken Hard Bricks, multiplying Broken Brick gain by <h2 style='color: #ffff80; text-shadow: 0 0 10px #ffff80'> <br>" + format(player.big_mushroom.broken_hard_brick.max(1).pow(1.75)) + "x</h2>. <br>You have <h2 style='color: #55dff8; text-shadow: 0 0 10px #55dff8'>" + format(player.big_mushroom.broken_ice_block) + "</h2> Broken Ice Blocks, multiplying Broken Hard Brick gain by <h2 style='color: #55dff8; text-shadow: 0 0 10px #55dff8'> <br>" + format(player.big_mushroom.broken_ice_block.max(1).pow(2.75)) + "x</h2>."],
                    "clickables",
                    "buyables",
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #a05911, #ffff80, #55dff8)',
                        'color': 'black',
                    }
                },
            },
        },
    },
})
// 第八层：超级叶子
addLayer("super_leaf", {
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            slsp: new Decimal(0),
        }
    },
    effect() {
        return Decimal.add(player[this.layer].points.times('1e1250')).times(player[this.layer].points.pow(20)).max(1)
        /*
          you should use this.layer instead of <layerID>
          Decimal.pow(num1, num2) is an easier way to do
          num1.pow(num2)
        */
    },
    effectDescription() {
        return `multiplying Cleared Courses gain by ${textStyle_h2(format(tmp[this.layer].effect) + "x", 'f83a11')}`
        /*
        use format(num) whenever displaying a number
        */
    },
    color: "#F83A11",                       // The color for this layer, which affects many elements.
    resource: "Super Leaves",            // The name of this layer's main prestige resource.
    row: 3,
    position: 0,
    symbol: "SL",
    // The row this layer is on (0 is the first row).
    branches: ["oneup_mushroom"],
    baseResource: "1UP Mushrooms",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.oneup_mushroom.points },  // A function to return the current amount of baseResource.

    requires: new Decimal(1e37),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.01,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)
        if (hasUpgrade('super_leaf', 12)) mult = mult.times(5)               // Factor in any bonuses multiplying gain here.
        if (hasUpgrade('super_leaf', 14)) mult = mult.times(5)
        if (hasUpgrade('super_leaf', 21)) mult = mult.times(10)
        if (hasUpgrade('super_leaf', 31)) mult = mult.times(upgradeEffect('super_leaf', 31))
        if (hasUpgrade('super_leaf', 32)) mult = mult.times(7.77)
        if (hasUpgrade('super_leaf', 33)) mult = mult.times(10.21)
        if (hasUpgrade('super_leaf', 222)) mult = mult.times(3)
        if (hasUpgrade('super_leaf', 271)) mult = mult.times(upgradeEffect('super_leaf', 271))
        if (hasUpgrade('super_leaf', 302)) mult = mult.times(100021)
        if (player.propeller_mushroom.best.gte(1)) mult = mult.times(tmp.propeller_mushroom.effect)
        return mult
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },

    layerShown() { return hasUpgrade('oneup_mushroom', 35) || hasAchievement('achievements', 55) },          // Returns a bool for if this layer's node should be visible in the tree.

    multSLSP() {
        let multSLSP = new Decimal(1)
        if (hasUpgrade('super_leaf', 34)) multSLSP = multSLSP.times(upgradeEffect('super_leaf', 34))
        if (hasUpgrade('super_leaf', 211)) multSLSP = multSLSP.times(10)
        if (hasUpgrade('super_leaf', 212)) multSLSP = multSLSP.times(upgradeEffect('super_leaf', 212))
        if (hasUpgrade('super_leaf', 241)) multSLSP = multSLSP.times(upgradeEffect('super_leaf', 241))
        if (hasUpgrade('super_leaf', 242)) multSLSP = multSLSP.times(upgradeEffect('super_leaf', 242))
        if (hasUpgrade('super_leaf', 272)) multSLSP = multSLSP.times(248)
        if (hasUpgrade('super_leaf', 273)) multSLSP = multSLSP.times(51200)
        if (hasUpgrade('super_leaf', 301)) multSLSP = multSLSP.times(1e15)
        if (hasUpgrade('super_leaf', 303)) multSLSP = multSLSP.times(1e20)
        if (hasMilestone('propeller_mushroom', 0)) multSLSP = multSLSP.times(3)
        if (hasMilestone('propeller_mushroom', 4)) multSLSP = multSLSP.times(100)
        return multSLSP
    },

    update(diff) {
        if (hasUpgrade('super_leaf', 201)) player.super_leaf.slsp = player.super_leaf.slsp.add(tmp.super_leaf.multSLSP.times(diff))
    },

    autoUpgrade() { return hasMilestone('propeller_mushroom', 2) },
    passiveGeneration() { return hasMilestone('propeller_mushroom', 2) },

    doReset(resettingLayer) {
        if (layers[resettingLayer].row >= 12) return undefined
        else if (layers[resettingLayer].row > layers[this.layer].row) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('propeller_mushroom', 1)) {
                kept.push("milestones", 8)
            }
            if (hasMilestone('propeller_mushroom', 5)) {
                kept.push("milestones")
            }
            if (hasMilestone('master_sword', 16)) {
                kept.push("upgrades")
            }

            layerDataReset(this.layer, kept)
        }
    },

    hotkeys: [
        { key: "l", description: "L: Reset for Super Leaves", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],
    upgrades: {
        11: {
            title: "Be a raccoon",
            description: "20x all the resource except BM in BM layer.",
            cost: new Decimal(7),
            unlocked() { return tmp.super_leaf.layerShown },
        },
        12: {
            title: "Accelerate first",
            description: "Quintuple Super Leaf gain.",
            cost: new Decimal(3),
            unlocked() { return hasUpgrade('super_leaf', 11) },
        },
        13: {
            title: "To the max speed",
            description: "^1.25 Broken Brick gain.",
            cost: new Decimal(15),
            unlocked() { return hasUpgrade('super_leaf', 12) },
        },
        14: {
            title: "Then fly!",
            description: "Quintuple Super Leaf gain, again.",
            cost: new Decimal(24),
            unlocked() { return hasUpgrade('super_leaf', 13) },
        },
        15: {
            title: "The tail attack",
            description: "Unlock SL Skill Tree.",
            cost: new Decimal(114),
            unlocked() { return hasUpgrade('super_leaf', 14) },
        },
        21: {
            title: "How about Raccoon Mario kaizo?",
            description: "10x Super Leaf gain.<br>*This upgrade will disappear when you respec the SLST.",
            cost: new Decimal(114514),
            unlocked() { return hasUpgrade('super_leaf', 291) },
        },
        22: {
            title: "The powerful tail",
            description() { return `${f(489040)}x Broken Ice Block gain` },
            cost: new Decimal(497000),
            unlocked() { return hasUpgrade('super_leaf', 21) },
        },
        23: {
            title: "The powerful tail",
            description: "Multiply 1UP Mushroom based on Big Mushroom",
            cost: new Decimal(697000),
            unlocked() { return hasUpgrade('super_leaf', 22) },
            effect() {
                return player.big_mushroom.points.sqrt().max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        24: {
            title: "Reclaim with tail",
            description() { return `${f(1.797e308)}x Bouncy Ball gain` },
            cost: new Decimal(4194304),
            unlocked() { return hasUpgrade('super_leaf', 23) },
        },
        25: {
            title: "Boss fight and fly",
            description: "Remove Bob-omb challenge effect hardcap and get a softcap.",
            cost: new Decimal(5120000),
            unlocked() { return hasUpgrade('super_leaf', 24) },
        },
        31: {
            title: "Flying limit",
            description: "Multiply Super Leaf gain based on time spent on this SL reset.",
            cost: new Decimal(12413170),
            unlocked() { return hasUpgrade('super_leaf', 25) },
            effect() {
                let SLRT = player.super_leaf.resetTime
                return Decimal.pow(SLRT, 1).times(2).max(1).min(100)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x<br>Hardcap at 100x after 50s" },
        },
        32: {
            title: "Fly, land, fly",
            description: "7.77x Super Leaf gain.",
            cost: new Decimal(400000000),
            unlocked() { return hasUpgrade('super_leaf', 31) },
        },
        33: {
            title: "Precision mid-air",
            description: "10.21x Super Leaf gain.",
            cost: new Decimal(2.88e9),
            unlocked() { return hasUpgrade('super_leaf', 32) },
        },
        34: {
            title: "Hit ? block on the floor",
            description: "Multiply SL Skill Point gain based on Invincible Stars.",
            cost: new Decimal(3.14e10),
            unlocked() { return hasUpgrade('super_leaf', 33) },
            effect() {
                return player.invincible_star.points.pow(2).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        35: {
            title: "Speedrun mid-air",
            description: "Extend the SL Skill Tree.",
            cost: new Decimal(3.76e10),
            unlocked() { return hasUpgrade('super_leaf', 34) },
        },
        41: {
            title: "They can fly",
            description: "You can both buy SLST 11,1 11,2 11,3. Extend SL Skill Tree again.",
            cost: new Decimal(8e36),
            unlocked() { return hasUpgrade('cape_feather', 12) },
        },
        42: {
            title: "Fly to a secret reward room",
            description: "Unlock 15th Cape Feather upgrade.",
            cost: new Decimal(2e205),
            unlocked() { return hasUpgrade('cape_feather', 34) && inChallenge('oneup_mushroom', 11) || hasAchievement('achievements', 81) },
        },
        43: {
            title: "Free fly",
            description: "Get 1000 Super Leaves for free.",
            cost: new Decimal(-1000),
            unlocked() { return hasMilestone('propeller_mushroom', 1) },
        },
        // Look in the upgrades docs to see what goes here!
        // 超级叶子普通升级与树升级的分界
        201: {
            title: "Infinite flying?",
            description: "Generate 1 SL Skill Point per second.",
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(0),
            unlocked() { return hasUpgrade('super_leaf', 15) },
        },
        211: {
            title: "Jump on enemies to continue flying",
            description: "10x SL Skill Point gain.<br>Lock 2,2",
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(20),
            unlocked() { return hasUpgrade('super_leaf', 201) },
            canAfford() {
                if (hasUpgrade('super_leaf', 251) || hasMilestone('propeller_mushroom', 1)) return true
                else if (hasUpgrade('super_leaf', 212)) return false
                else return true
            }
        },
        212: {
            title: "Trampoline boost and fly",
            description: "Multiply SL Skill point gain based on Super Leaf.<br>Lock 2,1",
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(424),
            unlocked() { return hasUpgrade('super_leaf', 201) },
            canAfford() {
                if (hasUpgrade('super_leaf', 251) || hasMilestone('propeller_mushroom', 1)) return true
                else if (hasUpgrade('super_leaf', 211)) return false
                else return true
            },
            effect() {
                return player.super_leaf.points.max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        221: {
            title: "Jump on enemies to continue flying",
            description: "4.89e166x Fire Flower gain.<br>Lock 3,2",
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(10000),
            unlocked() { return hasUpgrade('super_leaf', 211) || hasUpgrade('super_leaf', 212) },
            canAfford() {
                if (hasUpgrade('super_leaf', 261) || hasMilestone('propeller_mushroom', 1)) return true
                else if (hasUpgrade('super_leaf', 222)) return false
                else return true
            }
        },
        222: {
            title: "Fly outside the screen",
            description: "^1.5 1UP Mushroom gain and triple Super-Leaf gain.<br>Lock 3,1",
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(10000),
            unlocked() { return hasUpgrade('super_leaf', 211) || hasUpgrade('super_leaf', 212) },
            canAfford() {
                if (hasUpgrade('super_leaf', 261) || hasMilestone('propeller_mushroom', 1)) return true
                else if (hasUpgrade('super_leaf', 221)) return false
                else return true
            }
        },
        231: {
            title: "Fly while ducking",
            description: "The softcap of 1st BBF buyable is weaker.",
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(77777),
            unlocked() { return hasUpgrade('super_leaf', 221) || hasUpgrade('super_leaf', 222) },
        },
        241: {
            title: "The highest fly",
            description: "Multiply SL Skill Points based on Bouncy Ball.<br>Lock 5,2",
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(242045),
            unlocked() { return hasUpgrade('super_leaf', 231) },
            canAfford() {
                if (hasUpgrade('super_leaf', 281) || hasMilestone('propeller_mushroom', 1)) return true
                else if (hasUpgrade('super_leaf', 242)) return false
                else return true
            },
            effect() {
                return player.bouncy_ball_flower.bouncy_ball.max(1).log(10).pow(5).div(2e10).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        242: {
            title: "Fly over the lava",
            description: "Multiply SL Skill Points based on Pink Key Coin.<br>Lock 5,1",
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(248000000),
            unlocked() { return hasUpgrade('super_leaf', 231) },
            canAfford() {
                if (hasUpgrade('super_leaf', 281) || hasMilestone('propeller_mushroom', 1)) return true
                else if (hasUpgrade('super_leaf', 241)) return false
                else return true
            },
            effect() {
                return player.coin.pink_key_coin.max(1).log(10).pow(4).div(1e11).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        251: {
            title: "Balanced flying",
            description: "You can both buy SLST 2,1 and 2,2",
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(2.16e9),
            unlocked() { return hasUpgrade('super_leaf', 241) || hasUpgrade('super_leaf', 242) },
        },
        261: {
            title: "Keep flying! Hold Y!",
            description: "You can both buy SLST 3,1 and 3,2",
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(4.01e10),
            unlocked() { return hasUpgrade('super_leaf', 251) },
        },
        271: {
            title: "The swinging animation",
            description: "Multiply Super Leaves based on Cleared Courses.<br>Lock 8,2 and 8,3",
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(1.33e13),
            unlocked() { return hasUpgrade('super_leaf', 261) },
            canAfford() {
                if (hasUpgrade('super_leaf', 311) || hasMilestone('propeller_mushroom', 1)) return true
                else if (hasUpgrade('super_leaf', 272)) return false
                else if (hasUpgrade('super_leaf', 273)) return false
                else return true
            },
            effect() {
                return player.points.max(1).log(10).div(1000).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        272: {
            title: "The anti-gravity at night",
            description: "248x SL Skill Points gain.<br>Lock 8,1 and 8,3",
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(7e10),
            unlocked() { return hasUpgrade('super_leaf', 261) },
            canAfford() {
                if (hasUpgrade('super_leaf', 311) || hasMilestone('propeller_mushroom', 1)) return true
                else if (hasUpgrade('super_leaf', 271)) return false
                else if (hasUpgrade('super_leaf', 273)) return false
                else return true
            },
        },
        273: {
            title: "It looks light!",
            description() { return `${f(51200)}x SL Skill Points gain.<br>Lock 8,1 and 8,2` },
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(5.88e14),
            unlocked() { return hasUpgrade('super_leaf', 261) },
            canAfford() {
                if (hasUpgrade('super_leaf', 311) || hasMilestone('propeller_mushroom', 1)) return true
                else if (hasUpgrade('super_leaf', 271)) return false
                else if (hasUpgrade('super_leaf', 272)) return false
                else return true
            },
        },
        281: {
            title: "Fly together!",
            description: "You can both buy SLST 5,1 and 5,2",
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(8.99e16),
            unlocked() { return hasUpgrade('super_leaf', 271) || hasUpgrade('super_leaf', 272) || hasUpgrade('super_leaf', 273) },
        },
        291: {
            title: "Look like a pilot",
            description: "Unlock 6th Super Leaf upgrade.",
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(1.14e20),
            unlocked() { return hasUpgrade('super_leaf', 281) },
        },
        301: {
            title: "Still flying?",
            description() { return `${f(1e15)}x SL Skill Points gain.<br>Lock 11,2 and 11,3` },
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(2e33),
            unlocked() { return hasUpgrade('super_leaf', 35) && hasUpgrade('super_leaf', 291) },
            canAfford() {
                if (hasUpgrade('super_leaf', 41) || hasMilestone('propeller_mushroom', 1)) return true
                else if (hasUpgrade('super_leaf', 302)) return false
                else if (hasUpgrade('super_leaf', 303)) return false
                else return true
            },
        },
        302: {
            title: "Fly 200-block high",
            description() { return `${f(100021)}x Super Leaf gain.<br>Lock 11,1 and 11,3` },
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(4.444e48),
            unlocked() { return hasUpgrade('super_leaf', 35) && hasUpgrade('super_leaf', 291) },
            canAfford() {
                if (hasUpgrade('super_leaf', 41) || hasMilestone('propeller_mushroom', 1)) return true
                else if (hasUpgrade('super_leaf', 301)) return false
                else if (hasUpgrade('super_leaf', 303)) return false
                else return true
            },
        },
        303: {
            title: "Fly in space",
            description() { return `${f(1e20)}x SL Skill Points gain.<br>Lock 11,1 and 11,2` },
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(3.333e53),
            unlocked() { return hasUpgrade('super_leaf', 35) && hasUpgrade('super_leaf', 291) },
            canAfford() {
                if (hasUpgrade('super_leaf', 41) || hasMilestone('propeller_mushroom', 1)) return true
                else if (hasUpgrade('super_leaf', 301)) return false
                else if (hasUpgrade('super_leaf', 302)) return false
                else return true
            },
        },
        311: {
            title: "One hit, 100 enemies",
            description: "You can both buy SLST 8,1 8,2 and 8,3.",
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(3.33e58),
            unlocked() { return hasUpgrade('super_leaf', 301) || hasUpgrade('super_leaf', 302) || hasUpgrade('super_leaf', 303) },
        },
        321: {
            title: "Different flying",
            description: "Unlock a new layer.",
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(1e61),
            unlocked() { return hasUpgrade('super_leaf', 311) },
        },
        331: {
            title: "Back to fly",
            description: "Unlock 3rd Cape Feather upgrade.",
            currencyDisplayName: "SL Skill Points",
            currencyInternalName: "slsp",
            currencyLayer: "super_leaf",
            cost: new Decimal(1e100),
            unlocked() { return hasUpgrade('super_leaf', 41) && hasUpgrade('super_leaf', 311) },
        },
    },
    clickables: {
        11: {
            display() {
                return "Force an SL reset to respec SL skill tree."
            },
            tooltip: "You can't get SLSP back, you can only respec when you can do a SL reset",
            unlocked() {
                return hasUpgrade("super_leaf", 15)
            },
            canClick() {
                return canReset(this.layer)
            },
            onClick() {
                player.super_leaf.upgrades.length
                for (let i = 0; i < player.super_leaf.upgrades.length; i++) {
                    if (+player.super_leaf.upgrades[i] > 196) {
                        player.super_leaf.upgrades.splice(i, 1);
                        i--;
                    }
                }
                if (canReset(this.layer)) doReset(this.layer)
            },
            style: {
                'min-height': '30px',
                'width': '480px',
                'border-radius': '5px',
                'font-size': '20px',
            },
        },
    },
    milestones: {
        0: {
            requirementDescription: "Get 1 Super Leaf",
            effectDescription: "Autobuy Super Mushroom, Fire Flower and Invincible Star upgrades. Passive gain 100% Fire Flowers per second. Autobuy Invincible Stars and buy max. 2x 1UP Mushroom and Big Mushroom gain.",
            done() { return player.super_leaf.points.gte(1) },
        },
        1: {
            requirementDescription: "Get 2 Super Leaves",
            effectDescription: "Passive gain 1000% Bouncy Ball and Broken Brick per second forever. 1.25x Broken Hard Brick and Broken Ice Block gain.",
            done() { return player.super_leaf.points.gte(2) },
        },
        2: {
            requirementDescription: "Get 3 Super Leaves",
            effectDescription: "Autobuy BBF buyables forever. 10x Broken Hard Brick and Broken Ice Block gain.",
            done() { return player.super_leaf.points.gte(3) },
        },
        3: {
            requirementDescription: "Get 4 Super Leaves",
            effectDescription: "Autobuy Invincible Star upgrades, auto complete IS and 1UP challenges, forever.",
            done() { return player.super_leaf.points.gte(4) },
        },
        4: {
            requirementDescription: "Get 5 Super Leaves",
            effectDescription: "10x 1UP Mushroom, Bouncy ball Flower and Big Mushroom.",
            done() { return player.super_leaf.points.gte(5) },
        },
        5: {
            requirementDescription: "Get 6 Super Leaves",
            effectDescription: "Passive gain 100% 1UP Mushroom, Bouncy ball Flower and Big Mushroom per second forever. Keep IS milestones on row 4 reset.",
            done() { return player.super_leaf.points.gte(5.999999) },
        },
        6: {
            requirementDescription() { return `Get ${formatWhole(300)} Super Leaves` },
            effectDescription: "Autobuy 1UP Mushroom upgrades.",
            done() { return player.super_leaf.points.gte(300) },
        },
        7: {
            requirementDescription() { return `Get ${formatWhole(1000)} Super Leaves` },
            effectDescription: "Autobuy Bouncy Ball Flower upgrades.",
            done() { return player.super_leaf.points.gte(1000) },
        },
        8: {
            requirementDescription() { return `Get ${formatWhole(2000)} Super Leaves` },
            effectDescription: "Keep row 3 milestones on row 4 reset.",
            done() { return player.super_leaf.points.gte(2000) },
        },
        9: {
            requirementDescription() { return `Get ${formatWhole(20000)} Super Leaves` },
            effectDescription: "Autobuy Big Mushroom upgrades.",
            done() { return player.super_leaf.points.gte(20000) },
        },
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + format(player.oneup_mushroom.points) + ` 1UP mushrooms`],
        ["display-text", () => `Your best amount of Super Leaf is ` + format(player.super_leaf.best)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Super Leaf is from Super Mario Bros. 3. (1988, FC/NES) <br> The main ability of this kind of power-up is flying.`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]
                ]

            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "SL Skill Tree": {
                unlocked() { return hasUpgrade('super_leaf', 15) },
                content: [
                    ["blank", "15px"],
                    ["display-text", () => "You have <h2 style='color: #f83a11; text-shadow: 0 0 10px #f83a11'>" + format(player.super_leaf.slsp) + "</h2> SL Skill Points."],
                    ["display-text", () => "(<h2 style='color: #f83a11; text-shadow: 0 0 10px #f83a11'>" + "+" + format(tmp.super_leaf.multSLSP) + "</h2>/sec)"],
                    "blank",
                    "clickables",
                    "blank",
                    ["upgrades", [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]]
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #f83a11, black)',
                        'border-color': '#f83a11',
                        'color': 'white',
                    }
                },
            },
        },
    },
})
// 第九层：斗篷羽毛
addLayer("cape_feather", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            ce: new Decimal(0)
        }
    },

    color: "#FCBF02",                       // The color for this layer, which affects many elements.
    resource: "Cape Feathers",            // The name of this layer's main prestige resource.
    row: 3,                                 // The row this layer is on (0 is the first row).
    position: 1,
    branches: ["big_mushroom"],
    symbol: "CF",
    baseResource: "Big Mushrooms",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.big_mushroom.points },  // A function to return the current amount of baseResource.

    requires: new Decimal(1e86),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "static",                         // Determines the formula used for calculating prestige currency.
    exponent: 5,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        return new Decimal(1)               // Factor in any bonuses multiplying gain here.
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },
    directMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        if (hasUpgrade('boomerang_flower', 32)) mult = mult.times(1e9)
        return mult
    },

    hotkeys: [
        { key: "C", description: "Shift+C: Reset for Cape Feathers", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],

    layerShown() { return hasAchievement('achievements', 72) },          // Returns a bool for if this layer's node should be visible in the tree.

    canBuyMax() { return hasUpgrade("cape_feather", 33) },

    autoUpgrade() { return hasMilestone('propeller_mushroom', 3) },
    autoPrestige() { return hasMilestone('propeller_mushroom', 3) },
    resetsNothing() { return hasMilestone('propeller_mushroom', 3) },

    doReset(resettingLayer) {
        if (layers[resettingLayer].row >= 12) return undefined
        else if (layers[resettingLayer].row > layers[this.layer].row) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('propeller_mushroom', 7)) {
                kept.push("milestones")
            }
            if (hasMilestone('master_sword', 17)) {
                kept.push("upgrades")
            }

            layerDataReset(this.layer, kept)
        }
    },

    automate() {
        if (player.cape_feather.ce.lte(0)) return
        if (hasMilestone('propeller_mushroom', 3)
        ) {
            if (player.cape_feather.ce) {
                hasMilestone('propeller_mushroom', 3) ? setBuyableAmount("cape_feather", 11, tmp.cape_feather.buyables[11].canAfford ? player.cape_feather.ce.log(2.75).floor().add(1) : getBuyableAmount("cape_feather", 11)) : buyBuyable("cape_feather", 11)
                hasMilestone('propeller_mushroom', 3) ? setBuyableAmount("cape_feather", 12, tmp.cape_feather.buyables[12].canAfford ? player.cape_feather.ce.log(6.75).pow(1 / 1.15).floor().add(1) : getBuyableAmount("cape_feather", 12)) : buyBuyable("cape_feather", 12)
            }
        }
    },

    multCE() {
        let multCE = new Decimal(1)
        if (hasUpgrade('cape_feather', 15)) multCE = multCE.times(player.cape_feather.points)
        if (hasUpgrade('cape_feather', 21)) multCE = multCE.times(upgradeEffect('cape_feather', 21))
        if (hasUpgrade('cape_feather', 23)) multCE = multCE.times(upgradeEffect('cape_feather', 23))
        if (hasUpgrade('cape_feather', 24)) multCE = multCE.times(buyableEffect('cape_feather', 12))
        if (hasUpgrade('cape_feather', 32)) multCE = multCE.times(upgradeEffect('cape_feather', 32))
        if (hasMilestone('cape_feather', 2)) multCE = multCE.times(1e10)
        if (hasMilestone('propeller_mushroom', 0)) multCE = multCE.times(100)
        if (hasUpgrade('propeller_mushroom', 12) && !inChallenge('super_hammer', 11)) multCE = multCE.times(tmp.yoshi_egg.yoshiEff.red2)
        if (inChallenge('propeller_mushroom', 11)) multCE = multCE.times(0)
        return multCE
    },
    update(diff) {
        if (hasUpgrade('cape_feather', 15)) player.cape_feather.ce = player.cape_feather.ce.add(tmp.cape_feather.multCE.times(diff))
    },

    upgrades: {
        11: {
            title: "Useful cape",
            effBase() {
                let CFU1base = new Decimal(1)
                if (hasUpgrade('cape_feather', 15)) CFU1base = CFU1base.times(buyableEffect('cape_feather', 11)).max(1e50)
                else CFU1base = CFU1base.times(1e50)
                return CFU1base
            },
            hardcap() {
                let CFU1hardcap = new Decimal("1e2000")
                if (hasUpgrade('cape_feather', 31)) CFU1hardcap = new Decimal("1e5000")
                if (hasUpgrade('propeller_mushroom', 13)) CFU1hardcap = new Decimal("1e30000")
                if (hasUpgrade('propeller_mushroom', 23)) CFU1hardcap = new Decimal("e1.25e10")
                return CFU1hardcap
            },
            description() {
                let des = `Multiply Big Mushroom gain based on Cape Feather.<br>Formula: ${f(this.effBase())}^x (Hardcap at ${f(this.hardcap())})`
                return des
            },
            cost: new Decimal(4),
            unlocked() { return hasMilestone('cape_feather', 1) },
            effect() {
                let eff = Decimal.pow(this.effBase(), player.cape_feather.points).min(this.hardcap())
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        12: {
            title: "Gliding",
            description: "Unlock 16th Super Leaf upgrade.",
            cost: new Decimal(6),
            unlocked() { return hasUpgrade('cape_feather', 11) },
        },
        13: {
            title: "So high!",
            description: "Make the IS effect better.",
            cost: new Decimal(6),
            unlocked() { return hasUpgrade('super_leaf', 331) },
        },
        14: {
            title: "Spin gliding",
            description: "Make the IS effect better again.",
            currencyDisplayName: "Coins",
            currencyInternalName: "points",
            currencyLayer: "coin",
            cost: new Decimal("1e1290000"),
            unlocked() { return hasUpgrade('cape_feather', 13) },
        },
        15: {
            title: "Accelerate to max again",
            description: "Unlock a new subtab.",
            currencyDisplayName: "Invincible Stars",
            currencyInternalName: "points",
            currencyLayer: "invincible_star",
            cost: new Decimal(116),
            unlocked() { return hasUpgrade('cape_feather', 14) },
        },
        21: {
            title: "Accelerate to max again",
            description: "Multiply Cape Essence based on Invincible Star.",
            currencyDisplayName: "Super Mushrooms",
            currencyInternalName: "points",
            currencyLayer: "super_mushroom",
            cost: new Decimal("1e653100"),
            unlocked() { return hasUpgrade('cape_feather', 15) },
            effect() {
                return player.invincible_star.points.times(500).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        22: {
            title: "Different animation",
            description: "Make the softcap of 1st Bouncy Ball buyable weaker again.",
            currencyDisplayName: "Fire Flowers",
            currencyInternalName: "points",
            currencyLayer: "fire_flower",
            cost: new Decimal("1e70188"),
            unlocked() { return hasUpgrade('cape_feather', 21) },
        },
        23: {
            title: "Fast fly in space",
            description: "Multiply Cape Essence by OoMs of Cleared Courses.",
            cost: new Decimal(7),
            unlocked() { return hasUpgrade('cape_feather', 22) },
            effect() {
                return player.points.max(1).log(10).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        24: {
            title: "Higher than max",
            description: "Unlock 2nd Cape Feather buyable.",
            currencyDisplayName: "1UP Mushrooms",
            currencyInternalName: "points",
            currencyLayer: "oneup_mushroom",
            cost: new Decimal("1e6737"),
            unlocked() { return hasUpgrade('cape_feather', 23) },
        },
        25: {
            title: "Invincible ability",
            description: "Multiply Broken Ice Blocks based on Cape Essence.",
            currencyDisplayName: "Invincible Stars",
            currencyInternalName: "points",
            currencyLayer: "invincible_star",
            cost: new Decimal(234),
            unlocked() { return hasUpgrade('cape_feather', 24) },
            effect() {
                return player.cape_feather.ce.pow(25).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        31: {
            title: "When flying",
            description() { return `Remove 1st hardcap of 1st Cape Feather upgrade. 2nd hardcap at ${f('1e5000')}` },
            cost: new Decimal(9),
            unlocked() { return hasUpgrade('cape_feather', 25) },
        },
        32: {
            title: "But still will take any damage",
            description: "Cape Essence gain is multiplied by CF^2.",
            cost: new Decimal(9),
            unlocked() { return hasUpgrade('cape_feather', 31) },
            effect() {
                return player.cape_feather.points.pow(2).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        33: {
            title: "Drop to ground",
            description: "You can buy max Cape Feathers.",
            cost: new Decimal(9),
            unlocked() { return hasUpgrade('cape_feather', 32) },
        },
        34: {
            title: "Like groundpound!",
            description: "You will find a secret upgrade while you are in the 1st 1UP Mushroom challenge.",
            cost: new Decimal(9),
            unlocked() { return hasUpgrade('cape_feather', 33) },
        },
        35: {
            title: "Best friends forever",
            description: "Unlock the last layer of the 4th row.",
            cost: new Decimal(9),
            unlocked() { return hasUpgrade('super_leaf', 42) || hasUpgrade(this.layer, this.id) },
        },
        // Look in the upgrades docs to see what goes here!
    },
    milestones: {
        0: {
            requirementDescription: "Get 2 Cape Feathers",
            effectDescription() { return `${f(1e200)}x Broken Brick gain.` },
            done() { return player.cape_feather.points.gte(2) },
        },
        1: {
            requirementDescription: "Get 4 Cape Feathers",
            effectDescription: "Unlock 1st Cape Feather upgrade.",
            done() { return player.cape_feather.points.gte(4) },
        },
        2: {
            requirementDescription: "Get 8 Cape Feathers",
            effectDescription() { return `${f(1e10)}x Cape Essence gain.` },
            done() { return player.cape_feather.points.gte(8) },
        },
    },
    buyables: {
        11: {
            title: "More powerful flying",
            cost(x) { return new Decimal(2.75).pow(x) },
            display() {
                return ` Make 1st Cape Feather formula better. <br>
                Formula: ${format(this.effect())}^x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Cape Essence`
            },
            canAfford() { return player[this.layer].ce.gte(this.cost()) },
            buy() {
                player[this.layer].ce = player[this.layer].ce.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                return new Decimal(1e50).times(Decimal.pow(Decimal.sqrt(100000), x))
            },
            unlocked() { return hasUpgrade('cape_feather', 15) }
        },
        12: {
            title: "A powerful drop",
            cost(x) { return new Decimal(6.75).pow(x.max(1).pow(1.15)) },
            display() {
                return ` Get more Cape Essence. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Cape Essence`
            },
            canAfford() { return player[this.layer].ce.gte(this.cost()) },
            buy() {
                player[this.layer].ce = player[this.layer].ce.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                if (hasUpgrade('propeller_mushroom', 24)) return Decimal.pow(3.75, x).pow(2)
                else return Decimal.pow(3.75, x)
            },
            unlocked() { return hasUpgrade('cape_feather', 24) }
        },
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + formatWhole(player.big_mushroom.points) + ` Big Mushrooms`],
        ["display-text", () => `Your best amount of Cape Feather is ` + formatWhole(player.cape_feather.best)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Cape Feather is a kind of power-ups in Super Mario World (1991, SFC/SNES). <br> Players can fly with capes, and with wounderful abilities.`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]

            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "Cape Essence": {
                unlocked() { return hasUpgrade('cape_feather', 15) },
                content: [
                    ["blank", "15px"],
                    ["display-text", () => "You have <h2 style='color: #fcbf02; text-shadow: 0 0 10px #fcbf02'>" + format(player.cape_feather.ce) + "</h2> Cape Essence."],
                    ["display-text", function () { return `(${textStyle_h2("+" + f(tmp.cape_feather.multCE), 'fcbf02')}/s)` }],
                    ["display-text", function () { return `You gain Cape Essence per second based on amount of Cape Feathers.` }],
                    "blank",
                    "buyables",
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #fcbf02, #fcbf81)',
                        'border-color': '#fcbf02',
                        'color': 'black',
                    }
                },
            },
        },
    },
})
// 第十层：耀西蛋
addLayer("yoshi_egg", {
    componentStyles: {
        "clickable"() {
            return {
                'margin-left': '-7px',
                'margin-right': '-7px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            yoshi: new Decimal(0),
            red_yoshi: new Decimal(0),
        }
    },
    symbol: "YE",
    color: "#00D800",                       // The color for this layer, which affects many elements.
    resource: "Yoshi Eggs",            // The name of this layer's main prestige resource.
    row: 3,                                 // The row this layer is on (0 is the first row).
    position: 2,
    baseResource: "Bouncy Ball Flowers",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.bouncy_ball_flower.points },  // A function to return the current amount of baseResource.

    requires: new Decimal("1e13720"),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.
    softcap: new Decimal("1e60000000"),
    softcapPower: new Decimal(0.25),

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 2.5e-4,                          // "normal" prestige gain is (currency^exponent).
    branches: ["bouncy_ball_flower"],
    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        if (hasUpgrade('yoshi_egg', 11)) mult = mult.times(5)
        if (hasMilestone('yoshi_egg', 0)) mult = mult.times(tmp.yoshi_egg.yoshiEff.green1)
        if (hasUpgrade('yoshi_egg', 13)) mult = mult.times(5)
        if (hasUpgrade('yoshi_egg', 15)) mult = mult.times(upgradeEffect('yoshi_egg', 15))
        if (hasUpgrade('yoshi_egg', 21)) mult = mult.times(upgradeEffect('yoshi_egg', 21))
        if (hasUpgrade('yoshi_egg', 22)) mult = mult.times(upgradeEffect('yoshi_egg', 22))
        if (hasUpgrade('yoshi_egg', 24)) mult = mult.times(100)
        if (hasUpgrade('yoshi_egg', 33)) mult = mult.times(upgradeEffect('yoshi_egg', 33))
        if (hasChallenge('propeller_mushroom', 11)) mult = mult.times(challengeEffect('propeller_mushroom', 11))
        if (hasUpgrade('propeller_mushroom', 22)) mult = mult.times(1e100)
        if (player.propeller_mushroom.best.gte(1)) mult = mult.times(tmp.propeller_mushroom.effect)
        return mult
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },

    layerShown() { return hasAchievement('achievements', 81) },          // Returns a bool for if this layer's node should be visible in the tree.
    passiveGeneration() { return hasMilestone('propeller_mushroom', 5) },
    autoUpgrade() { return hasMilestone('propeller_mushroom', 6) },
    doReset(resettingLayer) {
        if (layers[resettingLayer].row >= 12) return undefined
        else if (layers[resettingLayer].row > layers[this.layer].row) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('propeller_mushroom', 7)) {
                kept.push("milestones")
            }
            if (hasMilestone('master_sword', 18)) {
                kept.push("upgrades")
            }

            layerDataReset(this.layer, kept)
        }
    },
    hotkeys: [
        { key: "y", description: "Y: Reset for Yoshi Eggs", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],
    update(diff) {
        multY = new Decimal(1)
        if (hasUpgrade('yoshi_egg', 34)) multY = multY.times(player.yoshi_egg.points)
        if (hasUpgrade('yoshi_egg', 34)) player.yoshi_egg.yoshi = player.yoshi_egg.yoshi.add(multY.times(diff))
        if (hasUpgrade('yoshi_egg', 34)) player.yoshi_egg.red_yoshi = player.yoshi_egg.red_yoshi.add(multY.times(diff))
    },
    upgrades: {
        11: {
            title: "A dragon?",
            description: "Quintuple Yoshi Egg gain.",
            cost: new Decimal(5),
            unlocked() { return true },
        },
        12: {
            title: "Or a turtle?",
            description: "Unlock 2 buttons that you can incubate 10 Yoshi Eggs by clicking once.",
            cost: new Decimal(85),
            unlocked() { return hasUpgrade('yoshi_egg', 11) },
        },
        13: {
            title: "Shape of its nose",
            description: "Quintuple Yoshi Egg gain, again",
            cost: new Decimal(236),
            unlocked() { return hasUpgrade('yoshi_egg', 12) },
        },
        14: {
            title: "Like a ball",
            description: "Unlock 4 buttons that you can incubate 50% or 100% of your Yoshi Eggs by clicking once.",
            cost: new Decimal(1234),
            unlocked() { return hasUpgrade('yoshi_egg', 13) },
        },
        15: {
            title: "Shell on its back",
            description: "Multiply Yoshi Egg based on Big Mushroom",
            currencyDisplayName: "Fire Flowers",
            currencyInternalName: "points",
            currencyLayer: "fire_flower",
            cost: new Decimal("1e475000"),
            unlocked() { return hasUpgrade('yoshi_egg', 14) },
            effect() {
                return player.big_mushroom.points.max(10).log(10).max(10).log(10).pow(2.5)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        21: {
            title: "The next generation",
            description: "Make the first Yoshi's effect better.",
            cost: new Decimal(256000),
            unlocked() { return hasUpgrade('yoshi_egg', 15) },
            effect() {
                return player.yoshi_egg.yoshi.max(10).log(10)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        22: {
            title: "The next generation, but yoshis are red",
            description: "Multiply Yoshi Egg based on Red Yoshi",
            cost: new Decimal(6663330),
            unlocked() { return hasUpgrade('yoshi_egg', 21) },
            effect() {
                return player.yoshi_egg.red_yoshi.max(5).log(5)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        23: {
            title: "The next generation, but yoshis are red",
            description: "Unlock the second Yoshi's effect.",
            cost: new Decimal(250000000),
            unlocked() { return hasUpgrade('yoshi_egg', 22) },
        },
        24: {
            title: "Cape feather flying affacts yoshi",
            description: "100x Yoshi Egg gain.",
            cost: new Decimal(1.777e10),
            unlocked() { return hasUpgrade('yoshi_egg', 23) },
        },
        25: {
            title: "How to fly straight?",
            description: "Unlock a new layer at layer 5.",
            cost: new Decimal(1e14),
            unlocked() { return hasUpgrade('yoshi_egg', 24) },
        },
        31: {
            title: "Two-yoshi limit",
            description: "Unlock a Propeller Mushroom challenge. (Keep this upg on reset)",
            cost: new Decimal(1e119),
            unlocked() { return hasUpgrade('propeller_mushroom', 15) },
        },
        32: {
            title: "Red Yoshi+Fire Flower",
            description: "Remove 1st IS challenge effect hardcap.",
            cost: new Decimal(1e186),
            unlocked() { return hasUpgrade('yoshi_egg', 31) },
        },
        33: {
            title: "Yoshi's skills",
            description: "Multiply Yoshi gain based on SL Skill Points.",
            cost: new Decimal('1e321'),
            unlocked() { return hasUpgrade('yoshi_egg', 32) },
            effect() {
                return player.super_leaf.slsp.max(1).log(10).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        34: {
            title: "Condition of",
            description: "Passive gain Yoshi and Red Yoshi per second.",
            cost: new Decimal("1e830"),
            unlocked() { return hasUpgrade('yoshi_egg', 33) },
        },
        35: {
            title: "Riding Yoshi",
            description() { return `${f(1e10)}x Propeller Mushroom gain.` },
            cost: new Decimal("1e1630"),
            unlocked() { return hasUpgrade('yoshi_egg', 34) || hasUpgrade(this.layer, this.id) },
        },
        // Look in the upgrades docs to see what goes here!
    },
    milestones: {
        0: {
            requirementDescription: "Get 3 Yoshi Eggs",
            effectDescription: "Unlock the subtab \"Yoshi\".",
            done() { return player.yoshi_egg.points.gte(3) },
        },
        1: {
            requirementDescription() { return `Get ${f('1e345')} Yoshi Eggs` },
            effectDescription() {
                let des = 'Effect will shown after unlocking Propeller Mushroom layer.'
                if (tmp.propeller_mushroom.layerShown) des = '^100 6th Propeller Mushroom upgrade effect.'
                return des
            },
            done() { return player.yoshi_egg.points.gte('1e345') },
        },
    },
    clickables: {
        11: {
            title: "Stick out tongues",
            display() {
                return "Incubate 1 Yoshi Egg to get 1 Yoshi."
            },
            canClick() { return player.yoshi_egg.points.gte(1) },
            onClick() {
                return player.yoshi_egg.points = player.yoshi_egg.points.sub(1),
                    player.yoshi_egg.yoshi = player.yoshi_egg.yoshi.add(1)
            },
            unlocked() { return hasMilestone('yoshi_egg', 0) },
        },
        12: {
            title: "Fire from its mouth?",
            display() {
                return "Incubate 1 Yoshi Egg to get 1 Red Yoshi."
            },
            canClick() { return player.yoshi_egg.points.gte(1) },
            onClick() {
                return player.yoshi_egg.points = player.yoshi_egg.points.sub(1),
                    player.yoshi_egg.red_yoshi = player.yoshi_egg.red_yoshi.add(1)
            },
            unlocked() { return hasMilestone('yoshi_egg', 0) },
            style() { if (player.yoshi_egg.points.gte(1)) return { 'background-color': '#f70000' } },
        },
        21: {
            title: "Lick the key",
            display() {
                return "Incubate 10 Yoshi Eggs to get 10 Yoshis."
            },
            canClick() { return player.yoshi_egg.points.gte(10) },
            onClick() {
                return player.yoshi_egg.points = player.yoshi_egg.points.sub(10),
                    player.yoshi_egg.yoshi = player.yoshi_egg.yoshi.add(10)
            },
            unlocked() { return hasUpgrade('yoshi_egg', 12) },
        },
        22: {
            title: "Triple fire attack",
            display() {
                return "Incubate 10 Yoshis Egg to get 10 Red Yoshis."
            },
            canClick() { return player.yoshi_egg.points.gte(10) },
            onClick() {
                return player.yoshi_egg.points = player.yoshi_egg.points.sub(10),
                    player.yoshi_egg.red_yoshi = player.yoshi_egg.red_yoshi.add(10)
            },
            unlocked() { return hasUpgrade('yoshi_egg', 12) },
            style() { if (this.canClick()) return { 'background-color': '#f70000' } },
        },
        31: {
            title: "Longest tongue",
            display() {
                return "Incubate 50% of Yoshi Eggs to get Yoshis."
            },
            canClick() { return player.yoshi_egg.points.gte(1) },
            onClick() {
                return player.yoshi_egg.yoshi = player.yoshi_egg.yoshi.add(player.yoshi_egg.points.div(2).floor()),
                    player.yoshi_egg.points = player.yoshi_egg.points.div(2).ceil()
            },
            unlocked() { return hasUpgrade('yoshi_egg', 14) },
        },
        32: {
            title: "Flying fire",
            display() {
                return "Incubate 50% of Yoshi Eggs to get Red Yoshis."
            },
            canClick() { return player.yoshi_egg.points.gte(1) },
            onClick() {
                return player.yoshi_egg.red_yoshi = player.yoshi_egg.red_yoshi.add(player.yoshi_egg.points.div(2).floor()),
                    player.yoshi_egg.points = player.yoshi_egg.points.div(2).ceil()
            },
            unlocked() { return hasUpgrade('yoshi_egg', 14) },
            style() { if (this.canClick()) return { 'background-color': '#f70000' } },
        },
        41: {
            title: "Licking through walls",
            display() {
                return "Incubate 100% of Yoshi Eggs to get Yoshis."
            },
            canClick() { return player.yoshi_egg.points.gte(1) },
            onClick() {
                return player.yoshi_egg.yoshi = player.yoshi_egg.yoshi.add(player.yoshi_egg.points),
                    player.yoshi_egg.points = new Decimal(0)
            },
            unlocked() { return hasUpgrade('yoshi_egg', 14) },
        },
        42: {
            title: "Floating jumps",
            display() {
                return "Incubate 100% of Yoshi Eggs to get Red Yoshis."
            },
            canClick() { return player.yoshi_egg.points.gte(1) },
            onClick() {
                return player.yoshi_egg.red_yoshi = player.yoshi_egg.red_yoshi.add(player.yoshi_egg.points),
                    player.yoshi_egg.points = new Decimal(0)
            },
            unlocked() { return hasUpgrade('yoshi_egg', 14) },
            style() { if (this.canClick()) return { 'background-color': '#f70000' } },
        },
    },

    yoshiEff: {
        green1() {
            let eff = player.yoshi_egg.yoshi.max(4).log(4).times(upgradeEffect('yoshi_egg', 21))
            return eff
        },
        green2() {
            let y = player.yoshi_egg.yoshi
            let eff = Decimal.pow(1.1, y.min(y.max(d(1e15).root(2)).log(100).sub(2.75).times(d(1e15).root(2))).max(1))
            return eff
        },
        red1() {
            let eff = Decimal.pow(1e35, player.yoshi_egg.red_yoshi.min(player.yoshi_egg.red_yoshi.max(d(100000).root(2)).log(10).sub(1.5).times(d(100000).root(2))).max(1))
            return eff
        },
        red2() {
            let eff = player.yoshi_egg.red_yoshi.max(1).pow(0.75)
            return eff
        },
    },

    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + formatWhole(player.bouncy_ball_flower.points) + ` Bouncy Ball Flowers`],
        ["display-text", () => `Your best amount of Yoshi Egg is ` + formatWhole(player.yoshi_egg.best)],
        ["display-text", () => `Softcap starts at ${f('e6e7')} Yoshi Eggs`],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Yoshi is from Super Mario World (1991, SFC/SNES). <br>Different color Yoshis have different abilities.`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "Yoshi": {
                unlocked() { return hasMilestone('yoshi_egg', 0) },
                content: [
                    ["blank", "15px"],
                    ["display-text", () => "You have <h2 style='color: #00f800; text-shadow: 0 0 10px #00f800'>"
                        + formatWhole(player.yoshi_egg.yoshi)
                        + "</h2> Yoshis.<br>You have <h2 style='color: #f80000; text-shadow: 0 0 10px #f80000'>"
                        + formatWhole(player.yoshi_egg.red_yoshi)
                        + "</h2> Red Yoshis."],
                    "clickables",
                    "buyables",
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #00d800, #00a000)',
                        'border-color': '#00d800',
                        'color': 'black',
                    }
                },
            },
            "Yoshi Effect": {
                unlocked() { return hasMilestone('yoshi_egg', 0) },
                content: [
                    ["blank", "15px"],
                    ["display-text", () => "You have <h2 style='color: #00f800; text-shadow: 0 0 10px #00f800'>"
                        + formatWhole(player.yoshi_egg.yoshi)
                        + "</h2> Yoshis."
                        + "<br>You gain <h2 style='color: #00f800; text-shadow: 0 0 10px #00f800'>"
                        + format(tmp.yoshi_egg.yoshiEff.green1)
                        + "x</h2> Yoshi Eggs. (Effect starts at 5 Yoshis)"
                    ],
                    ["display-text", function () {
                        let t = 'You gain <h2 style=\'color: #00f800; text-shadow: 0 0 10px #00f800\'>' + format(tmp.yoshi_egg.yoshiEff.green2) + `x</h2> Coins (softcap at ${f(d(1e15).root(2))} Yoshis)`
                        if (hasUpgrade('yoshi_egg', 23)) return t
                    }],
                    ["display-text", function () {
                        let t = `You have <h2 style='color: #f80000; text-shadow: 0 0 10px #f80000'>${formatWhole(player.yoshi_egg.red_yoshi)}</h2> Red Yoshis.<br>You gain <h2 style='color: #f80000; text-shadow: 0 0 10px #f80000'>${format(tmp.yoshi_egg.yoshiEff.red1)}x </h2>Fire Flowers. (Before the exponential caculation, softcap at ${f(d(100000).root(2))} Red Yoshis)`
                        return t
                    }],
                    ["display-text", function () {
                        let t = 'You gain <h2 style=\'color: #f80000; text-shadow: 0 0 10px #f80000\'>' + format(tmp.yoshi_egg.yoshiEff.red2)
                            + "x </h2>Cape Essence."
                        if (hasUpgrade('propeller_mushroom', 12)) return t
                    }],
                ],
            },
        },
    },
})
// 第十一层：螺旋桨蘑菇
addLayer("propeller_mushroom", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
        }
    },

    color: "#F45B00",                       // The color for this layer, which affects many elements.
    resource: "Propeller Mushrooms",            // The name of this layer's main prestige resource.
    row: 4,                                 // The row this layer is on (0 is the first row).
    position: 0,
    baseResource: "Super Leaves",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.super_leaf.points },  // A function to return the current amount of baseResource.
    branches: ["super_leaf"],
    symbol: "PM",

    requires: new Decimal("1e443"),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    effect() {
        return player[this.layer].best.times(10).times(player[this.layer].best.add(1).pow(5)).max(1)
        /*
        you should use this.layer instead of <layerID>
        Decimal.pow(num1, num2) is an easier way to do
        num1.pow(num2)
        */
    },
    effectDescription() {
        return `multiplying Super Leaf and Yoshi gain by ${textStyle_h2(format(tmp[this.layer].effect) + "x", 'f45b00')}`
        /*
        use format(num) whenever displaying a number
        */
    },

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.0025,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        if (hasUpgrade('propeller_mushroom', 11)) mult = mult.times(25)
        if (hasMilestone('propeller_mushroom', 5)) mult = mult.times(3)
        if (hasUpgrade('propeller_mushroom', 14)) mult = mult.times(upgradeEffect('propeller_mushroom', 14))
        if (hasUpgrade('yoshi_egg', 35)) mult = mult.times(1e10)
        if (hasUpgrade('super_bell', 14)) mult = mult.times(upgradeEffect('super_bell', 14))
        if (hasMilestone('master_sword', 0)) mult = mult.times("1e1000")
        return mult
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        let exp = new Decimal(1)
        if (hasUpgrade('propeller_mushroom', 32)) exp = exp.times(1.05)
        if (hasUpgrade('propeller_mushroom', 33)) exp = exp.times(1.05)
        if (hasUpgrade('propeller_mushroom', 34)) exp = exp.times(1.05)
        if (hasMilestone('super_hammer', 0)) exp = exp.times(1.1)
        return exp
    },
    directMult() {
        mult = new Decimal(1)
        if (hasUpgrade('super_hammer', 11)) mult = mult.times(upgradeEffect('super_hammer', 11))
        return mult
    },
    doReset(resettingLayer) {
        if (layers[resettingLayer].row >= 12) return undefined
        else if (layers[resettingLayer].row > layers[this.layer].row) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('master_sword', 0)) {
                kept.push("milestones")
            }
            if (hasMilestone('master_sword', 1)) {
                kept.push("challenges")
            }
            layerDataReset(this.layer, kept)
        }
    },

    layerShown() { return hasUpgrade('yoshi_egg', 25) || hasAchievement('achievements', 83) },          // Returns a bool for if this layer's node should be visible in the tree.

    passiveGeneration() { return hasUpgrade('super_hammer', 31) || hasMilestone('master_sword', 2) },
    autoUpgrade() { return hasMilestone('master_sword', 4) },
    upgrades: {
        11: {
            title: "Orange helmet",
            description: "25x Propeller Mushroom gain. (Pretty strong, right?)",
            cost: new Decimal(26),
            unlocked() { return hasMilestone('propeller_mushroom', 4) },
        },
        12: {
            title: "Fast landing",
            description: "Unlock Red Yoshi's 2nd effect.",
            cost: new Decimal(35300),
            unlocked() { return hasUpgrade('propeller_mushroom', 11) },
        },
        13: {
            title: "Fast raising",
            description() { return `Increase 1st CF upgrade's hardcap to ${f('1e30000')}` },
            cost: new Decimal(155443),
            unlocked() { return hasUpgrade('propeller_mushroom', 12) },
        },
        14: {
            title: "Drilling",
            description: "Multiply Propeller Mushroom gain based on OoM^2s of points.",
            cost: new Decimal(10000000),
            unlocked() { return hasUpgrade('propeller_mushroom', 13) },
            effect() {
                return player.points.max(1).log(10).max(1).log(10).max(1).pow(2)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        15: {
            title: "Propeller+Spike hat?",
            description: "Unlock 11th Yoshi upgrade.",
            cost: new Decimal(1.11e10),
            unlocked() { return hasUpgrade('propeller_mushroom', 14) },
        },
        21: {
            title: "Fly after wall kick",
            description() { return `${f(this.effect())}x Fire Flower gain` },
            cost: new Decimal(5e12),
            unlocked() { return hasUpgrade('propeller_mushroom', 15) },
            effect() {
                let eff = d('ee5')
                if (hasMilestone('yoshi_egg', 1)) eff = eff.pow(100)
                return eff
            }
        },
        22: {
            title: "Fly, spin",
            description() { return `${f('1e50')}x Yoshi Egg gain` },
            cost: new Decimal(3e74),
            unlocked() { return hasUpgrade('propeller_mushroom', 21) },
        },
        23: {
            title: "Slow pownd in",
            description() { return `Delay 1st CF upgrade's hardcap to ${f('e1.25e10')}` },
            cost: new Decimal(2.22e137),
            unlocked() { return hasUpgrade('propeller_mushroom', 22) },
        },
        24: {
            title: "Low gravity",
            description: "Square 2nd Cape Feather buyable's effect.",
            cost: new Decimal(1.79e308),
            unlocked() { return hasUpgrade('propeller_mushroom', 23) },
        },
        25: {
            title: "Meow!",
            description: "Unlock a new layer.",
            cost: new Decimal('1e355'),
            unlocked() { return hasUpgrade('propeller_mushroom', 24) || hasUpgrade(this.layer, this.id) },
        },
        31: {
            title: "Kamek turn bricks to Propeller Mushrooms and Coins",
            description: "Cube Coin gain. (You'll reach coin softcap)",
            cost: new Decimal("1e933"),
            unlocked() { return hasUpgrade('super_bell', 25) },
        },
        32: {
            title: "Driller",
            description: "^1.05 Propeller Mushroom gain.",
            cost: new Decimal("1e7430"),
            unlocked() { return hasUpgrade('propeller_mushroom', 31) },
        },
        33: {
            title: "Don't let it fly away!",
            description: "^1.05 Propeller Mushroom gain again.",
            cost: new Decimal("1e7855"),
            unlocked() { return hasUpgrade('propeller_mushroom', 32) },
        },
        34: {
            title: "Best power-up for PVP in NSMBU",
            description: "^1.05 Propeller Mushroom gain again^2.",
            cost: new Decimal("1e8305"),
            unlocked() { return hasUpgrade('propeller_mushroom', 33) },
        },
        35: {
            title: "1000 tons",
            description: "Unlock the last layer at row 5.",
            cost: new Decimal("1e8783"),
            unlocked() { return hasUpgrade('propeller_mushroom', 34) || hasUpgrade(this.layer, this.id) },
        },
        // Look in the upgrades docs to see what goes here!
    },
    hotkeys: [
        { key: "p", description: "P: Reset for Propeller Mushrooms", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],
    milestones: {
        0: {
            requirementDescription: "Get 1 Propeller Mushroom",
            effectDescription() { return `Keep 2nd, 3rd, 6th, 7th, 8th and 9th SL milestone and all row 1~3 passive generations, ${f(1e50)}x Big Mushroom, ${f(100)}x Cape Essence and 3x SL Skill Point gain.` },
            done() { return player.propeller_mushroom.points.gte(1) },
        },
        1: {
            requirementDescription: "Get 3 Propeller Mushrooms",
            effectDescription: "Unlock 18th Super Leaf upgrade and you can always buy every SLST upgrades.<br>Hint: You can get 2 Propeller Mushrooms on 2nd PM reset.",
            done() { return player.propeller_mushroom.points.gte(3) },
        },
        2: {
            requirementDescription: "Get 6 Propeller Mushrooms",
            effectDescription: "Autobuy Super Leaf upgrades and SLST. Passive gain 100% Super Leaf per second.",
            done() { return player.propeller_mushroom.points.gte(6) },
        },
        3: {
            requirementDescription: "Get 10 Propeller Mushrooms",
            effectDescription: "Autobuy Cape Feather and buyables, upgrades in CF layer.",
            done() { return player.propeller_mushroom.points.gte(10) },
        },
        4: {
            requirementDescription() { return `Get ${fw(16)} Propeller Mushrooms` },
            effectDescription: "100x SL Skill Point gain and unlock 1st PM upgrade.",
            done() { return player.propeller_mushroom.points.gte(16) },
        },
        5: {
            requirementDescription() { return `Get ${fw(1528)} Propeller Mushrooms` },
            effectDescription: "Passive gain 100% Yoshi Egg per second. Keep Super Leaf milestones on row 5 reset. Triple Propeller Mushroom gain.",
            done() { return player.propeller_mushroom.points.gte(1528) },
        },
        6: {
            requirementDescription() { return `Get ${fw(1e25)} Propeller Mushrooms` },
            effectDescription: "Autobuy Yoshi Egg upgrades.",
            done() { return player.propeller_mushroom.points.gte(1e25) },
        },
        7: {
            requirementDescription() { return `Get ${fw(1e90)} Propeller Mushrooms` },
            effectDescription: "Keep Cape Feather and Yoshi Egg milestones on row 5 resets.",
            done() { return player.propeller_mushroom.points.gte(1e90) },
        },
    },
    challenges: {
        11: {
            name: "Monty moles",
            challengeDescription: "No Cape Essence gain.",
            goalDescription() { return `Get ${f(this.goal())} Cleared Courses` },
            completionLimit() {
                let PMCCL = new Decimal(10)
                if (hasUpgrade('super_bell', 24)) PMCCL = new Decimal(50)
                return PMCCL
            },
            goal() { return Decimal.pow("1e10000000", (challengeCompletions('propeller_mushroom', 11))).times("1e2060000") },
            canComplete: function () {
                return player.points.gte(this.goal())
            },
            rewardBase() {
                let b = d(1e15)
                if (hasUpgrade('super_bell', 11)) b = d(1e50)
                return b
            },
            rewardDescription() { return `${f(this.rewardBase())}x Yoshi Eggs gain per each completion.` },
            rewardEffect() {
                let x = d(player.propeller_mushroom.challenges[11])
                return Decimal.pow(this.rewardBase(), x.max(0))
            },
            rewardDisplay() {
                let x = d(player.propeller_mushroom.challenges[11])
                return format(challengeEffect(this.layer, this.id)) + "x<br>Completions: "
                    + formatWhole(x)
                    + `/${fw(this.completionLimit())}`
            },
            unlocked() { return hasAchievement('achievements', 85) },
        },
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + formatWhole(player.super_leaf.points) + ` Super Leaves`],
        ["display-text", () => `Your best amount of Propeller Mushrooms is ` + formatWhole(player.propeller_mushroom.best)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">You can find Propeller Mushroom in NSMBU style. <br>It's good when you're in a battle in Multiplayer VS mode.`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "Challenges": {
                unlocked() { return hasAchievement('achievements', 85) },
                content: [
                    ["blank", "15px"],
                    "challenges",
                ]
            },
        },
    },
})
// 第十二层：超级铃铛
addLayer("super_bell", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            dimone: new Decimal(0),
            dimtwo: new Decimal(0),
            dimthree: new Decimal(0),
            dimfour: new Decimal(0),
            dimfive: new Decimal(0),
            dimsix: new Decimal(0),
            dimseven: new Decimal(0),
            dimeight: new Decimal(0),
        }
    },

    color: "#B6A017",                       // The color for this layer, which affects many elements.
    resource: "Super Bells",            // The name of this layer's main prestige resource.
    row: 4,                                 // The row this layer is on (0 is the first row).
    position: 1,
    branches: ['yoshi_egg'],
    symbol: "SB",

    baseResource: "Yoshi Eggs",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.yoshi_egg.points },  // A function to return the current amount of baseResource.

    requires: new Decimal("5e4809"),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.0018,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        if (hasUpgrade('super_bell', 12)) mult = mult.times(upgradeEffect('super_bell', 12))
        if (hasUpgrade('super_bell', 15)) mult = mult.times(player.super_bell.dimone.pow(0.5).max(1))
        if (hasUpgrade('super_bell', 23)) mult = mult.times(1e15)
        if (hasUpgrade('super_hammer', 12)) mult = mult.times(upgradeEffect('super_hammer', 12))
        if (hasMilestone('master_sword', 0)) mult = mult.times(1e100)
        return mult
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },

    layerShown() { return hasAchievement('achievements', 91) },          // Returns a bool for if this layer's node should be visible in the tree.
    passiveGeneration() { return hasUpgrade('super_hammer', 32) || hasMilestone('master_sword', 2) },
    autoUpgrade() { return hasMilestone('master_sword', 4) },
    doReset(resettingLayer) {
        if (layers[resettingLayer].row >= 12) return undefined
        else if (layers[resettingLayer].row > layers[this.layer].row) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('master_sword', 3)) {
                kept.push("milestones")
            }
            layerDataReset(this.layer, kept)
        }
    },
    hotkeys: [
        { key: "s", description: "S: Reset for Super Bells", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],
    upgrades: {
        11: {
            title: "Meow meow!",
            description() { return `Monty moles' base is raised to ${f(1e50)}.` },
            cost: new Decimal(25),
            unlocked() { return true },
        },
        12: {
            title: "Cat suit",
            description: "Multiply Super Bell gain based on Propeller Mushroom.",
            cost: new Decimal(166),
            unlocked() { return hasUpgrade('super_bell', 11) },
            effect() {
                return player.propeller_mushroom.points.max(10).log(10)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        13: {
            title: "Is the bell made of gold?",
            description() { return `If Cleared Courses are less than ${f('ee11')}, square Coin gain.` },
            cost: new Decimal(41088),
            unlocked() { return hasUpgrade('super_bell', 12) },
        },
        14: {
            title: "Not for Christmas",
            description: "Multiply Propeller Mushroom based on Super Bell.",
            cost: new Decimal(3.45e15),
            unlocked() { return hasUpgrade('super_bell', 13) },
            effect() {
                return player.super_bell.points.pow(2).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        15: {
            title: "Scratch attack",
            description: "Unlock Super Bell Dimensions.",
            cost: new Decimal(8.66e15),
            unlocked() { return hasUpgrade('super_bell', 14) },
        },
        21: {
            title: "A 2-block wide cat",
            description: "Unlock Super Bell Dimension shift.",
            cost: new Decimal(3e20),
            unlocked() { return hasUpgrade('super_bell', 15) },
        },
        22: {
            title: "Pounce attack",
            description: "Multiply 8th Super Bell Dimension gain based on Super Bell.",
            cost: new Decimal(1.23e24),
            unlocked() { return hasUpgrade('super_bell', 21) },
            effect() {
                return player.super_bell.points.max(10).log(10).pow(10)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        23: {
            title: "Better in PVP battles",
            description() { return `Multiply Super Bell gain by ${f(1e15)}x.` },
            cost: new Decimal(2.5e37),
            unlocked() { return hasUpgrade('super_bell', 22) },
        },
        24: {
            title: "Climb the wall",
            description: "Monty moles' completion limit is raised to 50.",
            cost: new Decimal(1e56),
            unlocked() { return hasUpgrade('super_bell', 23) },
        },
        25: {
            title: "Climb the tree",
            description: "Unlock 11th Propeller Mushroom upgrade.",
            cost: new Decimal(1e62),
            unlocked() { return hasUpgrade('super_bell', 24) },
        },
        31: {
            title: "Climb the semi-hitbox platform",
            description: "Increase Super Hammer gain.",
            cost: new Decimal("1e13500"),
            unlocked() { return hasUpgrade('super_hammer', 15) },
            effect() {
                let SBU11eff = new Decimal(3)
                if (hasUpgrade('super_bell', 34)) SBU11eff = SBU11eff.pow(upgradeEffect('super_bell', 34))
                return SBU11eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        32: {
            title: "Climb the tree faster",
            description: "Autobuy Super Bell buyables.",
            cost: new Decimal("1e17000"),
            unlocked() { return hasUpgrade('super_bell', 31) },
        },
        33: {
            title: "Scratch cancel",
            description: "Raise 2nd Super Bell buyable's sffect base to 4.17.",
            cost: new Decimal("1e18200"),
            unlocked() { return hasUpgrade('super_bell', 32) },
        },
        34: {
            title: "Scratch cancel with groundpounding",
            description: "Power 11th Super Bell upgrade's effect based on 1st SBD.",
            cost: new Decimal("1e18700"),
            unlocked() { return hasUpgrade('super_bell', 33) },
            effect() {
                return player.super_bell.dimone.max(10).log(10).div(40).max(1)
            },
            effectDisplay() { return "^" + format(upgradeEffect(this.layer, this.id)) },
        },
        35: {
            title: "Scratch + long jump",
            description: "Unlock a Super Hammer challenge.",
            cost: new Decimal("7.77e62777"),
            unlocked() { return hasUpgrade('super_bell', 34) },
        },
        // Look in the upgrades docs to see what goes here!
    },
    milestones: {
        0: {
            requirementDescription: "Get 5 Super Bell",
            effectDescription() { return `Extremely raise 1st Big Mushroom clickable's effect to ^${f(72535)}` },
            done() { return player.super_bell.points.gte(5) },
        },
    },
    buyables: {
        11: {
            title: "8th Super Bell Dimension",
            cost(x) { return new Decimal(2).pow(x) },
            display() {
                return ` Get 8th Super Bell Dimensions. <br>
                8th SBD get: ${format(this.effect())} <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Super Bells`
            },
            canAfford() { return player[this.layer].points.gte(this.cost()) },
            buy() {
                player[this.layer].points = player[this.layer].points.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                let SBDmult8 = new Decimal(1)
                if (hasUpgrade('super_bell', 22)) SBDmult8 = SBDmult8.times(upgradeEffect('super_bell', 22))
                if (hasChallenge('super_hammer', 11)) SBDmult8 = SBDmult8.times(1e100)
                return x.times(SBDmult8)
            },
            unlocked() { return hasUpgrade('super_bell', 15) }
        },
        12: {
            title: "Super Bell Dimension shift",
            cost(x) { return new Decimal(100000).pow(x.add(1)) },
            display() {
                let SBB2base = new Decimal(2)
                if (hasUpgrade('super_bell', 33)) SBB2base = new Decimal(4.17)
                return ` Multiply each SB Dimension production by ${format(SBB2base)} per every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} 1st Super Bell Dimensions`
            },
            canAfford() { return player[this.layer].dimone.gte(this.cost()) },
            buy() {
                player[this.layer].dimone = player[this.layer].dimone.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                let base = new Decimal(2)
                if (hasUpgrade('super_bell', 33)) base = new Decimal(4.17)
                return Decimal.pow(base, x).min("1e1000")
            },
            unlocked() { return hasUpgrade('super_bell', 21) }
        },
    },
    automate() {
        if (player.super_bell.points.lte(0)) return
        if (hasUpgrade('super_bell', 32)
        ) {
            if (player.super_bell.points) {
                hasUpgrade('super_bell', 32) ? setBuyableAmount("super_bell", 11, tmp.super_bell.buyables[11].canAfford ? player.super_bell.points.log(2).floor().add(1) : getBuyableAmount("super_bell", 11)) : buyBuyable("super_bell", 11)
            }
            if (player.super_bell.dimone) {
                hasUpgrade('super_bell', 32) ? setBuyableAmount("super_bell", 12, tmp.super_bell.buyables[12].canAfford ? player.super_bell.dimone.log(100000).floor() : getBuyableAmount("super_bell", 12)) : buyBuyable("super_bell", 12)
            }
        }
    },
    update(diff) {
        let multSBD = new Decimal(diff)
        if (hasUpgrade('super_bell', 21)) multSBD = multSBD.times(buyableEffect('super_bell', 12))
        player.super_bell.dimone = player.super_bell.dimone.add(player.super_bell.dimtwo.times(multSBD))
        player.super_bell.dimtwo = player.super_bell.dimtwo.add(player.super_bell.dimthree.times(multSBD))
        player.super_bell.dimthree = player.super_bell.dimthree.add(player.super_bell.dimfour.times(multSBD))
        player.super_bell.dimfour = player.super_bell.dimfour.add(player.super_bell.dimfive.times(multSBD))
        player.super_bell.dimfive = player.super_bell.dimfive.add(player.super_bell.dimsix.times(multSBD))
        player.super_bell.dimsix = player.super_bell.dimsix.add(player.super_bell.dimseven.times(multSBD))
        player.super_bell.dimseven = player.super_bell.dimseven.add(player.super_bell.dimeight.times(multSBD))
        player.super_bell.dimeight = buyableEffect('super_bell', 11)
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + formatWhole(player.yoshi_egg.points) + ` Yoshi Eggs`],
        ["display-text", () => `Your best amount of Super Bell is ` + formatWhole(player.super_bell.best)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Super Bell is from Super Mario 3D World (2013, Wii U). <br>Who dosen't like a character becomes a cat?`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "Super Bell Dimensions": {
                unlocked() { return hasUpgrade('super_bell', 15) },
                content: [
                    ["blank", "15px"],
                    ["display-text", () => "You have " + format(player.super_bell.dimone) + " 1st Super Bell Dimensions, multiply Super Bell gain by " + format(player.super_bell.dimone.pow(0.5).max(1))
                        + "<br> You have " + format(player.super_bell.dimtwo) + " 2nd Super Bell Dimensions"
                        + "<br> You have " + format(player.super_bell.dimthree) + " 3rd Super Bell Dimensions"
                        + "<br> You have " + format(player.super_bell.dimfour) + " 4th Super Bell Dimensions"
                        + "<br> You have " + format(player.super_bell.dimfive) + " 5th Super Bell Dimensions"
                        + "<br> You have " + format(player.super_bell.dimsix) + " 6th Super Bell Dimensions"
                        + "<br> You have " + format(player.super_bell.dimseven) + " 7th Super Bell Dimensions"
                        + "<br> You have " + format(player.super_bell.dimeight) + " 8th Super Bell Dimensions<br><br><br>"],
                    "buyables",
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #b6a017, #c7b24a)',
                        'border-color': '#b6a017',
                        'color': 'black',
                    }
                },
            },
        },
    },
})
// 第十三层：超级锤子
addLayer("super_hammer", {
    componentStyles: {
        "buyable"() {
            return {
                'margin-left': '-7px',
                'margin-right': '-7px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            characters_box: new Decimal(0),
        }
    },

    color: "#403739",                       // The color for this layer, which affects many elements.
    resource: "Super Hammers",            // The name of this layer's main prestige resource.
    row: 4,                                 // The row this layer is on (0 is the first row).
    position: 2,
    symbol: "SH",
    branches: ["super_leaf"],
    baseResource: "Super Leaves",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.super_leaf.points },  // A function to return the current amount of baseResource.

    requires: new Decimal("1e2835000"),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.                         // "normal" prestige gain is (currency^exponent).
    getResetGain() {
        let SL = player.super_leaf.points
        let g = SL.max(1).div('1e2834900').max(0.1).log(1e100).max(0).floor()
        g = g.times(tmp.super_hammer.gainMult)
        g = g.pow(tmp.super_hammer.gainExp)
        g = g.times(tmp.super_hammer.directMult)
        if (!hasMilestone('super_hammer', 0)) g = g.min(1)
        return g
    },
    getNextAt() {
        let SH = tmp.super_hammer.getResetGain
        let gna = Decimal.pow(1e100, SH).times("1e2835000")
        if (!hasMilestone('super_hammer', 0) && SH.gte(1)) gna = d(Infinity)
        return gna
    },
    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        let SL = player.super_leaf.points
        if (hasMilestone('super_hammer', 2)) mult = mult.times(2)
        if (hasUpgrade('super_bell', 31)) mult = mult.times(upgradeEffect('super_bell', 31))
        if (hasMilestone('master_sword', 0)) mult = mult.times(1e10)
        return mult
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        let exp = new Decimal(1)
        if (hasUpgrade('super_hammer', 22)) exp = exp.times(upgradeEffect('super_hammer', 13))
        if (hasUpgrade('frog_suit', 32)) exp = exp.times(5)
        if (hasUpgrade('super_acorn', 23)) exp = exp.times(22)
        if (hasUpgrade('boomerang_flower', 24)) exp = exp.times(upgradeEffect('boomerang_flower', 24))
        return exp
    },
    directMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        let c = d("e8.1e1919")
        if (hasSEendlessUpgrade(43)) c = c.pow(upgradeEffect('s_expert', 43))
        if (hasChallenge('super_hammer'), 12) mult = mult.times(challengeEffect('super_hammer', 12))
        if (hasUpgrade('super_hammer', 34)) mult = mult.times(upgradeEffect('super_hammer', 34))
        if (hasUpgrade('usa_mushroom', 11)) mult = mult.times(7000)
        if (hasUpgrade('usa_mushroom', 12)) mult = mult.times(upgradeEffect('usa_mushroom', 12))
        if (player.super_hammer.points.gte(c)) mult = new Decimal(1)
        return mult
    },

    softcap() {
        let c = new Decimal("e1.4e1145")
        if (hasSEendlessUpgrade(43)) c = c.pow(upgradeEffect('s_expert', 43))
        return c
    },
    softcapPower: d("e^114514 -1"),

    layerShown() { return hasAchievement('achievements', 94) },          // Returns a bool for if this layer's node should be visible in the tree.

    doReset(resettingLayer) {
        if (layers[resettingLayer].row >= 12) return undefined
        else if (layers[resettingLayer].row > layers[this.layer].row) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('master_sword', 1)) {
                kept.push("challenges")
            }
            if (hasMilestone('master_sword', 3)) {
                kept.push("milestones")
            }
            if (hasMilestone('master_sword', 4)) {
                kept.push("buyables")
            }
            layerDataReset(this.layer, kept)
        }
    },
    autoUpgrade() { return hasMilestone('master_sword', 5) },
    passiveGeneration() { return hasMilestone('master_sword', 6) },
    hotkeys: [
        { key: "h", description: "H: Reset for Super Hammers", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],

    upgrades: {
        11: {
            title: "40 40",
            description: "Super Hammer affacts Propeller Mushroom gain.",
            cost: new Decimal(3500),
            unlocked() { return hasMilestone('super_hammer', 1) },
            effect() {
                return player.super_hammer.points.pow(450).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        12: {
            title: "80 80",
            description: "Super Hammer affacts Super Bell.",
            currencyDisplayName: "Propeller Mushrooms",
            currencyInternalName: "points",
            currencyLayer: "propeller_mushroom",
            cost: new Decimal("1e11708"),
            unlocked() { return hasUpgrade('super_hammer', 11) },
            effect() {
                return player.super_hammer.points.pow(40).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        13: {
            title: "Unlike hammer bros",
            description: "Power Cleared Courses baesd on Super Hammer.<br>Formula: slog10(x)",
            cost: new Decimal(18888),
            unlocked() { return hasUpgrade('super_hammer', 12) },
            effect() {
                return player.super_hammer.points.max(10).slog(10)
            },
            effectDisplay() { return "^" + format(upgradeEffect(this.layer, this.id)) },
        },
        14: {
            title: "Characters' symbol",
            description() { return `Delay Coin's softcap to Decipicillion Coins. (${f('e30000000000003')} Coins)` },
            cost: new Decimal(1666390),
            unlocked() { return hasUpgrade('super_hammer', 13) },
        },
        15: {
            title: "On their hammers",
            description: "Unlock 11th Super Bell upgrade.",
            cost: new Decimal(12413170),
            unlocked() { return hasUpgrade('super_hammer', 14) },
        },
        21: {
            title: "Icicle breaker",
            description: "Unlock a buyable for Characters' Box.",
            currencyDisplayName: "Characters' Boxes",
            currencyInternalName: "characters_box",
            currencyLayer: "super_hammer",
            cost: new Decimal(84600),
            unlocked() { return hasChallenge('super_hammer', 11) },
        },
        22: {
            title: "5 boxes",
            description: "3rd Super Hammer upgrade also affacts Super Hammer.",
            currencyDisplayName: "Characters' Boxes",
            currencyInternalName: "characters_box",
            currencyLayer: "super_hammer",
            cost: new Decimal(200000000),
            unlocked() { return hasUpgrade('super_hammer', 21) },
        },
        23: {
            title: "5 different colors of boxes",
            description: "+1 to \"Box Generator\" base.",
            cost: new Decimal(1.2e54),
            unlocked() { return hasUpgrade('super_hammer', 22) },
        },
        24: {
            title: "Put on a platform",
            description() { return `If you get ${fw(5e11)} Cleared Courses in \"Buzzy beetles\", multiply CB gain based on CF.` },
            currencyDisplayName: "Characters' Boxes",
            currencyInternalName: "characters_box",
            currencyLayer: "super_hammer",
            cost: new Decimal(5e12),
            unlocked() { return hasUpgrade('super_hammer', 23) },
            effect() {
                return player.cape_feather.points.pow(2).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        25: {
            title: "Cover a passage",
            description: "+2 to 'Box generator' base.",
            currencyDisplayName: "Characters' Boxes",
            currencyInternalName: "characters_box",
            currencyLayer: "super_hammer",
            cost: new Decimal(9.99e17),
            unlocked() { return hasUpgrade('super_hammer', 24) },
        },
        31: {
            title: "Clear pipe cycling",
            description: "Passively gain 100% Propeller Mushroom every second.",
            currencyDisplayName: "Characters' Boxes",
            currencyInternalName: "characters_box",
            currencyLayer: "super_hammer",
            cost: new Decimal(1.66e28),
            unlocked() { return hasUpgrade('super_hammer', 25) },
        },
        32: {
            title: "Block a pipe?",
            description: "Passive gain 100% Super Bell every second.",
            cost: new Decimal(3.45e55),
            unlocked() { return hasUpgrade('super_hammer', 31) },
        },
        33: {
            title: "It can only block yourself",
            description: "Unlock another challenge in this layer.",
            currencyDisplayName: "Characters' Boxes",
            currencyInternalName: "characters_box",
            currencyLayer: "super_hammer",
            cost: new Decimal(4.89e28),
            unlocked() { return hasUpgrade('super_hammer', 32) },
        },
        34: {
            title: "Box drop",
            description: "Multiply Super Hammer gain based on Characters' Box. (After the exponential calculation)",
            cost: new Decimal(3.45e66),
            unlocked() { return hasUpgrade('super_hammer', 33) },
            effect() {
                return player.super_hammer.characters_box.max(1).log(10).pow(5).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        35: {
            title: "The hardcore LINKage",
            description: "Unlock a new layer on row 6.",
            cost: new Decimal(2.22e74),
            unlocked() { return hasUpgrade('super_hammer', 34) || hasUpgrade(this.layer, this.id) },
        },
        41: {
            title: "Speedrun hammer",
            description: "If you are in challenge 'Buzzy beetle', 100x Cleared Courses gain.",
            currencyDisplayName: "Characters' Boxes",
            currencyInternalName: "characters_box",
            currencyLayer: "super_hammer",
            cost: new Decimal(1e38),
            unlocked() { return hasUpgrade('super_hammer', 35) },
        },
        // Look in the upgrades docs to see what goes here!
    },
    milestones: {
        0: {
            requirementDescription: "Get 10 Super Hammers",
            effectDescription: "You are able to gain multiple of Super Hammers with one SH reset. Gain ^1.1 Propeller Mushroom.",
            done() { return player.super_hammer.points.gte(10) },
        },
        1: {
            requirementDescription() { return `Get ${f(2500)} Super Hammers` },
            effectDescription: "Unlock 1st Super Hammer upgrade.",
            done() { return player.super_hammer.points.gte(2500) },
        },
        2: {
            requirementDescription() { return `Get ${f(501761)} Super Hammers` },
            effectDescription: "Double Super Hammer gain.",
            done() { return player.super_hammer.points.gte(501761) },
        },
    },
    challenges: {
        11: {
            name: "Buzzy beetles",
            challengeDescription: "log 10 Cleared Courses gain and disable effect in subtab Yoshi except 1st Yoshi effect.",
            goalDescription: "Get 1.66e12 Cleared Courses",
            canComplete: function () {
                return player.points.gte(1.66e12)
            },
            rewardDescription: "Boost 8th SBD gain. You can gain Characters' Boxes after completing this challenge in this challenge.",
            rewardEffect() {
                let SHC1eff = new Decimal(1e100)
                return SHC1eff
            },
            rewardDisplay() { return format(challengeEffect(this.layer, this.id)) + "x" },
            unlocked() { return hasUpgrade('super_bell', 35) },
        },
        12: {
            name: "Magikoopas",
            challengeDescription: "Nothing changed.",
            completionLimit: new Decimal(10),
            goalDescription() {
                return `Get ${f(this.goal())} Cleared Courses`
            },
            goal() {
                let g = Decimal.pow("e1.75e17", Decimal.pow(10, challengeCompletions('super_hammer', 12)))
                return g
            },
            canComplete: function () {
                return player.points.gte(this.goal())
            },
            rewardDescription() { return `${f(1e10)}x Super Hammer per every completion.` },
            rewardEffect() {
                let base = new Decimal(1e10)
                return base.pow(challengeCompletions('super_hammer', 12)).max(1)
            },
            rewardDisplay() {
                return format(challengeEffect(this.layer, this.id)) + "x<br>Completions: "
                    + formatWhole(challengeCompletions('super_hammer', 12))
                    + "/10"
            },
            unlocked() { return hasUpgrade('super_hammer', 33) },
        },
    },
    buyables: {
        11: {
            title: "Box generator",
            cost(x) { return new Decimal(2).pow(Decimal.pow(x, 1.35).add(1)) },
            display() {
                let SHB1base = new Decimal(2)
                if (hasUpgrade('super_hammer', 23)) SHB1base = SHB1base.add(1)
                if (hasUpgrade('super_hammer', 25)) SHB1base = SHB1base.add(2)
                if (hasUpgrade('master_sword', 11)) SHB1base = SHB1base.add(buyableEffect('super_hammer', 12))
                if (hasAchievement('achievements', 121)) SHB1base = SHB1base.times(tmp.power_balloon.effect)
                if (hasUpgrade('power_balloon', 33)) SHB1base = SHB1base.pow(buyableEffect('super_hammer', 13))
                return ` Multiply Characters' Box gain by ${format(SHB1base)} per every level. (After the exponential calculation) <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Characters' Boxes`
            },
            canAfford() { return player[this.layer].characters_box.gte(this.cost()) },
            buy() {
                player[this.layer].characters_box = player[this.layer].characters_box.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                let SHB1base = new Decimal(2)
                if (hasUpgrade('super_hammer', 23)) SHB1base = SHB1base.add(1)
                if (hasUpgrade('super_hammer', 25)) SHB1base = SHB1base.add(2)
                if (hasUpgrade('master_sword', 11)) SHB1base = SHB1base.add(buyableEffect('super_hammer', 12))
                if (hasAchievement('achievements', 121)) SHB1base = SHB1base.times(tmp.power_balloon.effect)
                if (hasUpgrade('power_balloon', 33)) SHB1base = SHB1base.pow(buyableEffect('super_hammer', 13))
                return new Decimal(SHB1base).pow(x)
            },
            unlocked() { return hasUpgrade('super_hammer', 21) },
            style() {
                return { 'color': 'white' }
            },
        },
        12: {
            title: "Box accelerator",
            cost(x) { return new Decimal(5).pow(Decimal.pow(x, 1.75).add(1)).times(3.3333e33) },
            display() {
                let SHB2base = new Decimal(0.5)
                if (hasUpgrade('master_sword', 14)) SHB2base = SHB2base.add(0.25)
                if (hasUpgrade('master_sword', 24)) SHB2base = SHB2base.add(upgradeEffect('master_sword', 24))
                if (hasUpgrade('master_sword', 54) && player.master_sword.links_bomb_random == 2 ||
                    hasUpgrade('master_sword', 54) && player.master_sword.links_bomb_random == 4 ||
                    hasUpgrade('master_sword', 54) && player.master_sword.links_bomb_random == 6 ||
                    hasUpgrade('master_sword', 54) && player.master_sword.links_bomb_random == 8 ||
                    hasMilestone('usa_mushroom', 0)) SHB2base = SHB2base.add(15)
                if (hasUpgrade('master_sword', 61)) SHB2base = SHB2base.add(upgradeEffect('master_sword', 61))
                if (hasUpgrade('frog_suit', 45)) SHB2base = SHB2base.pow(1.5)
                return `Increase "Box generator" base by +${format(SHB2base)} per every level.<br>
                Effect: +${format(this.effect())} <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Characters' Boxes`
            },
            canAfford() { return player[this.layer].characters_box.gte(this.cost()) },
            buy() {
                player[this.layer].characters_box = player[this.layer].characters_box.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                let SHB2base = new Decimal(0.5)
                if (hasUpgrade('master_sword', 14)) SHB2base = SHB2base.add(0.25)
                if (hasUpgrade('master_sword', 24)) SHB2base = SHB2base.add(upgradeEffect('master_sword', 24))
                if (hasUpgrade('master_sword', 54) && player.master_sword.links_bomb_random == 2 ||
                    hasUpgrade('master_sword', 54) && player.master_sword.links_bomb_random == 4 ||
                    hasUpgrade('master_sword', 54) && player.master_sword.links_bomb_random == 6 ||
                    hasUpgrade('master_sword', 54) && player.master_sword.links_bomb_random == 8) SHB2base = SHB2base.add(15)
                if (hasUpgrade('master_sword', 61)) SHB2base = SHB2base.add(upgradeEffect('master_sword', 61))
                if (hasUpgrade('frog_suit', 45)) SHB2base = SHB2base.pow(1.5)
                return new Decimal(SHB2base).times(x)
            },
            unlocked() { return hasUpgrade('master_sword', 11) },
            style() {
                return { 'color': 'white' }
            },
        },
        13: {
            title: "Box transcender",
            cost(x) { return new Decimal("1e10000").pow(Decimal.pow(x, 1.5).add(1)) },
            display() {
                let SHB3base = new Decimal(0.05)
                if (hasAchievement('achievements', 135)) SHB3base = SHB3base.add(tmp.mario.effect)
                return ` Power 'Box generator' base by +^${format(SHB3base)} per every level.<br>
                Effect: ^${format(this.effect())} <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Level limit: ${formatWhole(limitBoxtranscender)} <br>
                Cost: ${format(this.cost())} Characters' Boxes`
            },
            canAfford() { return player[this.layer].characters_box.gte(this.cost()) },
            buy() {
                player[this.layer].characters_box = player[this.layer].characters_box.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            purchaseLimit() {
                limitBoxtranscender = new Decimal(75)
                if (hasUpgrade('super_acorn', 14)) limitBoxtranscender = limitBoxtranscender.add(upgradeEffect('super_acorn', 14))
                return limitBoxtranscender
            },
            effect(x) {
                let SHB3base = new Decimal(0.05)
                if (hasAchievement('achievements', 135)) SHB3base = SHB3base.add(tmp.mario.effect)
                eff = new Decimal(1).add(SHB3base.times(x))
                if (inChallenge('boomerang_flower', 11)) eff = new Decimal(1)
                return eff
            },
            unlocked() { return hasUpgrade('power_balloon', 33) },
            style() {
                return { 'color': 'white' }
            },
        },
    },
    automate() {
        if (player.super_hammer.characters_box.lte(0)) return
        if (hasMilestone('master_sword', 6)
        ) {
            if (player.super_hammer.characters_box) {
                (hasMilestone('master_sword', 6)) ? setBuyableAmount("super_hammer", 11, tmp.super_hammer.buyables[11].canAfford ? player.super_hammer.characters_box.log(2).sub(1).root(1.35).floor().add(1) : getBuyableAmount("super_hammer", 11)) : buyBuyable("super_hammer", 11)
            }
            if (player.super_hammer.characters_box) {
                (hasMilestone('master_sword', 6)) ? setBuyableAmount("super_hammer", 12, tmp.super_hammer.buyables[12].canAfford ? player.super_hammer.characters_box.div(3.3333e33).log(5).sub(1).root(1.75).floor().add(1) : getBuyableAmount("super_hammer", 12)) : buyBuyable("super_hammer", 12)
            }
        }
    },
    multCB() {
        let multCB = new Decimal(1)
        multCB = multCB.times(player.invincible_star.points)
        if (hasUpgrade('super_hammer', 21)) multCB = multCB.times(buyableEffect('super_hammer', 11))
        if (hasUpgrade('super_hammer', 24) && inChallenge('super_hammer', 11) && player.points.gte(5e11)) multCB = multCB.times(upgradeEffect("super_hammer", 24))
        if (hasMilestone('master_sword', 0)) multCB = multCB.times(2)
        if (hasMilestone('master_sword', 1)) multCB = multCB.times(5)
        if (hasMilestone('master_sword', 2)) multCB = multCB.times(10000)
        if (hasUpgrade('master_sword', 12)) multCB = multCB.times(upgradeEffect('master_sword', 12))
        if (hasUpgrade('usa_mushroom', 14)) multCB = multCB.times(upgradeEffect('usa_mushroom', 14))
        if (!(inChallenge('super_hammer', 11) && hasChallenge('super_hammer', 11) || hasMilestone('master_sword', 7) && hasChallenge('super_hammer', 11))) multCB = d(0)
        return multCB
    },
    update(diff) {
        if (inChallenge('super_hammer', 11) && hasChallenge('super_hammer', 11) || hasMilestone('master_sword', 7) && hasChallenge('super_hammer', 11)) player.super_hammer.characters_box = player.super_hammer.characters_box.add(tmp.super_hammer.multCB.times(diff))
        if (hasMilestone('mario', 3) && player.super_hammer.buyables[13].lt(limitBoxtranscender)) player.super_hammer.buyables[13] = limitBoxtranscender

        let c = d("e8.1e1919")
        if (hasSEendlessUpgrade(43)) c = c.pow(upgradeEffect('s_expert', 43))
        if (player.super_hammer.points.gte(c)) player.super_hammer.points = c
    },

    CBeff() {
        let CBeff = new Decimal(1)
        CBeff = CBeff.times(player.super_hammer.characters_box.max(1).log(1e10).add(1))
        if (hasUpgrade('master_sword', 21)) CBeff = CBeff.times(2)
        if (hasUpgrade('master_sword', 25)) CBeff = CBeff.pow(2)
        if (hasUpgrade('luigi', 25)) CBeff = CBeff.times(2)
        return CBeff
    },

    cu2sc() {
        let CBeff = tmp.super_hammer.CBeff
        let sc = d('e5e15')
        if (player.super_hammer.characters_box.gt(0)) sc = sc.pow(CBeff)
        if (hasUpgrade('master_sword', 72)) sc = sc.pow(upgradeEffect('master_sword', 72))
        if (hasUpgrade('power_balloon', 45)) sc = sc.pow(25)
        return sc
    },

    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `Your have ` + formatWhole(player.super_leaf.points) + ` Super Leaves`],
        ["display-text", () => `Your best amount of Super Hammer is ` + formatWhole(player.super_hammer.best)],
        ["display-text", () => `Reset for Super Hammers gain's formula is ${f('1e2835000')}·${f(1e100)}<sup>x</sup>`],
        ["display-text", function () {
            if (player.super_hammer.points.gte('e1.4e1145'))
                return "Super Hammer hardcap is at " + format(tmp.super_hammer.softcap)
        }],
        ["display-text", function () {
            let c = d("e8.1e1919")
            if (hasSEendlessUpgrade(43)) c = c.pow(upgradeEffect('s_expert', 43))
            if (player.super_hammer.points.gte('e8.1e1919'))
                return "Some multipliers can pass the hardcap, multipliers after the hardcap is disabled while your Super Hammer is over " + format(c)
        }],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Cats and hammers are both able to destroy bricks. <br>But only Super Hammers can destroy hard bricks in SM3DW style.`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "Characters' Box": {
                unlocked() { return hasAchievement('achievements', 101) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return "You have <h2 style='color: #a0733c; text-shadow: 0 0 10px #a0733c'>" + format(player.super_hammer.characters_box) + "</h2> Characters' Boxes, delaying 2nd Coin upgrade effect's softcap by <h2 style='color: #a0733c; text-shadow: 0 0 10px #a0733c'> ^" + format(tmp.super_hammer.CBeff) + "</h2>"
                    }],
                    ["display-text", function () {
                        let t = `(${textStyle_h2("+" + f(tmp.super_hammer.multCB), 'a0733c')}/sec)`
                        return t
                    }],
                    ["display-text", () => "You can gain Characters' Boxes based on IS in challenge Buzzy beetles."],
                    ["display-text", function () {
                        return "2nd Coin upgrade's softcap is at " + format(tmp.super_hammer.cu2sc) + "x"

                    }],
                    "blank",
                    "challenges",
                    "blank",
                    "buyables",
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #403739, #a0733c)',
                        'border-color': '#a0733c',
                        'color': 'black',
                    }
                },
            },
        },
    },
})

function getExplotionDefeatMult(id) {
    let DE
    if (id == 21 || id == 23 || id == 41 || id == 43) DE = d(1)
    if (id == 22 || id == 31 || id == 33 || id == 42) DE = d(3)
    if (id == 32) DE = d(9)
    if (hasUpgrade('master_sword', 31)) DE = DE.times(upgradeEffect('master_sword', 31))
    if (hasUpgrade('master_sword', 23)) DE = DE.pow(2)
    if (hasUpgrade('master_sword', 32)) DE = DE.times(upgradeEffect('master_sword', 32))
    if (hasUpgrade('master_sword', 35)) DE = DE.times(buyableEffect('master_sword', 12))
    if (hasUpgrade('power_balloon', 12)) DE = DE.times(100)
    return DE
}

function clickDetonation(id) {
    player.master_sword.links_bomb = player.master_sword.links_bomb.sub(1),
        player.master_sword.defeats_by_explosion = player.master_sword.defeats_by_explosion.add(getExplotionDefeatMult(id)),
        player.master_sword.links_bomb_random = new Decimal(Math.random()).times(player.master_sword.links_bomb_clicks).floor().add(1)
}

// 第十四层：大师之剑
addLayer("master_sword", {
    componentStyles: {
        "clickable"() {
            return {
                'margin-left': '-7px',
                'margin-right': '-7px',
            }
        },
        "buyable"() {
            return {
                'margin-left': '-7px',
                'margin-right': '-7px',
            }
        },
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            links_bomb: new Decimal(0),         // 林克炸弹
            links_bomb_clicks: new Decimal(9),   //林克炸弹可点击数
            links_bomb_random: new Decimal(1),  //林克炸弹随机数
            defeats_by_explosion: new Decimal(0), //炸死敌人数
            hyrule_shield: new Decimal(0),      //海拉鲁盾
            links_bow: new Decimal(0),          //林克弓
            ranged_kills: new Decimal(0),       //远程击杀数
            ranged_kills_mult: new Decimal(1),  //远程击杀动态倍数
            arrow: new Decimal(0),              //箭
            container_of_heart: new Decimal(0), //心之容器
            container_of_energy: new Decimal(0), //精力容器
            container_total: new Decimal(0),    //容器总数
            container_assignable: new Decimal(0),    //容器可分配数
            rupee: new Decimal(0),              //卢比
            arrow_status: new Decimal(0),        //箭的消耗状态
            cooldown: d(0),
        }
    },

    color: "#2730B8",                       // The color for this layer, which affects many elements.
    resource: "Master Swords",            // The name of this layer's main prestige resource.
    row: 5,                                 // The row this layer is on (0 is the first row).
    position: 0,
    symbol: "MS",
    branches: ["super_bell"],


    baseResource: "Super Bells",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.super_bell.points },  // A function to return the current amount of baseResource.

    canReset() {
        return tmp[this.layer].baseAmount.gte(tmp[this.layer].nextAt) && player.master_sword.cooldown.eq(0)
    },

    onPrestige() {
        player.master_sword.cooldown = d(0.1)
    },

    requires() {
        let base = d("1e615000")
        return base
    },              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "static",                         // Determines the formula used for calculating prestige currency.
    exponent: 15,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        return new Decimal(1)               // Factor in any bonuses multiplying gain here.
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },
    directMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        if (hasUpgrade('master_sword', 15)) mult = mult.times(player.master_sword.defeats_by_explosion.add(2).log(2).root(4).max(1))
        if (hasMilestone('power_balloon', 1)) mult = mult.times(1.25)
        if (hasUpgrade('frog_suit', 44)) mult = mult.times(1.05)
        if (hasUpgrade('boomerang_flower', 23)) mult = mult.times(1.1)
        return mult
    },

    canBuyMax() {
        return (hasMilestone('master_sword', 12))
    },

    layerShown() { return hasAchievement('achievements', 102) },          // Returns a bool for if this layer's node should be visible in the tree.

    hotkeys: [
        { key: "M", description: "Shift+M: Reset for Master Swords", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],
    doReset(resettingLayer) {
        if (layers[resettingLayer].row >= 12) return undefined
        else if (layers[resettingLayer].row > layers[this.layer].row) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('power_balloon', 0)) {
                kept.push("milestones")
            }
            if (hasMilestone('super_acorn', 0)) {
                kept.push("upgrades")
            }
            layerDataReset(this.layer, kept)
        }
    },

    autoPrestige() { return hasMilestone('power_balloon', 4) },

    upgrades: {
        11: {
            title: "Get the sword!",
            description: "Unlock 2nd buyable for Characters' Box.",
            cost: new Decimal(3),
            unlocked() { return tmp.master_sword.layerShown },
        },
        12: {
            title: "Link's adventure",
            description: "Multiply Characters' Box gain based on Invincible Star and Master Sword.",
            currencyDisplayName: "Characters' Boxes",
            currencyInternalName: "characters_box",
            currencyLayer: "super_hammer",
            cost: new Decimal(4e65),
            unlocked() { return hasUpgrade('master_sword', 11) },
            effect() {
                return player.invincible_star.points.max(1).pow(player.master_sword.points).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        13: {
            title: "Green hat symbol",
            description: "Multiply Cleared Courses gain based on best Master Sword.",
            currencyDisplayName: "Characters' Boxes",
            currencyInternalName: "characters_box",
            currencyLayer: "super_hammer",
            cost: new Decimal(1e111),
            unlocked() { return hasUpgrade('master_sword', 12) },
            effect() {
                if (inChallenge('master_sword', 11)) return new Decimal(1)
                else return Decimal.pow("e2e17", player.master_sword.best)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        14: {
            title: "Awakening",
            description: "+0.25 to 'Box accelerator' base.",
            cost: new Decimal(4),
            unlocked() { return hasUpgrade('master_sword', 13) },
        },
        15: {
            title: "Link's battle",
            description: "Unlock subtab Link's Bomb.",
            currencyDisplayName: "Characters' Boxes",
            currencyInternalName: "characters_box",
            currencyLayer: "super_hammer",
            cost: new Decimal(1.11e171),
            unlocked() { return hasUpgrade('master_sword', 14) },
        },
        21: {
            title: "Bomb skills",
            description: "Double Characters' Box effect.",
            cost: new Decimal(6),
            unlocked() { return hasUpgrade('master_sword', 15) },
        },
        22: {
            title: "Auto bombs",
            description: "Passive gain Link's Bomb based on current amount of Master Sword.",
            cost: new Decimal(6),
            unlocked() { return hasUpgrade('master_sword', 21) },
            effect() {
                let multLB = player.master_sword.points.div(10)
                if (hasUpgrade('master_sword', 44)) multLB = multLB.times(upgradeEffect('master_sword', 44))
                if (hasUpgrade('power_balloon', 12)) multLB = multLB.times(100)
                return multLB
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "/sec" },
        },
        23: {
            title: "Denser enemy",
            description: "Square Explosion Defeats gain.",
            currencyDisplayName: "Link's Bombs",
            currencyInternalName: "links_bomb",
            currencyLayer: "master_sword",
            cost: new Decimal(150),
            unlocked() { return hasUpgrade('master_sword', 22) },
        },
        24: {
            title: "Throw, explode!",
            description: "Increase 'Box accelerator' base based on Master Sword.",
            cost: new Decimal(7),
            unlocked() { return hasUpgrade('master_sword', 23) },
            effect() {
                return player.master_sword.points.times(0.07)
            },
            effectDisplay() { return "+" + format(upgradeEffect(this.layer, this.id)) },
        },
        25: {
            title: "Huge explode",
            description: "Square Characters' Box effect.",
            currencyDisplayName: "Characters' Boxes",
            currencyInternalName: "characters_box",
            currencyLayer: "super_hammer",
            cost: new Decimal("2e346"),
            unlocked() { return hasUpgrade('master_sword', 24) },
        },
        31: {
            title: "Denser enemy, farm lives",
            description: "Multiply Explosion Defeats based on Master Sword. (Before exp. cal.)",
            cost: new Decimal(8),
            unlocked() { return hasUpgrade('master_sword', 25) },
            effect() {
                return player.master_sword.points.add(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        32: {
            title: "Denser enemy, deatroy all",
            description: "Multiply Explosion Defeats based on Link's Bomb. (After exp. cal.)",
            cost: new Decimal(9),
            unlocked() { return hasUpgrade('master_sword', 31) },
            effect() {
                return player.master_sword.links_bomb.add(1).sqrt()
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        33: {
            title: "Master challenge",
            description: "Unlock a new subtab Temples with a challenge.",
            cost: new Decimal(10),
            unlocked() { return hasUpgrade('master_sword', 32) },
        },
        34: {
            title: "Make it better",
            description: "Unlock a buyable for Rupee.",
            currencyDisplayName: "Rupee",
            currencyInternalName: "rupee",
            currencyLayer: "master_sword",
            cost: new Decimal(2560),
            unlocked() { return hasUpgrade('master_sword', 33) },
        },
        35: {
            title: "Instantaneous explode",
            description: "Unlock a new buyable to increase Explotion Defeats.",
            currencyDisplayName: "Rupee",
            currencyInternalName: "rupee",
            currencyLayer: "master_sword",
            cost: new Decimal(41000000),
            unlocked() { return hasUpgrade('master_sword', 34) },
        },
        41: {
            title: "Defense is necessary",
            description: "Unlock a new subtab Hyrule Shield.",
            cost: new Decimal(12),
            unlocked() { return hasUpgrade('master_sword', 35) },
            effect() {
                return player.master_sword.hyrule_shield.max(1).log(5).max(1)
            },
        },
        42: {
            title: "Block it!",
            description: "Multiply Hyrule Shield gain based on Characters' Box",
            currencyDisplayName: "Hyrule Shields",
            currencyInternalName: "hyrule_shield",
            currencyLayer: "master_sword",
            cost: new Decimal(2025),
            unlocked() { return hasUpgrade('master_sword', 41) },
            effect() {
                return player.super_hammer.characters_box.max(1).log(10).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        43: {
            title: "Block a spike ball",
            description: "Hyrule Shield also affacts 'Rupee efficiency'.",
            cost: new Decimal(13),
            unlocked() { return hasUpgrade('master_sword', 42) },
        },
        44: {
            title: "Block a bomb",
            description: "Multiply Link's Bomb based on Hyrule Shield.",
            cost: new Decimal(14),
            unlocked() { return hasUpgrade('master_sword', 43) },
            effect() {
                return player.master_sword.hyrule_shield.max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        45: {
            title: "Better environment",
            description() { return `^${f(1e-9)} Cleared Courses gain in Temple of Meckakoopas, not ^${f(1e-10)}.` },
            currencyDisplayName: "Explosion Defeats",
            currencyInternalName: "defeats_by_explosion",
            currencyLayer: "master_sword",
            cost: new Decimal(1e23),
            unlocked() { return hasUpgrade('master_sword', 44) },
        },
        51: {
            title: "Block the Bowser's fire",
            description: "Cube Hyrule Shields gain.",
            cost: new Decimal(15),
            unlocked() { return hasUpgrade('master_sword', 45) },
        },
        52: {
            title: "Rotten mushrooms",
            description: "Unlock a buyable for hyrule Shield.",
            cost: new Decimal(16),
            unlocked() { return hasUpgrade('master_sword', 51) },
        },
        53: {
            title: "Link's drop delay",
            description() { return `If you aim the corners (1,3,7,9) of explosion area, ${f(1e20)}x Rupee gain.` },
            cost: new Decimal(19),
            unlocked() { return hasUpgrade('master_sword', 52) },
        },
        54: {
            title: "Rush attack",
            description() { return `If you aim the sides (2,4,6,8) of explosion area, +15 'Box accelerator' base.` },
            currencyDisplayName: "Rupee",
            currencyInternalName: "rupee",
            currencyLayer: "master_sword",
            cost: new Decimal(4e88),
            unlocked() { return hasUpgrade('master_sword', 53) },
        },
        55: {
            title: "Down strike",
            description() { return `If you aim the center (5) of explosion area, auto gain 1000% Hyrule Shields per second.` },
            currencyDisplayName: "Super Hammers",
            currencyInternalName: "points",
            currencyLayer: "super_hammer",
            cost: new Decimal(3.33e183),
            unlocked() { return hasUpgrade('master_sword', 54) },
        },
        61: {
            title: "An archer",
            description: "Unlock a new subtab Link's Bow.",
            currencyDisplayName: "Hyrule Shields",
            currencyInternalName: "hyrule_shield",
            currencyLayer: "master_sword",
            cost: new Decimal(1e62),
            unlocked() { return hasUpgrade('master_sword', 55) },
            effect() {
                return player.master_sword.links_bow.max(1).log(15).max(0)
            },
        },
        62: {
            title: "Use the arrows",
            description: "Auto craft arrows per second (Based on Master Sword).",
            currencyDisplayName: "Link's Bows",
            currencyInternalName: "links_bow",
            currencyLayer: "master_sword",
            cost: new Decimal(50),
            unlocked() { return hasUpgrade('master_sword', 61) },
            effect() {
                let Arrmult = new Decimal(1)
                Arrmult = Arrmult.times(player.master_sword.points)
                if (player.master_sword.arrow_status.gte(0.5)) Arrmult = new Decimal(0)
                return Arrmult
            },
            effectDisplay() {
                let main = format(upgradeEffect(this.layer, this.id)) + "/sec"
                if (player.master_sword.arrow_status.gte(0.5)) main = main + "<br>('Snipe' current active)"
                return main
            },
        },
        63: {
            title: "Ranged attack!",
            description: "Unlock a button that can spend arrows to get boost for Link's Bow.",
            currencyDisplayName: "arrows",
            currencyInternalName: "arrow",
            currencyLayer: "master_sword",
            cost: new Decimal(1000),
            unlocked() { return hasUpgrade('master_sword', 62) },
            effect() {
                return player.master_sword.ranged_kills.max(1).pow(2)
            },
        },
        64: {
            title: "Up, middle, down",
            description: "Unlock a buyable for arrows.",
            currencyDisplayName: "Ranged Kills",
            currencyInternalName: "ranged_kills",
            currencyLayer: "master_sword",
            cost: new Decimal(10000),
            unlocked() { return hasUpgrade('master_sword', 63) },
        },
        65: {
            title: "Element arrows",
            description() { return `Increase 'Meckakoopa' Cleared Courses base to ${f(1e-7)}.` },
            cost: new Decimal(29),
            unlocked() { return hasUpgrade('master_sword', 64) },
        },
        71: {
            title: "Best ways",
            description: "'Snipe' efficiency is 20x faster.",
            cost: new Decimal(30),
            unlocked() { return hasUpgrade('master_sword', 65) },
        },
        72: {
            title: "Better health and power",
            description: "Unlock the last subtab 'container' this layer.",
            currencyDisplayName: "Ranged Kills",
            currencyInternalName: "ranged_kills",
            currencyLayer: "master_sword",
            cost: new Decimal(3e17),
            unlocked() { return hasUpgrade('master_sword', 71) },
            effect() {
                if (hasUpgrade('frog_suit', 13)) return player.master_sword.container_of_heart.add(1).pow(7.2).max(1)
                else return player.master_sword.container_of_heart.add(1).pow(4.8).max(1)
            },
        },
        73: {
            title: "More energy, more power",
            description: "Unlock Containers of Energy.",
            cost: new Decimal(80),
            unlocked() { return hasAchievement('achievements', 105) && hasUpgrade('master_sword', 72) },
            effect() {
                return player.master_sword.container_of_energy.add(1).pow(1.5).max(1)
            },
        },
        74: {
            title: "The bettle God",
            description: "'Snipe' efficiency is 5x faster.",
            cost: new Decimal(120),
            unlocked() { return hasUpgrade('master_sword', 73) },
        },
        75: {
            title: "American mushroom",
            description: "Unlock a new layer.",
            currencyDisplayName: "Rupee",
            currencyInternalName: "rupee",
            currencyLayer: "master_sword",
            cost: new Decimal(1e187),
            unlocked() { return hasUpgrade('master_sword', 74) || hasUpgrade(this.layer, this.id) },
        },
        81: {
            title: "Spike ball jump",
            description: "Total Containers provides a boost to Grabbing Enemies.",
            cost: new Decimal(212),
            unlocked() { return hasUpgrade('usa_mushroom', 31) },
            effect() {
                return Decimal.pow(10, player.master_sword.container_total)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        82: {
            title: "Longest snipe",
            description: "Passive gain 100% Ranged Kills every second and disable 'Snipe'.",
            cost: new Decimal(237),
            unlocked() { return hasUpgrade('master_sword', 81) },
            effect() {
                return player.master_sword.arrow
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "/sec" },
        },
        83: {
            title: "Rupee tycoon",
            description: "You can gain Rupee out of the temple.",
            cost: new Decimal(238),
            unlocked() { return hasUpgrade('master_sword', 82) },
        },
        84: {
            title: "Auto explotion",
            description: "Passive gain 100% of Explotion Defeats in corner area (1,3,7,9) every second.",
            cost: new Decimal(238),
            unlocked() { return hasUpgrade('master_sword', 83) },
        },
        85: {
            title: "The 40th MS upgrade",
            description: "Unlock 12th SMB2 Mushroom upgrade. That's closer to next layer!",
            cost: new Decimal(238),
            unlocked() { return hasUpgrade('master_sword', 84) },
        },
        // Look in the upgrades docs to see what goes here!
    },
    milestones: {
        0: {
            requirementDescription: "Get 1 Master Sword",
            effectDescription() { return `${f('1e1000')}x Propeller Mushroom, ${f('1e100')}x Super Bell, ${f('1e10')}x Super Hammer and 2x Characters' Box gain. Keep Propeller Mushroom milestones on row 6 reset.` },
            done() { return player.master_sword.points.gte(1) },
        },
        1: {
            requirementDescription: "Get 2 Master Swords",
            effectDescription: "5x Characters' Box gain. Keep row 5 challenges on row 6 resets.",
            done() { return player.master_sword.points.gte(2) },
        },
        2: {
            requirementDescription: "Get 3 Master Swords",
            effectDescription() { return `${f('e4')}x Characters' Box gain and passive gain 100% Propeller Mushroom and Super Bells every second.` },
            done() { return player.master_sword.points.gte(3) },
        },
        3: {
            requirementDescription: "Get 4 Master Swords",
            effectDescription: "Keep Super Bell and Super Hammer milestones on row 6 resets.",
            done() { return player.master_sword.points.gte(4) },
        },
        4: {
            requirementDescription: "Get 5 Master Swords",
            effectDescription: "Autobuy Propeller Mushroom and Super Bell upgrades and keep Super Hammer buyables on row 6 reset.",
            done() { return player.master_sword.points.gte(5) },
        },
        5: {
            requirementDescription: "Get 6 Master Swords",
            effectDescription: "Autobuy Super Hammer upgrades.",
            done() { return player.master_sword.points.gte(6) },
        },
        6: {
            requirementDescription: "Get 9 Master Swords",
            effectDescription: "Passive gain 100% Super Hammer every second and autobuy Super Hammer buyables.",
            done() { return player.master_sword.points.gte(9) },
        },
        7: {
            requirementDescription: "Get 11 Master Swords",
            effectDescription: "You can gain Characters' Box out of the challenge 'Buzzy beetles'.",
            done() { return player.master_sword.points.gte(11) },
        },
        8: {
            requirementDescription: "Get 14 Master Swords",
            effectDescription: "Keep Coin upgrades on reset.",
            done() { return player.master_sword.points.gte(14) },
        },
        9: {
            requirementDescription: "Get 19 Master Swords",
            effectDescription: "Keep Super Mushroom upgrades on reset.",
            done() { return player.master_sword.points.gte(19) },
        },
        10: {
            requirementDescription: "Get 23 Master Swords",
            effectDescription: "Keep Fire Flower upgrades on reset.",
            done() { return player.master_sword.points.gte(23) },
        },
        11: {
            requirementDescription: "Get 28 Master Swords",
            effectDescription: "Keep Invincible Star upgrades on reset.",
            done() { return player.master_sword.points.gte(28) },
        },
        12: {
            requirementDescription: "Get 7 Containers of Heart",
            effectDescription: "You can buy max Master Swords.",
            done() { return player.master_sword.container_of_heart.gte(7) },
        },
        13: {
            requirementDescription: "Get 40 Master Swords",
            effectDescription: "Keep 1UP Mushroom upgrades on reset.",
            done() { return player.master_sword.points.gte(40) },
        },
        14: {
            requirementDescription: "Get 52 Master Swords",
            effectDescription: "Keep Bouncy Ball Flower upgrades on reset.",
            done() { return player.master_sword.points.gte(52) },
        },
        15: {
            requirementDescription: "Get 65 Master Swords",
            effectDescription: "Keep Big Mushroom upgrades on reset.",
            done() { return player.master_sword.points.gte(65) },
        },
        16: {
            requirementDescription: "Get 77 Master Swords",
            effectDescription: "Keep Super Leaf upgrades and SLST on reset.",
            done() { return player.master_sword.points.gte(77) },
        },
        17: {
            requirementDescription: "Get 95 Master Swords",
            effectDescription: "Keep Cape Feather upgrades on reset.",
            done() { return player.master_sword.points.gte(95) },
        },
        18: {
            requirementDescription: "Get 101 Master Swords",
            effectDescription: "Keep Yoshi Egg upgrades on reset.",
            done() { return player.master_sword.points.gte(101) },
        },
    },

    multDE() {
        let DE = new Decimal(1)
        if (hasUpgrade('master_sword', 31)) DE = DE.times(upgradeEffect('master_sword', 31))
        if (hasUpgrade('master_sword', 23)) DE = DE.pow(2)
        if (hasUpgrade('master_sword', 32)) DE = DE.times(upgradeEffect('master_sword', 32))
        if (hasUpgrade('master_sword', 35)) DE = DE.times(buyableEffect('master_sword', 12))
        if (hasUpgrade('power_balloon', 12)) DE = DE.times(100)
    },

    clickables: {
        11: {
            title: "Create a bomb",
            display() {
                return "Spend a Master Sword to create a Link's Bomb."
            },
            canClick() { return player.master_sword.points.gte(1) },
            onClick() {
                return player.master_sword.points = player.master_sword.points.sub(1),
                    player.master_sword.links_bomb = player.master_sword.links_bomb.add(1)
            },
            unlocked() { return hasUpgrade('master_sword', 15) },
        },
        21: {
            title: "Detonate a bomb (top left)",
            display() {
                return "Defeat " + format(getExplotionDefeatMult(this.id)) + " enemy by explosion."
            },
            canClick() { return player.master_sword.links_bomb.gte(1) && player.master_sword.links_bomb_random == 1 },
            onClick() {
                clickDetonation(this.id)
            },
            unlocked() { return hasUpgrade('master_sword', 15) },
        },
        22: {
            title: "Detonate a bomb (top)",
            display() {
                return "Defeat " + format(getExplotionDefeatMult(this.id)) + " enemy by explosion."
            },
            canClick() { return player.master_sword.links_bomb.gte(1) && player.master_sword.links_bomb_random == 2 },
            onClick() {
                clickDetonation(this.id)
            },
            unlocked() { return hasUpgrade('master_sword', 15) },
        },
        23: {
            title: "Detonate a bomb (top right)",
            display() {
                return "Defeat " + format(getExplotionDefeatMult(this.id)) + " enemy by explosion."
            },
            canClick() { return player.master_sword.links_bomb.gte(1) && player.master_sword.links_bomb_random == 3 },
            onClick() {
                clickDetonation(this.id)
            },
            unlocked() { return hasUpgrade('master_sword', 15) },
        },
        31: {
            title: "Detonate a bomb (left)",
            display() {
                return "Defeat " + format(getExplotionDefeatMult(this.id)) + " enemy by explosion."
            },
            canClick() { return player.master_sword.links_bomb.gte(1) && player.master_sword.links_bomb_random == 4 },
            onClick() {
                clickDetonation(this.id)
            },
            unlocked() { return hasUpgrade('master_sword', 15) },
        },
        32: {
            title: "Detonate a bomb (center)",
            display() {
                return "Defeat " + format(getExplotionDefeatMult(this.id)) + " enemy by explosion."
            },
            canClick() { return player.master_sword.links_bomb.gte(1) && player.master_sword.links_bomb_random == 5 },
            onClick() {
                clickDetonation(this.id)
            },
            unlocked() { return hasUpgrade('master_sword', 15) },
        },
        33: {
            title: "Detonate a bomb (right)",
            display() {
                return "Defeat " + format(getExplotionDefeatMult(this.id)) + " enemy by explosion."
            },
            canClick() { return player.master_sword.links_bomb.gte(1) && player.master_sword.links_bomb_random == 6 },
            onClick() {
                clickDetonation(this.id)
            },
            unlocked() { return hasUpgrade('master_sword', 15) },
        },
        41: {
            title: "Detonate a bomb (bottom left)",
            display() {
                return "Defeat " + format(getExplotionDefeatMult(this.id)) + " enemy by explosion."
            },
            canClick() { return player.master_sword.links_bomb.gte(1) && player.master_sword.links_bomb_random == 7 },
            onClick() {
                clickDetonation(this.id)
            },
            unlocked() { return hasUpgrade('master_sword', 15) },
        },
        42: {
            title: "Detonate a bomb (bottom)",
            display() {
                return "Defeat " + format(getExplotionDefeatMult(this.id)) + " enemy by explosion."
            },
            canClick() { return player.master_sword.links_bomb.gte(1) && player.master_sword.links_bomb_random == 8 },
            onClick() {
                clickDetonation(this.id)
            },
            unlocked() { return hasUpgrade('master_sword', 15) },
        },
        43: {
            title: "Detonate a bomb (bottom right)",
            display() {
                return "Defeat " + format(getExplotionDefeatMult(this.id)) + " enemy by explosion."
            },
            canClick() { return player.master_sword.links_bomb.gte(1) && player.master_sword.links_bomb_random == 9 },
            onClick() {
                clickDetonation(this.id)
            },
            unlocked() { return hasUpgrade('master_sword', 15) },
        },
        51: {
            title: "Equip the shield",
            display() {
                return "Block enemies' attack, you need more shields. Click or hold to gain " + format(tmp.master_sword.multHS) + " Hyrule Shields."
            },
            canClick() { return player.master_sword.points.gte(1) },
            onClick() {
                return player.master_sword.hyrule_shield = player.master_sword.hyrule_shield.add(tmp.master_sword.multHS)
            },
            onHold() { return this.onClick() },
            unlocked() { return hasUpgrade('master_sword', 41) },
        },
        61: {
            title: "Ranged",
            display() {
                return "Ranged attack is a necessary ability for Link. Click or hold to gain " + format(tmp.master_sword.multBow) + " Link's Bows."
            },
            canClick() { return player.master_sword.points.gte(1) },
            onClick() {
                return player.master_sword.links_bow = player.master_sword.links_bow.add(tmp.master_sword.multBow)
            },
            onHold() { return this.onClick() },
            unlocked() { return hasUpgrade('master_sword', 61) },
        },
        62: {
            title: "Snipe",
            display() {
                let ArDivpsec = new Decimal(1.1)
                return "Pause gaining arrows, start to divide arrows by " + format(ArDivpsec) + " per second.<br>If your arrows are decreased to 1, resume gaining arrows, stop dividing arrows.<br>You'll gain Ranged Kills when this button activated."
            },
            canClick() {
                if (hasUpgrade("master_sword", 82)) return false
                else if (player.master_sword.arrow.gte(1) && player.master_sword.arrow_status.lte(0.5))
                    return true
            },
            onClick() {
                return player.master_sword.arrow_status = new Decimal(1)
            },
            unlocked() { return hasUpgrade('master_sword', 63) },
            effect() {
                if (player.master_sword.arrow.lte(1)) player.master_sword.arrow_status = new Decimal(0)
            },
        },
    },

    multBow() {
        let LBowmult = new Decimal(1)
        if (hasUpgrade('master_sword', 63)) LBowmult = LBowmult.times(upgradeEffect('master_sword', 63))
        if (hasUpgrade('power_balloon', 12)) LBowmult = LBowmult.times(100)
        return LBowmult
    },

    multHS() {
        let HSmult = new Decimal(1)
        HSmult = HSmult.times(player.master_sword.points.max(1))
        if (hasUpgrade('master_sword', 73)) HSmult = HSmult.pow(upgradeEffect('master_sword', 73))
        if (hasUpgrade('master_sword', 42)) HSmult = HSmult.times(upgradeEffect('master_sword', 42))
        if (hasUpgrade('master_sword', 51)) HSmult = HSmult.pow(3)
        if (hasUpgrade('master_sword', 52)) HSmult = HSmult.times(buyableEffect('master_sword', 13))
        return HSmult
    },

    challenges: {
        11: {
            name: "Temple of Meckakoopas",
            challengeDescription() {
                let pow = d(1e-10)
                if (hasUpgrade('master_sword', 45)) pow = d(1e-9)
                if (hasUpgrade('master_sword', 65)) pow = d(1e-7)
                return `Disable 3rd Master Sword upgrade's effect, ^${f(pow)} Cleared Courses gain.`
            },
            goalDescription: "Get Cleared Courses as more as you can.",
            canComplete: function () {
                return player.points.gte(0)
            },
            rewardDescription: "You can get Rupee in this temple.",
            rewardEffect() {
                let rg = player.points.max(1).log(10).pow(player.points.max(10).slog(10).max(1))
                if (!inChallenge(this.layer, this.id) && !hasUpgrade(this.layer, 83)) rg = d(0)
                return rg
            },
            rewardDisplay() { return format(challengeEffect(this.layer, this.id)) + " base Rupee" },
            unlocked() { return hasUpgrade('master_sword', 33) },
        },
    },
    buyables: {
        11: {
            title: "Rupee efficiency",
            cost(x) { return new Decimal(5).pow(x.pow(1.4)) },
            display() {
                let MSB1base = new Decimal(5)
                if (hasUpgrade('master_sword', 41)) MSB1base = MSB1base.add(upgradeEffect('master_sword', 41))
                return ` Multiply Rupee gain by ${format(MSB1base)} per every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Rupee`
            },
            canAfford() { return player[this.layer].rupee.gte(this.cost()) },
            buy() {
                player[this.layer].rupee = player[this.layer].rupee.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                let MSB1base = new Decimal(5)
                if (hasUpgrade('master_sword', 41)) MSB1base = MSB1base.add(upgradeEffect('master_sword', 41))
                return Decimal.pow(MSB1base, x)
            },
            unlocked() { return hasUpgrade('master_sword', 34) }
        },
        12: {
            title: "Precise bomb",
            cost(x) { return new Decimal(3).pow(x.pow(1.3)).times(100) },
            display() {
                let MSB2base = new Decimal(7.5)
                if (hasUpgrade('master_sword', 41)) MSB2base = MSB2base.add(upgradeEffect('master_sword', 41))
                return ` Multiply Explotion Defeats by ${format(MSB2base)} per every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Rupee`
            },
            canAfford() { return player[this.layer].rupee.gte(this.cost()) },
            buy() {
                player[this.layer].rupee = player[this.layer].rupee.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                let MSB2base = new Decimal(7.5)
                if (hasUpgrade('master_sword', 41)) MSB2base = MSB2base.add(upgradeEffect('master_sword', 41))
                return Decimal.pow(MSB2base, x)
            },
            unlocked() { return hasUpgrade('master_sword', 35) }
        },
        13: {
            title: "Zonau alloy shield",
            cost(x) { return new Decimal(6.66).pow(x.pow(1.33)).times(100) },
            display() {
                let MSB3base = new Decimal(20)
                return ` Multiply Hyrule Shields by ${format(MSB3base)} per every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Rupee`
            },
            canAfford() { return player[this.layer].rupee.gte(this.cost()) },
            buy() {
                player[this.layer].rupee = player[this.layer].rupee.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                let MSB3base = new Decimal(20)
                return Decimal.pow(MSB3base, x)
            },
            unlocked() { return hasUpgrade('master_sword', 52) }
        },
        21: {
            title: "Arrow rain",
            cost(x) { return new Decimal(5).pow(x.pow(1.4)).times(1e32) },
            display() {
                let MSB4base = new Decimal(3.1415926535)
                return ` Multiply arrow gain by ${format(MSB4base)}(π) per every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Rupee`
            },
            canAfford() { return player[this.layer].rupee.gte(this.cost()) },
            buy() {
                player[this.layer].rupee = player[this.layer].rupee.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                let MSB4base = new Decimal(3.1415926535)
                return Decimal.pow(MSB4base, x)
            },
            unlocked() { return hasUpgrade('master_sword', 64) }
        },
        31: {
            title: "Increase the maximum HP limit",
            cost(x) { return Decimal.pow(x.add(1), 1.5).floor().max(1) },
            display() {
                return ` Spend Master Swords to buy Containers of Heart <br>
                Containers of Heart Bought: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${formatWhole(this.cost())} Master Swords`
            },
            canAfford() { return player[this.layer].points.gte(this.cost()) },
            buy() {
                player[this.layer].points = player[this.layer].points.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                return x
            },
            unlocked() { return hasUpgrade('master_sword', 72) }
        },
        32: {
            title: "Increase the maximum Energy limit",
            cost(x) { return Decimal.pow(x.add(1), 1.75).floor().max(1) },
            display() {
                return ` Spend Master Swords to buy Containers of Energy <br>
                Containers of Energy Bought: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${formatWhole(this.cost())} Master Swords`
            },
            canAfford() { return player[this.layer].points.gte(this.cost()) },
            buy() {
                player[this.layer].points = player[this.layer].points.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                return x
            },
            unlocked() { return hasUpgrade('master_sword', 73) }
        },
    },
    automate() {
    },
    update(diff) {
        //常规资源
        let tick = new Decimal(0.05)
        let bombmult = d(1)
        bombmult = bombmult.add(upgradeEffect('master_sword', 22).times(diff))
        if (hasMilestone('power_balloon', 0)) bombmult = bombmult.times(10)
        if (hasUpgrade('master_sword', 22)) player.master_sword.links_bomb = player.master_sword.links_bomb.add(bombmult.times(20))
        let multRup = new Decimal(1)
        multRup = multRup.times(challengeEffect('master_sword', 11))
        if (hasUpgrade('master_sword', 34)) multRup = multRup.times(buyableEffect('master_sword', 11))
        if (hasUpgrade('master_sword', 53) && player.master_sword.links_bomb_random == 1 ||
            hasUpgrade('master_sword', 53) && player.master_sword.links_bomb_random == 3 ||
            hasUpgrade('master_sword', 53) && player.master_sword.links_bomb_random == 7 ||
            hasUpgrade('master_sword', 53) && player.master_sword.links_bomb_random == 9 ||
            hasMilestone('usa_mushroom', 0)) multRup = multRup.times(1e20)
        if (hasMilestone('usa_mushroom', 1)) multRup = multRup.times(player.usa_mushroom.points.add(1).pow(7.5))
        if (player.boomerang_flower.boomerang.gte(1e9)) multRup = multRup.pow(upgradeEffect('boomerang_flower', 22))
        if (inChallenge('master_sword', 11) || hasUpgrade('master_sword', 83) || hasUpgrade('power_balloon', 14)) player.master_sword.rupee = multRup
        if (hasUpgrade('master_sword', 55) && player.master_sword.links_bomb_random == 5 || hasMilestone('usa_mushroom', 0)) player.master_sword.hyrule_shield = player.master_sword.hyrule_shield.add(tmp.master_sword.multHS.times(10).times(diff))
        let Armult = upgradeEffect('master_sword', 62).times(diff)
        if (hasUpgrade('master_sword', 64)) Armult = Armult.times(buyableEffect('master_sword', 21))
        if (hasMilestone('power_balloon', 0)) Armult = Armult.times(3)
        if (hasUpgrade('master_sword', 62)) player.master_sword.arrow = player.master_sword.arrow.add(Armult)
        let multRK = new Decimal(1)
        multRK = multRK.times(1.1)
        if (hasUpgrade('master_sword', 71)) multRK = multRK.pow(20)
        if (hasUpgrade('master_sword', 74)) multRK = multRK.pow(5)
        if (player.master_sword.arrow_status.gte(0.5)) player.master_sword.ranged_kills_mult = player.master_sword.ranged_kills_mult.times(multRK.root(20))
        if (player.master_sword.arrow_status.gte(0.5)) player.master_sword.ranged_kills = player.master_sword.ranged_kills.add(player.master_sword.ranged_kills_mult.times(diff))
        if (player.master_sword.arrow_status.gte(0.5)) player.master_sword.arrow = player.master_sword.arrow.div(multRK.root(20))
        if (player.master_sword.arrow_status.lte(0.5)) player.master_sword.ranged_kills_mult = new Decimal(1)
        if (hasUpgrade('master_sword', 72)) player.master_sword.container_of_heart = player.master_sword.buyables[31]
        if (hasUpgrade('master_sword', 72)) player.master_sword.container_total = player.master_sword.container_of_heart.add(player.master_sword.container_of_energy)
        if (hasUpgrade('master_sword', 73)) player.master_sword.container_of_energy = player.master_sword.buyables[32]
        if (hasUpgrade('master_sword', 82) || hasMilestone('power_balloon', 2)) player.master_sword.ranged_kills = player.master_sword.ranged_kills.add(player.master_sword.arrow.times(diff))
        if (hasUpgrade('master_sword', 84) || hasMilestone('power_balloon', 2)) player.master_sword.defeats_by_explosion = player.master_sword.defeats_by_explosion.add(getExplotionDefeatMult(21).times(diff))
        let LBowmult = new Decimal(1)
        if (hasUpgrade('master_sword', 63)) LBowmult = LBowmult.times(upgradeEffect('master_sword', 63))
        if (hasUpgrade('power_balloon', 12)) LBowmult = LBowmult.times(100)
        if (hasMilestone('frog_suit', 2)) player.master_sword.links_bow = player.master_sword.links_bow.add(LBowmult.times(diff).times(10))
        //购买项自动化
        if (hasMilestone('frog_suit', 0) && player.master_sword.rupee.gte(new Decimal(5).pow(player.master_sword.buyables[11].pow(1.4)))) player.master_sword.buyables[11] = player.master_sword.rupee.log(5).root(1.4).floor().add(1)
        if (hasMilestone('frog_suit', 0) && player.master_sword.rupee.gte(new Decimal(3).pow(player.master_sword.buyables[12].pow(1.3)).times(100))) player.master_sword.buyables[12] = player.master_sword.rupee.div(100).log(3).root(1.3).floor().add(1)
        if (hasMilestone('frog_suit', 0) && player.master_sword.rupee.gte(new Decimal(6.66).pow(player.master_sword.buyables[13].pow(1.33)).times(100))) player.master_sword.buyables[13] = player.master_sword.rupee.div(100).log(6.66).root(1.33).floor().add(1)
        if (hasMilestone('frog_suit', 0) && player.master_sword.rupee.gte(new Decimal(5).pow(player.master_sword.buyables[21].pow(1.4)).times(1e32))) player.master_sword.buyables[21] = player.master_sword.rupee.div(1e32).log(5).root(1.4).floor().add(1)
        if (hasMilestone('frog_suit', 0) && player.master_sword.points.gte(Decimal.pow(player.master_sword.buyables[31].add(1), 1.5).floor().max(1))) player.master_sword.buyables[31] = player.master_sword.points.root(1.5).sub(1).floor().add(1).max(0)
        if (hasMilestone('frog_suit', 0) && player.master_sword.points.gte(Decimal.pow(player.master_sword.buyables[32].add(1), 1.75).floor().max(1))) player.master_sword.buyables[32] = player.master_sword.points.root(1.75).sub(1).floor().add(1).max(0)

        if (player.master_sword.cooldown.gt(0)) player.master_sword.cooldown = player.master_sword.cooldown.sub(diff).max(0)
        if (player.master_sword.cooldown.lte(0)) player.master_sword.cooldown = d(0)
    },
    resetsNothing() {
        return (hasUpgrade('usa_mushroom', 15) || hasMilestone('power_balloon', 3))
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + formatWhole(player.super_bell.points) + ` Super Bells`],
        ["display-text", () => "Your best amount of Master Sword is " + formatWhole(player.master_sword.best)],
        ["display-text", () => "MS resets have a 0.1s cooldown"],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Master Sword is from The Legend of Zelda (1986, FC/NES). <br>It's available in course editor after SMM2 v2.0.0 update. `],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "Link's Bomb": {
                unlocked() { return hasUpgrade('master_sword', 15) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return "You have <h2 style='color: #2730b8; text-shadow: 0 0 10px #2730b8'>" + format(player.master_sword.links_bomb) + "</h2> Link's Bombs."
                    }],
                    ["display-text", function () {
                        return "You have defeated <h2 style='color: #2730b8; text-shadow: 0 0 10px #2730b8'>" + format(player.master_sword.defeats_by_explosion) + "</h2> Enemies by Explosion, multiply Master Sword gain by <h2 style='color: #2730b8; text-shadow: 0 0 10px #2730b8'>" + format(player.master_sword.defeats_by_explosion.add(2).log(2).root(4).max(1)) + "x</h2>"
                    }],
                    ["display-text", function () {
                        return "You can detonate your bomb on Area " + formatWhole(player.master_sword.links_bomb_random)
                    }],
                    "blank",
                    ["clickables", [1]],
                    "blank",
                    ["clickables", [2, 3, 4]],
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #2730b8, #4056ad)',
                        'border-color': '#2730b8',
                        'color': 'white',
                    }
                },
            },
            "Temples": {
                unlocked() { return hasUpgrade('master_sword', 33) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return "You have <h2 style='color: #107010; text-shadow: 0 0 10px #107010'>" + format(player.master_sword.rupee) + "</h2> Rupee."
                    }],
                    "challenges",
                    "blank",
                    ["buyables", [1, 2]],
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #107010, #e0cc00)',
                        'border-color': '#107010',
                        'color': 'black',
                    }
                },
            },
            "Hyrule Shield": {
                unlocked() { return hasUpgrade('master_sword', 41) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return "You have <h2 style='color: #2730b8; text-shadow: 0 0 10px #2730b8'>" + format(player.master_sword.hyrule_shield) + "</h2> Hyrule Shields, increase 'Precise bomb' base by <h2 style='color: #2730b8; text-shadow: 0 0 10px #2730b8'>+" + format(upgradeEffect('master_sword', 41) + "</h2>")
                    }],
                    ["clickables", [5]],
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #2730b8, #e0cc00)',
                        'border-color': '#2730b8',
                        'color': 'white',
                    }
                },
            },
            "Link's Bow": {
                unlocked() { return hasUpgrade('master_sword', 61) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return "You have <h2 style='color: #2730b8; text-shadow: 0 0 10px #2730b8'>" + format(player.master_sword.links_bow) + "</h2> Link's Bows, increase 'Box accelerator' base by <h2 style='color: #2730b8; text-shadow: 0 0 10px #2730b8'>+" + format(upgradeEffect('master_sword', 61) + "</h2>")
                    }],
                    ["display-text", function () {
                        return "You have <h2 style='color: #42b2fa; text-shadow: 0 0 10px #42b2fa'>" + format(player.master_sword.arrow) + "</h2> arrows"
                    }],
                    ["display-text", function () {
                        return "You have <h2 style='color: #2730b8; text-shadow: 0 0 10px #2730b8'>" + format(player.master_sword.ranged_kills) + "</h2> Ranged Kills, multiply Link's Bow gain by <h2 style='color: #2730b8; text-shadow: 0 0 10px #2730b8'>" + format(upgradeEffect('master_sword', 63)) + "x</h2>"
                    }],
                    ["clickables", [6]],
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #2730b8, #42b2fa)',
                        'border-color': '#42b2fa',
                        'color': 'white',
                    }
                },
            },
            "Container": {
                unlocked() { return hasUpgrade('master_sword', 72) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return "You have <h2 style='color: #2730b8; text-shadow: 0 0 10px #2730b8'>" + formatWhole(player.master_sword.container_total) + "</h2> Total Containers"
                    }],
                    ["display-text", function () {
                        return "You have <h2 style='color: #ff2a32; text-shadow: 0 0 10px #ff2a32'>" + formatWhole(player.master_sword.container_of_heart) + "</h2> Containers of Heart, delay 2nd Coin upgrade effect's softcap again by <h2 style='color: #ff2a32; text-shadow: 0 0 10px #ff2a32'>^" + format(upgradeEffect('master_sword', 72))
                    }],
                    ["display-text", function () {
                        if (hasUpgrade('master_sword', 73))
                            return "You have <h2 style='color: #00dd00; text-shadow: 0 0 10px #00dd00'>" + formatWhole(player.master_sword.container_of_energy) + "</h2> Containers of Energy, power base Hyrule Shield gain by <h2 style='color: #00dd00; text-shadow: 0 0 10px #00dd00'>^" + format(upgradeEffect('master_sword', 73))
                    }],
                    ["clickables", [7, 8]],
                    ["buyables", [3, 4]],
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #ff2a32, #00dd00)',
                        'border-color': '#2730b8',
                        'color': 'black',
                    }
                },
            },
        },
    },
})
// 第十五层：马力欧USA的蘑菇
addLayer("usa_mushroom", {
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            grabs: new Decimal(0),
        }
    },

    color: "#F93414",                       // The color for this layer, which affects many elements.
    resource: "SMB2 Mushrooms",            // The name of this layer's main prestige resource.
    row: 5,                                 // The row this layer is on (0 is the first row).
    position: 1,
    symbol: "SM2",
    baseResource: "Super Hammers",                 // The name of the resource your prestige gain is based on.
    branches: ["super_hammer"],


    baseAmount() { return player.super_hammer.points },  // A function to return the current amount of baseResource.

    requires: new Decimal(1e264),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.005,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        if (hasUpgrade('usa_mushroom', 32)) mult = mult.times(1000)
        if (hasUpgrade('frog_suit', 14)) mult = mult.times(upgradeEffect('frog_suit', 14))
        if (hasMilestone('power_balloon', 0)) mult = mult.times(3)
        if (hasUpgrade('power_balloon', 12)) mult = mult.times(100)
        if (hasAchievement('achievements', 122)) mult = mult.times(tmp.super_acorn.effect)
        if (hasUpgrade('super_acorn', 15)) mult = mult.times(upgradeEffect('super_acorn', 15))
        return mult
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },

    layerShown() { return hasAchievement('achievements', 111) },          // Returns a bool for if this layer's node should be visible in the tree.

    doReset(resettingLayer) {
        if (layers[resettingLayer].row >= 12) return undefined
        else if (layers[resettingLayer].row > layers[this.layer].row) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('power_balloon', 2)) {
                kept.push("milestones")
            }
            if (hasMilestone('power_balloon', 5)) {
                kept.push("upgrades")
            }
            layerDataReset(this.layer, kept)
        }
    },

    multGE() {
        let multGE = new Decimal(1)
        multGE = multGE.times(player.usa_mushroom.points.max(0))
        multGE = multGE.times(buyableEffect('usa_mushroom', 11))
        multGE = multGE.times(buyableEffect('usa_mushroom', 12))
        multGE = multGE.times(buyableEffect('usa_mushroom', 13))
        multGE = multGE.times(buyableEffect('usa_mushroom', 21))
        multGE = multGE.times(buyableEffect('usa_mushroom', 22))
        multGE = multGE.times(buyableEffect('usa_mushroom', 23))
        multGE = multGE.times(buyableEffect('usa_mushroom', 32))
        multGE = multGE.times(buyableEffect('usa_mushroom', 33))
        multGE = multGE.times(buyableEffect('usa_mushroom', 41))
        multGE = multGE.times(buyableEffect('usa_mushroom', 42))
        multGE = multGE.times(buyableEffect('usa_mushroom', 43))
        if (hasUpgrade('usa_mushroom', 21)) multGE = multGE.times(upgradeEffect('usa_mushroom', 21))
        if (hasUpgrade('usa_mushroom', 25)) multGE = multGE.times(upgradeEffect('usa_mushroom', 25))
        if (hasUpgrade('master_sword', 81)) multGE = multGE.times(upgradeEffect('master_sword', 81))
        if (hasUpgrade('usa_mushroom', 32)) multGE = multGE.times(1e25)
        if (hasUpgrade('usa_mushroom', 34)) multGE = multGE.times(upgradeEffect('usa_mushroom', 34))
        if (hasUpgrade('frog_suit', 34)) multGE = multGE.pow(upgradeEffect('frog_suit', 34))
        if (hasUpgrade('power_balloon', 42)) multGE = multGE.times(upgradeEffect('power_balloon', 42))
        return multGE
    },

    update(diff) {
        if (hasUpgrade('usa_mushroom', 12)) player.usa_mushroom.grabs = player.usa_mushroom.grabs.add(tmp.usa_mushroom.multGE.times(diff))

        if (hasUpgrade('power_balloon', 11)) player.usa_mushroom.buyables[11] = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).max(1).log(5.55).floor()
        if (hasUpgrade('power_balloon', 11)) player.usa_mushroom.buyables[12] = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).max(1).log(12).floor()
        if (hasUpgrade('power_balloon', 11)) player.usa_mushroom.buyables[13] = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).max(1).log(25.6).floor()
        if (hasUpgrade('power_balloon', 11)) player.usa_mushroom.buyables[21] = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).div(10000000).max(1).log(77.77).floor().add(1)
        if (hasUpgrade('power_balloon', 11)) player.usa_mushroom.buyables[22] = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).div(1e9).max(1).log(145.14).floor().add(1)
        if (hasUpgrade('power_balloon', 11)) player.usa_mushroom.buyables[23] = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).div(1e17).max(1).log(514.114).floor().add(1)
        if (hasUpgrade('power_balloon', 11)) player.usa_mushroom.buyables[31] = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).div(5e25).max(1).log(1e10).root(1.35).floor().add(1)
        if (hasUpgrade('power_balloon', 11)) player.usa_mushroom.buyables[32] = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).div(1e20).max(1).log(1e10).root(1.25).floor().add(1)
        if (hasUpgrade('power_balloon', 11)) player.usa_mushroom.buyables[33] = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).div(1e25).max(1).log(1e15).root(1.25).floor().add(1)
        if (hasUpgrade('power_balloon', 11)) player.usa_mushroom.buyables[41] = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).div("1e360").max(1).log(1e13).root(1.5).floor().add(1)
        if (hasUpgrade('power_balloon', 11)) player.usa_mushroom.buyables[42] = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).div("1e425").max(1).log(1e30).root(1.6).floor().add(1)
        if (hasUpgrade('power_balloon', 11)) player.usa_mushroom.buyables[43] = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).div("1e917").max(1).log(1e100).root(3).floor().add(1)
    },

    passiveGeneration() { return hasMilestone('super_acorn', 2) },

    hotkeys: [
        { key: "2", description: "2: Reset for SMB2 Mushrooms", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],
    upgrades: {
        11: {
            title: "Standing",
            description() { return `${f(7000)}x Super Hammer gain.` },
            cost: new Decimal(3),
            unlocked() { return true },
        },
        12: {
            title: "On enemies",
            description: "Unlock subtab 'Grabbing'.",
            cost: new Decimal(5),
            unlocked() { return hasUpgrade('usa_mushroom', 11) },
            effect() {
                return player.usa_mushroom.grabs.max(1).pow(5).times(1e-10).max(1)
            }
        },
        13: {
            title: "Grab more",
            description: "Unlock 3 more buyables in 'Grabbing'.",
            currencyDisplayName: "Grabbing Enemies",
            currencyInternalName: "grabs",
            currencyLayer: "usa_mushroom",
            cost: new Decimal(10000000),
            unlocked() { return hasUpgrade('usa_mushroom', 12) },
        },
        14: {
            title: "Snowballs",
            description: "Multiply Characters' Box based on Super Hammer.",
            currencyDisplayName: "Grabbing Enemies",
            currencyInternalName: "grabs",
            currencyLayer: "usa_mushroom",
            cost: new Decimal(24000000),
            unlocked() { return hasUpgrade('usa_mushroom', 13) },
            effect() {
                return player.super_hammer.points.max(1).pow(33.33)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        15: {
            title: "Then throw",
            description: "Master Sword resets nothing.",
            currencyDisplayName: "Master Swords",
            currencyInternalName: "points",
            currencyLayer: "master_sword",
            cost: new Decimal(153),
            unlocked() { return hasUpgrade('usa_mushroom', 14) },
        },
        21: {
            title: "On goombas",
            description: "Multiply Grabbing Enemies based on Master Sword.",
            currencyDisplayName: "Master Swords",
            currencyInternalName: "points",
            currencyLayer: "master_sword",
            cost: new Decimal(178),
            unlocked() { return hasUpgrade('usa_mushroom', 15) },
            effect() {
                return player.master_sword.points.max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        22: {
            title: "On bullet bills",
            description: "Unlock a new buyables in 'Grabbing'.",
            currencyDisplayName: "Grabbing Enemies",
            currencyInternalName: "grabs",
            currencyLayer: "usa_mushroom",
            cost: new Decimal(1e25),
            unlocked() { return hasUpgrade('usa_mushroom', 21) },
        },
        23: {
            title: "On shells",
            description: "Unlock a new buyables in 'Grabbing'.",
            currencyDisplayName: "Grabbing Enemies",
            currencyInternalName: "grabs",
            currencyLayer: "usa_mushroom",
            cost: new Decimal(1e30),
            unlocked() { return hasUpgrade('usa_mushroom', 22) },
        },
        24: {
            title: "On magikoopas",
            description: "Unlock a new buyables in 'Grabbing'.",
            currencyDisplayName: "Grabbing Enemies",
            currencyInternalName: "grabs",
            currencyLayer: "usa_mushroom",
            cost: new Decimal(1e39),
            unlocked() { return hasUpgrade('usa_mushroom', 23) },
        },
        25: {
            title: "Grab a big enemy",
            description() { return `Multiply Grabbing Enemies based on itself. (Hardcap at ${f(1.79e308)}x)` },
            currencyDisplayName: "Grabbing Enemies",
            currencyInternalName: "grabs",
            currencyLayer: "usa_mushroom",
            cost: new Decimal(1e50),
            unlocked() { return hasUpgrade('usa_mushroom', 24) },
            effect() {
                return player.usa_mushroom.grabs.max(1).pow(0.5).min("1.79e308")
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        31: {
            title: "6-block jump",
            description: "Unlock 36th Master Sword upgrade.",
            currencyDisplayName: "Grabbing Enemies",
            currencyInternalName: "grabs",
            currencyLayer: "usa_mushroom",
            cost: new Decimal(1e142),
            unlocked() { return hasUpgrade('usa_mushroom', 25) },

        },
        32: {
            title: "Chain hit goomba",
            description() { return `${f(1000)}x SMB2 Mushroom, ${f(1e25)}x Grabbing Enemies gain.` },
            cost: new Decimal(234567890),
            unlocked() { return hasUpgrade('master_sword', 85) },
        },
        33: {
            title: "Chain hit koopa",
            description: "Unlock the last 3 buyables in 'Grabbing'.",
            cost: new Decimal(1.66e13),
            unlocked() { return hasUpgrade('usa_mushroom', 32) },
        },
        34: {
            title: "Chain hit monty mole",
            description: "Multiply Grabbing Enemies based on itself, but weaker.",
            currencyDisplayName: "Grabbing Enemies",
            currencyInternalName: "grabs",
            currencyLayer: "usa_mushroom",
            cost: new Decimal("3.33e686"),
            unlocked() { return hasUpgrade('usa_mushroom', 33) },
            effect() {
                return player.usa_mushroom.grabs.max(1).log(10).pow(10).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        35: {
            title: "Mushroom's dark side",
            description: "Unlock a new subtab in 1UP Mushroom layer.",
            currencyDisplayName: "Grabbing Enemies",
            currencyInternalName: "grabs",
            currencyLayer: "usa_mushroom",
            cost: new Decimal("5.1e747"),
            unlocked() { return hasUpgrade('usa_mushroom', 34) || hasUpgrade(this.layer, this.id) },
        },
        // Look in the upgrades docs to see what goes here!
    },
    milestones: {
        0: {
            requirementDescription: "Get 1 SMB2 Mushroom",
            effectDescription: "23rd, 24th and 25th Master Sword upgrsdes' effects are always activated.",
            done() { return player.usa_mushroom.points.gte(1) },
        },
        1: {
            requirementDescription: "Get 2 SMB2 Mushrooms",
            effectDescription() { return "Multiply Rupee gain based on SMB2 Mushrooms. <br>Currently: " + format(player.usa_mushroom.points.add(1).pow(7.5)) + "x" },
            done() { return player.usa_mushroom.points.gte(2) },
        },
    },
    buybulk() {
        let b = d(1)
        if (hasMilestone('power_balloon', 0)) b = d(10)
        return b
    },
    buyables: {
        11: {
            title: "Normal Grabbing",
            cost(x) { return new Decimal(5.55).pow(x.add(1)).div(buyableEffect('usa_mushroom', 31)) },
            display() {
                return ` Multiply Grabbing Enemies gain. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Grabbing Enemies`
            },
            canAfford() { return player[this.layer].grabs.gte(this.cost()) },
            buy() {
                let x = getBuyableAmount(this.layer, this.id)
                if (!hasMilestone('power_balloon', 0)) {
                    player[this.layer].grabs = player[this.layer].grabs.sub(this.cost())
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                }
                if (hasMilestone('power_balloon', 0)) {
                    let bulk = d(1)
                    bulk = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).max(1).log(5.55).floor().sub(x).max(1)
                    if (bulk.gt(tmp.usa_mushroom.buybulk)) bulk = tmp.usa_mushroom.buybulk
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(bulk))
                }
            },
            effect(x) {
                return x.add(1).max(1)
            },
            unlocked() { return true }
        },
        12: {
            title: "Kilo Grabbing",
            cost(x) { return new Decimal(12).pow(x.add(1)).div(buyableEffect('usa_mushroom', 31)) },
            display() {
                return ` Multiply Grabbing Enemies gain. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Grabbing Enemies`
            },
            canAfford() { return player[this.layer].grabs.gte(this.cost()) },
            buy() {
                let x = getBuyableAmount(this.layer, this.id)
                if (!hasMilestone('power_balloon', 0)) {
                    player[this.layer].grabs = player[this.layer].grabs.sub(this.cost())
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                }
                if (hasMilestone('power_balloon', 0)) {
                    let bulk = d(1)
                    bulk = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).max(1).log(12).floor().sub(x).max(1)
                    if (bulk.gt(tmp.usa_mushroom.buybulk)) bulk = tmp.usa_mushroom.buybulk
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(bulk))
                }
            },
            effect(x) {
                return x.pow(2).add(1).max(1)
            },
            unlocked() { return true }
        },
        13: {
            title: "Mega Grabbing",
            cost(x) { return new Decimal(25.6).pow(x.add(1)).div(buyableEffect('usa_mushroom', 31)) },
            display() {
                return ` Multiply Grabbing Enemies gain. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Grabbing Enemies`
            },
            canAfford() { return player[this.layer].grabs.gte(this.cost()) },
            buy() {
                let x = getBuyableAmount(this.layer, this.id)
                if (!hasMilestone('power_balloon', 0)) {
                    player[this.layer].grabs = player[this.layer].grabs.sub(this.cost())
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                }
                if (hasMilestone('power_balloon', 0)) {
                    let bulk = d(1)
                    bulk = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).max(1).log(25.6).floor().sub(x).max(1)
                    if (bulk.gt(tmp.usa_mushroom.buybulk)) bulk = tmp.usa_mushroom.buybulk
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(bulk))
                }
            },
            effect(x) {
                return x.pow(3).add(1).max(1)
            },
            unlocked() { return true }
        },
        21: {
            title: "Giga Grabbing",
            cost(x) { return new Decimal(77.77).pow(x).times(10000000).div(buyableEffect('usa_mushroom', 31)) },
            display() {
                return ` Multiply Grabbing Enemies gain. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Grabbing Enemies`
            },
            canAfford() { return player[this.layer].grabs.gte(this.cost()) },
            buy() {
                let x = getBuyableAmount(this.layer, this.id)
                if (!hasMilestone('power_balloon', 0)) {
                    player[this.layer].grabs = player[this.layer].grabs.sub(this.cost())
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                }
                if (hasMilestone('power_balloon', 0)) {
                    let bulk = d(1)
                    bulk = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).div(10000000).max(1).log(77.77).floor().add(1).sub(x).max(1)
                    if (bulk.gt(tmp.usa_mushroom.buybulk)) bulk = tmp.usa_mushroom.buybulk
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(bulk))
                }
            },
            effect(x) {
                return x.pow(4).add(1).max(1)
            },
            unlocked() { return hasUpgrade('usa_mushroom', 13) }
        },
        22: {
            title: "Tera Grabbing",
            cost(x) { return new Decimal(145.14).pow(x).times(1e9).div(buyableEffect('usa_mushroom', 31)) },
            display() {
                return ` Multiply Grabbing Enemies gain. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Grabbing Enemies`
            },
            canAfford() { return player[this.layer].grabs.gte(this.cost()) },
            buy() {
                let x = getBuyableAmount(this.layer, this.id)
                if (!hasMilestone('power_balloon', 0)) {
                    player[this.layer].grabs = player[this.layer].grabs.sub(this.cost())
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                }
                if (hasMilestone('power_balloon', 0)) {
                    let bulk = d(1)
                    bulk = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).div(1e9).max(1).log(145.14).floor().add(1).sub(x).max(1)
                    if (bulk.gt(tmp.usa_mushroom.buybulk)) bulk = tmp.usa_mushroom.buybulk
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(bulk))
                }
            },
            effect(x) {
                return x.pow(5).add(1).max(1)
            },
            unlocked() { return hasUpgrade('usa_mushroom', 13) }
        },
        23: {
            title: "Peta Grabbing",
            cost(x) { return new Decimal(514.114).pow(x).times(1e17).div(buyableEffect('usa_mushroom', 31)) },
            display() {
                return ` Multiply Grabbing Enemies gain. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Grabbing Enemies`
            },
            canAfford() { return player[this.layer].grabs.gte(this.cost()) },
            buy() {
                let x = getBuyableAmount(this.layer, this.id)
                if (!hasMilestone('power_balloon', 0)) {
                    player[this.layer].grabs = player[this.layer].grabs.sub(this.cost())
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                }
                if (hasMilestone('power_balloon', 0)) {
                    let bulk = d(1)
                    bulk = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).div(1e17).max(1).log(514.114).floor().add(1).sub(x).max(1)
                    if (bulk.gt(tmp.usa_mushroom.buybulk)) bulk = tmp.usa_mushroom.buybulk
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(bulk))
                }
            },
            effect(x) {
                return x.pow(6).add(1).max(1)
            },
            unlocked() { return hasUpgrade('usa_mushroom', 13) }
        },
        31: {
            title: "Exa Grabbing",
            cost(x) { return new Decimal(1e10).pow(x.pow(1.35)).times(5e25).div(hasMilestone('power_balloon', 0) ? buyableEffect('usa_mushroom', 31) : 1) },
            display() {
                let affbuy = '6'
                if (hasMilestone('power_balloon', 0)) affbuy = '12'
                return ` Divide 1~${affbuy} SMB2 buyables' cost. <br>
                Effect: /${format(this.effect())} <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Grabbing Enemies`
            },
            canAfford() { return player[this.layer].grabs.gte(this.cost()) },
            buy() {
                let x = getBuyableAmount(this.layer, this.id)
                if (!hasMilestone('power_balloon', 0)) {
                    player[this.layer].grabs = player[this.layer].grabs.sub(this.cost())
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                }
                if (hasMilestone('power_balloon', 0)) {
                    let bulk = d(1)
                    bulk = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).div(5e25).max(1).log(1e10).root(1.35).floor().add(1).sub(x).max(1)
                    if (bulk.gt(tmp.usa_mushroom.buybulk)) bulk = tmp.usa_mushroom.buybulk
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(bulk))
                }
            },
            effect(x) {
                return Decimal.pow(100000, x).max(1)
            },
            unlocked() { return hasUpgrade('usa_mushroom', 22) }
        },
        32: {
            title: "Zetta Grabbing",
            cost(x) { return new Decimal(1e10).pow(x.pow(1.25)).times(1e20).div(hasMilestone('power_balloon', 0) ? buyableEffect('usa_mushroom', 31) : 1) },
            display() {
                return ` Multiply Grabbing Enemies gain, but stronger. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Grabbing Enemies`
            },
            canAfford() { return player[this.layer].grabs.gte(this.cost()) },
            buy() {
                let x = getBuyableAmount(this.layer, this.id)
                if (!hasMilestone('power_balloon', 0)) {
                    player[this.layer].grabs = player[this.layer].grabs.sub(this.cost())
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                }
                if (hasMilestone('power_balloon', 0)) {
                    let bulk = d(1)
                    bulk = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).div(1e20).max(1).log(1e10).root(1.25).floor().add(1).sub(x).max(1)
                    if (bulk.gt(tmp.usa_mushroom.buybulk)) bulk = tmp.usa_mushroom.buybulk
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(bulk))
                }
            },
            effect(x) {
                return x.add(1).pow(10).max(1)
            },
            unlocked() { return hasUpgrade('usa_mushroom', 23) }
        },
        33: {
            title: "Yotta Grabbing",
            cost(x) { return new Decimal(1e15).pow(x.pow(1.25)).times(1e25).div(hasMilestone('power_balloon', 0) ? buyableEffect('usa_mushroom', 31) : 1) },
            display() {
                return ` Multiply Grabbing Enemies gain, but stronger. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Grabbing Enemies`
            },
            canAfford() { return player[this.layer].grabs.gte(this.cost()) },
            buy() {
                let x = getBuyableAmount(this.layer, this.id)
                if (!hasMilestone('power_balloon', 0)) {
                    player[this.layer].grabs = player[this.layer].grabs.sub(this.cost())
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                }
                if (hasMilestone('power_balloon', 0)) {
                    let bulk = d(1)
                    bulk = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).div(1e25).max(1).log(1e15).root(1.25).floor().add(1).sub(x).max(1)
                    if (bulk.gt(tmp.usa_mushroom.buybulk)) bulk = tmp.usa_mushroom.buybulk
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(bulk))
                }
            },
            effect(x) {
                return x.add(1).pow(15).max(1)
            },
            unlocked() { return hasUpgrade('usa_mushroom', 24) }
        },
        41: {
            title: "Ronna Grabbing",
            cost(x) { return new Decimal("1e360").times(Decimal.pow(1e13, x.pow(1.5))).div(hasMilestone('power_balloon', 0) ? buyableEffect('usa_mushroom', 31) : 1) },
            display() {
                return ` Multiply Grabbing Enemies gain, but much stronger. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Grabbing Enemies`
            },
            canAfford() { return player[this.layer].grabs.gte(this.cost()) },
            buy() {
                let x = getBuyableAmount(this.layer, this.id)
                if (!hasMilestone('power_balloon', 0)) {
                    player[this.layer].grabs = player[this.layer].grabs.sub(this.cost())
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                }
                if (hasMilestone('power_balloon', 0)) {
                    let bulk = d(1)
                    bulk = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).div("1e360").max(1).log(1e13).root(1.5).floor().add(1).sub(x).max(1)
                    if (bulk.gt(tmp.usa_mushroom.buybulk)) bulk = tmp.usa_mushroom.buybulk
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(bulk))
                }
            },
            effect(x) {
                return Decimal.pow(1e10, x).max(1)
            },
            unlocked() { return hasUpgrade('usa_mushroom', 33) }
        },
        42: {
            title: "Quetta Grabbing",
            cost(x) { return new Decimal("1e425").times(Decimal.pow(1e30, x.pow(1.6))).div(hasMilestone('power_balloon', 0) ? buyableEffect('usa_mushroom', 31) : 1) },
            display() {
                return ` Multiply Grabbing Enemies gain, but super stronger. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Grabbing Enemies`
            },
            canAfford() { return player[this.layer].grabs.gte(this.cost()) },
            buy() {
                let x = getBuyableAmount(this.layer, this.id)
                if (!hasMilestone('power_balloon', 0)) {
                    player[this.layer].grabs = player[this.layer].grabs.sub(this.cost())
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                }
                if (hasMilestone('power_balloon', 0)) {
                    let bulk = d(1)
                    bulk = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).div("1e425").max(1).log(1e30).root(1.6).floor().add(1).sub(x).max(1)
                    if (bulk.gt(tmp.usa_mushroom.buybulk)) bulk = tmp.usa_mushroom.buybulk
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(bulk))
                }
            },
            effect(x) {
                return Decimal.pow(1e20, x).max(1)
            },
            unlocked() { return hasUpgrade('usa_mushroom', 33) }
        },
        43: {
            title: "Henda Grabbing",
            cost(x) { return new Decimal("1e917").times(Decimal.pow(1e100, x.pow(3))).div(hasMilestone('power_balloon', 0) ? buyableEffect('usa_mushroom', 31) : 1) },
            display() {
                return ` Multiply Grabbing Enemies gain, but insanely stronger. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Grabbing Enemies`
            },
            canAfford() { return player[this.layer].grabs.gte(this.cost()) },
            buy() {
                let x = getBuyableAmount(this.layer, this.id)
                if (!hasMilestone('power_balloon', 0)) {
                    player[this.layer].grabs = player[this.layer].grabs.sub(this.cost())
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                }
                if (hasMilestone('power_balloon', 0)) {
                    let bulk = d(1)
                    bulk = player.usa_mushroom.grabs.times(buyableEffect('usa_mushroom', 31)).div("1e917").max(1).log(1e100).root(3).floor().add(1).sub(x).max(1)
                    if (bulk.gt(tmp.usa_mushroom.buybulk)) bulk = tmp.usa_mushroom.buybulk
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(bulk))
                }
            },
            effect(x) {
                return Decimal.pow(1e100, x).max(1)
            },
            unlocked() { return hasUpgrade('usa_mushroom', 33) }
        },
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + formatWhole(player.super_hammer.points) + ` Super Hammers`],
        ["display-text", () => `Your best amount of SMB2 Mushroom is ` + formatWhole(player.usa_mushroom.best)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">With SMB2 Mushroom, you can stand on enemies, even grab and throw them.`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "Grabbing": {
                unlocked() { return hasUpgrade('usa_mushroom', 12) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return "You are grabbing <h2 style='color: #f93414; text-shadow: 0 0 10px #f93414'>" + format(player.usa_mushroom.grabs) + "</h2> Enemies, multiply Super Hammer gain by <h2 style='color: #f93414; text-shadow: 0 0 10px #f93414'>" + format(upgradeEffect('usa_mushroom', 12)) + "x</h2><br>Base Grabbing Enemy gain is based on SMB2 Mushroom. If your SMB2 Mushroom is 0, you can't gain any Grabbing Enemies."
                    }],
                    ["display-text", function () {
                        return `(${textStyle_h2("+" + f(tmp.usa_mushroom.multGE), 'f93414')}/sec)`
                    }],
                    "buyables",
                ],
                buttonStyle() {
                    return {
                        'background': 'radial-gradient(#f93414 50%, #030f88)',
                        'border-color': '#030f88',
                        'color': 'white',
                    }
                },
            },
        },
    },
})
// 第十六层：青蛙装
addLayer("frog_suit", {
    componentStyles: {
        "buyable"() {
            return {
                'margin-left': '-7px',
                'margin-right': '-7px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            swim_speed: new Decimal(0),
            swim_calculations: new Decimal(0),
            swim_calculations_max: new Decimal(5),
            swim_calculations_auto: new Decimal(0),
        }
    },

    color: "#24AA0C",                       // The color for this layer, which affects many elements.
    resource: "Frog Suits",            // The name of this layer's main prestige resource.
    row: 5,                                 // The row this layer is on (0 is the first row).
    position: 2,
    branches: ["propeller_mushroom"],
    symbol: "FS",

    baseResource: "Invincible Stars",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.invincible_star.points },  // A function to return the current amount of baseResource.

    requires: new Decimal(1.35e13),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.7,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        if (hasUpgrade('frog_suit', 11)) mult = mult.times(3)
        if (hasUpgrade('frog_suit', 12)) mult = mult.times(upgradeEffect('frog_suit', 12))
        if (hasUpgrade('frog_suit', 15)) mult = mult.times(upgradeEffect('frog_suit', 15))
        if (hasMilestone('frog_suit', 1)) mult = mult.times(player.achievements.points.max(1).log(10).max(1).log(10).max(1))
        if (hasMilestone('power_balloon', 0)) mult = mult.times(3)
        if (hasUpgrade('power_balloon', 13)) mult = mult.times(100)
        if (hasUpgrade('frog_suit', 41)) mult = mult.times(upgradeEffect('frog_suit', 41))
        if (hasUpgrade('power_balloon', 44)) mult = mult.times(upgradeEffect('power_balloon', 44))
        if (hasMilestone('boomerang_flower', 0)) mult = mult.times(100)
        if (hasUpgrade('mario', 12)) mult = mult.times(upgradeEffect('mario', 12))
        return mult
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },

    layerShown() { return hasMilestone('oneup_mushroom', 2) || hasAchievement('achievements', 114) },          // Returns a bool for if this layer's node should be visible in the tree.

    hotkeys: [
        { key: "q", description: "Q: Reset for Frog Suits", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],

    doReset(resettingLayer) {
        if (layers[resettingLayer].row >= 12) return undefined
        else if (layers[resettingLayer].row > layers[this.layer].row) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('power_balloon', 2)) {
                kept.push("milestones")
            }
            if (hasMilestone('power_balloon', 5)) {
                kept.push("upgrades")
            }
            if (hasUpgrade('super_acorn', 22)) {
                kept.push("buyables"),
                    kept.push("swim_calculations"),
                    kept.push("swim_calculations_max")
            }
            layerDataReset(this.layer, kept)
        }
    },

    passiveGeneration() { return hasMilestone('power_balloon', 6) },

    upgrades: {
        11: {
            title: "Why Mario has a green suit?",
            description: "Triple Frog Suit gain",
            cost: new Decimal(5),
            unlocked() { return true },
        },
        12: {
            title: "He actually has a red one",
            description() { return `Rotten Mushroom boosts Frog Suit gain (Hardcap at ${f(1e6)}x)` },
            cost: new Decimal(24),
            unlocked() { return hasUpgrade('frog_suit', 11) },
            effect() {
                return player.oneup_mushroom.rotten_mushroom.max(1).root(4).min(1000000)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        13: {
            title: "But only in multiplayer mode",
            description: "^1.5 Container of Heart effect.",
            cost: new Decimal(166),
            unlocked() { return hasUpgrade('frog_suit', 12) },
        },
        14: {
            title: "Walk? Jump?",
            description() { return `Multiply SMB2 Mushroom gain based on Frog Suit. (Hardcap at ${f(1e100)}x)` },
            cost: new Decimal(12000),
            unlocked() { return hasUpgrade('frog_suit', 13) },
            effect() {
                return player.frog_suit.points.max(1).pow(5).min(1e100)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        15: {
            title: "Free swim",
            description: "Unlock a subtab 'Swimming'.",
            cost: new Decimal(16000),
            unlocked() { return hasUpgrade('frog_suit', 14) },
            effect() {
                dilateexp = new Decimal(0.5)
                if (hasUpgrade('frog_suit', 43)) dilateexp = new Decimal(0.25)
                swimfact = player.frog_suit.swim_speed
                if (hasUpgrade('power_balloon', 24) || hasMilestone('boomerang_flower', 2)) swimfact = player.power_balloon.SSbest
                rootfact = player.frog_suit.swim_speed.max(1).log(10).max(1).pow(dilateexp)
                if (hasUpgrade('power_balloon', 24) || hasMilestone('boomerang_flower', 2)) rootfact = player.power_balloon.SSbest.log(10).max(1).pow(dilateexp)
                return swimfact.root(rootfact).max(1)
            },
        },
        21: {
            title: "Best solution",
            description: "Unlock accelerator 3.<br>*Cost is 6.75 Swim speed actually",
            currencyDisplayName: "Swimming speed",
            currencyInternalName: "swim_speed",
            currencyLayer: "frog_suit",
            cost: new Decimal(6.75),
            unlocked() { return hasUpgrade('frog_suit', 15) },
        },
        22: {
            title: "Frog precision",
            description: "You can click accelerators max 10 times.",
            cost: new Decimal(3250000),
            unlocked() { return hasUpgrade('frog_suit', 21) },
        },
        23: {
            title: "Jump on water",
            description: "Unlock 3 new buyables for 3 accelerators.",
            cost: new Decimal(6250000),
            unlocked() { return hasUpgrade('frog_suit', 22) },
        },
        24: {
            title: "1f frog jump",
            description: "Frog Suit powers Rotten Mushroom gain.",
            cost: new Decimal(77889900),
            unlocked() { return hasUpgrade('frog_suit', 23) },
            effect() {
                return player.frog_suit.points.max(1).log(2.5).root(2.5)
            },
            effectDisplay() { return "^" + format(upgradeEffect(this.layer, this.id)) },
        },
        25: {
            title: "Frog's shell jump",
            description: "'Tradaka swimming' gives free level to 'Doka swimming'.",
            cost: new Decimal(2.5e9),
            unlocked() { return hasUpgrade('frog_suit', 24) },
            effect() {
                return player.frog_suit.buyables[12]
            },
            effectDisplay() { return "+" + formatWhole(upgradeEffect(this.layer, this.id)) + " free levels" },
        },
        31: {
            title: "Water, donut and frog",
            description: "Unlock a new buyables for accelerator click counts.",
            cost: new Decimal(4e9),
            unlocked() { return hasUpgrade('frog_suit', 25) },
        },
        32: {
            title: "Harder door entering",
            description: "^5 base Super Hammer gain.",
            cost: new Decimal(2.5e11),
            unlocked() { return hasUpgrade('frog_suit', 31) },
        },
        33: {
            title: "Limited running",
            description: "Accelerator 3's exponential base is raised to 0.8.",
            cost: new Decimal(3.5e11),
            unlocked() { return hasUpgrade('frog_suit', 32) },
        },
        34: {
            title: "In the night of the castle",
            description: "Power Grabbing Enemies based on unspent accelerator clicks",
            cost: new Decimal(5e11),
            unlocked() { return hasUpgrade('frog_suit', 33) },
            effect() {
                if (hasUpgrade('mario', 24)) return player.frog_suit.swim_calculations_max.div(100).add(1)
                else return player.frog_suit.swim_calculations.div(100).add(1)
            },
            effectDisplay() { return "^" + format(upgradeEffect(this.layer, this.id)) },
        },
        35: {
            title: "P fly",
            description: "Unlock a new layer on row 7.",
            currencyDisplayName: "Grabbing Enemies",
            currencyInternalName: "grabs",
            currencyLayer: "usa_mushroom",
            cost: new Decimal("2.22e2077"),
            unlocked() { return hasUpgrade('frog_suit', 34) || hasUpgrade(this.layer, this.id) },
        },
        41: {
            title: "Expand the frog ocean",
            description: "Boost Frog Suit gain based on Balloon Space but weaker.",
            cost: new Decimal(3e14),
            unlocked() { return hasUpgrade('power_balloon', 22) },
            effect() {
                return upgradeEffect('power_balloon', 21).root(2).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        42: {
            title: "Frog swimming race",
            description: "Unlock accelerator 4.",
            cost: new Decimal(9e15),
            unlocked() { return hasUpgrade('frog_suit', 41) },
        },
        43: {
            title: "5-block jump",
            description: "Make swimming speed effect stronger.",
            cost: new Decimal(2e18),
            unlocked() { return hasUpgrade('frog_suit', 42) },
        },
        44: {
            title: "SMM1 mystery mushroom",
            description: "1.05x Master Sword gain.",
            cost: new Decimal(1e36),
            unlocked() { return hasUpgrade('frog_suit', 43) },
        },
        45: {
            title: "No frog challenge",
            description: "^1.5 'Box accelerator' base.",
            cost: new Decimal(1e39),
            unlocked() { return hasUpgrade('frog_suit', 44) },
        },
        // Look in the upgrades docs to see what goes here!
    },
    milestones: {
        0: {
            requirementDescription: "Get 5 Frog Suits",
            effectDescription: "Automate buyables in Master Sword layer.",
            done() { return player.frog_suit.points.gte(5) },
        },
        1: {
            requirementDescription: "11.69m/s Frog Mario's swimming speed",
            effectDescription() {
                return "Frog Suit gain is boosted based on OoM^2s of AP. (Finally it affacts something T_T) <br>Currently: " + format(player.achievements.points.max(1).log(10).max(1).log(10).max(1)) + "x"
            },
            done() { return player.frog_suit.swim_speed.gte(11.69) },
        },
        2: {
            requirementDescription() { return "Get " + format(new Decimal(1e18)) + " Frog Suits" },
            effectDescription() {
                return "Passive gain 1000% Link's Bow every second."
            },
            done() { return player.frog_suit.points.gte(1e18) },
        },
    },
    clickables: {
        11: {
            title: "Speed reset",
            display() {
                return "Reset Frog Mario's swimming speed to 0m/s. And you'll regain all your accelerator click counts."
            },
            canClick() { return true },
            onClick() {
                return player.frog_suit.swim_speed = new Decimal(0),
                    player.frog_suit.swim_calculations = player.frog_suit.swim_calculations_max
            },
            unlocked() { return hasUpgrade('frog_suit', 15) }
        },
        21: {
            title: "Accelerator 1",
            display() {
                let acc1 = new Decimal(1)
                if (hasUpgrade('frog_suit', 23)) acc1 = acc1.add(buyableEffect('frog_suit', 11))
                return "Swim Speed +" + format(acc1) + "<br>Formula: x+" + format(acc1)
            },
            canClick() { return player.frog_suit.swim_calculations.gte(0.5) },
            onClick() {
                let acc1 = new Decimal(1)
                if (hasUpgrade('frog_suit', 23)) acc1 = acc1.add(buyableEffect('frog_suit', 11))
                return player.frog_suit.swim_calculations = player.frog_suit.swim_calculations.sub(1),
                    player.frog_suit.swim_speed = player.frog_suit.swim_speed.add(acc1)
            },
            effect() {
                let acc1 = new Decimal(1)
                if (hasUpgrade('frog_suit', 23)) acc1 = acc1.add(buyableEffect('frog_suit', 11))
                return acc1
            },
            unlocked() { return hasUpgrade('frog_suit', 15) }
        },
        22: {
            title: "Accelerator 2",
            display() {
                let acc2 = new Decimal(1.5)
                if (hasUpgrade('frog_suit', 23)) acc2 = acc2.add(buyableEffect('frog_suit', 12))
                return format(acc2) + "x Swim speed<br>Formula: " + format(acc2) + "x"
            },
            canClick() { return player.frog_suit.swim_calculations.gte(0.5) },
            onClick() {
                let acc2 = new Decimal(1.5)
                if (hasUpgrade('frog_suit', 23)) acc2 = acc2.add(buyableEffect('frog_suit', 12))
                return player.frog_suit.swim_calculations = player.frog_suit.swim_calculations.sub(1),
                    player.frog_suit.swim_speed = player.frog_suit.swim_speed.times(acc2)
            },
            effect() {
                let acc2 = new Decimal(1.5)
                if (hasUpgrade('frog_suit', 23)) acc2 = acc2.add(buyableEffect('frog_suit', 12))
                return acc2
            },
            unlocked() { return hasUpgrade('frog_suit', 15) }
        },
        23: {
            title: "Accelerator 3",
            display() {
                let acc3a = new Decimal(0.5)
                let acc3b = new Decimal(3)
                if (hasUpgrade('frog_suit', 23)) acc3b = acc3b.add(buyableEffect('frog_suit', 13))
                if (hasUpgrade('boomerang_flower', 13)) acc3a = new Decimal(1)
                else if (hasUpgrade('super_acorn', 11)) acc3a = new Decimal(0.95)
                else if (hasUpgrade('frog_suit', 33)) acc3a = new Decimal(0.8)
                return "Swim Speed ^" + format(acc3a) + " then x" + format(acc3b) + "<br>Formula: (x^" + format(acc3a) + ")·" + format(acc3b)
            },
            canClick() { return player.frog_suit.swim_calculations.gte(0.5) },
            onClick() {
                let acc3a = new Decimal(0.5)
                let acc3b = new Decimal(3)
                if (hasUpgrade('frog_suit', 23)) acc3b = acc3b.add(buyableEffect('frog_suit', 13))
                if (hasUpgrade('boomerang_flower', 13)) acc3a = new Decimal(1)
                else if (hasUpgrade('super_acorn', 11)) acc3a = new Decimal(0.95)
                else if (hasUpgrade('frog_suit', 33)) acc3a = new Decimal(0.8)
                return player.frog_suit.swim_calculations = player.frog_suit.swim_calculations.sub(1),
                    player.frog_suit.swim_speed = player.frog_suit.swim_speed.pow(acc3a).times(acc3b)
            },
            effect() {
                let acc3a = new Decimal(0.5)
                let acc3b = new Decimal(3)
                if (hasUpgrade('frog_suit', 23)) acc3b = acc3b.add(buyableEffect('frog_suit', 13))
                if (hasUpgrade('boomerang_flower', 13)) acc3a = new Decimal(1)
                else if (hasUpgrade('super_acorn', 11)) acc3a = new Decimal(0.95)
                else if (hasUpgrade('frog_suit', 33)) acc3a = new Decimal(0.8)
                return acc3b
            },
            unlocked() { return hasUpgrade('frog_suit', 21) }
        },
        24: {
            title: "Accelerator 4",
            display() {
                let acc4 = new Decimal(2)
                if (hasUpgrade('power_balloon', 41)) acc4 = acc4.add(upgradeEffect('power_balloon', 41))
                return "Swim Speed ^" + format(acc4) + "<br>Formula: x^" + format(acc4) + "<br>You can only click this accelerator once. (Set click count to 0)"
            },
            canClick() { return player.frog_suit.swim_calculations.gte(0.5) },
            onClick() {
                let acc4 = new Decimal(2)
                if (hasUpgrade('power_balloon', 41)) acc4 = acc4.add(upgradeEffect('power_balloon', 41))
                return player.frog_suit.swim_calculations = new Decimal(0),
                    player.frog_suit.swim_speed = player.frog_suit.swim_speed.pow(acc4)
            },
            effect() {
                let acc4 = new Decimal(2)
                if (hasUpgrade('power_balloon', 41)) acc4 = acc4.add(upgradeEffect('power_balloon', 41))
                return acc4
            },
            unlocked() { return hasUpgrade('frog_suit', 42) }
        },
    },
    buyables: {
        11: {
            title: "Doka swimming",
            cost(x) { return new Decimal(10).pow(Decimal.pow(x, 1.35).add(1)) },
            display() {
                let FRB1base = new Decimal(1)
                let FRB1free = upgradeEffect('frog_suit', 25)
                if (hasUpgrade('super_acorn', 21)) FRB1base = FRB1base.times(upgradeEffect('super_acorn', 22))
                let display = ` Increase accelerator 1's base by ${format(FRB1base)} per every level. <br>
                Effect: +${format(this.effect())} <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Frog Suits`
                if (hasUpgrade('frog_suit', 25)) display = ` Increase accelerator 1's base by ${format(FRB1base)} per every level. <br>
                Effect: +${format(this.effect())} <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id]) + "+" + formatWhole(FRB1free)}<br>
                Cost: ${format(this.cost())} Frog Suits`
                return display
            },
            canAfford() { return player[this.layer].points.gte(this.cost()) },
            buy() {
                player[this.layer].points = player[this.layer].points.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                let FRB1base = new Decimal(1)
                let effect = new Decimal(x.times(FRB1base))
                let FRB1free = upgradeEffect('frog_suit', 25)
                if (hasUpgrade('super_acorn', 21)) FRB1base = FRB1base.times(upgradeEffect('super_acorn', 22))
                if (hasUpgrade('frog_suit', 25)) effect = new Decimal(x.add(FRB1free)).times(FRB1base)
                return effect
            },
            unlocked() { return hasUpgrade('frog_suit', 23) }
        },
        12: {
            title: "Tradaka swimming",
            cost(x) { return new Decimal(10).pow(Decimal.pow(x, 1.45).add(1)) },
            display() {
                let FRB2base = new Decimal(0.5)
                return ` Increase accelerator 2's base by ${format(FRB2base)} per every level. <br>
                Effect: +${format(this.effect())} <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Frog Suits`
            },
            canAfford() { return player[this.layer].points.gte(this.cost()) },
            buy() {
                player[this.layer].points = player[this.layer].points.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                let FRB2base = new Decimal(0.5)
                return new Decimal(x.times(FRB2base))
            },
            unlocked() { return hasUpgrade('frog_suit', 23) }
        },
        13: {
            title: "Tedaka swimming",
            cost(x) { return new Decimal(10).pow(Decimal.pow(x, 1.6).add(1)) },
            display() {
                let FRB3base = new Decimal(3)
                if (hasUpgrade('power_balloon', 32)) FRB3base = FRB3base.add(upgradeEffect('power_balloon', 32))
                return ` Increase accelerator 3's multiplication base by ${format(FRB3base)} per every level. <br>
                Effect: +${format(this.effect())} <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Frog Suits`
            },
            canAfford() { return player[this.layer].points.gte(this.cost()) },
            buy() {
                player[this.layer].points = player[this.layer].points.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                let FRB3base = new Decimal(3)
                if (hasUpgrade('power_balloon', 32)) FRB3base = FRB3base.add(upgradeEffect('power_balloon', 32))
                return new Decimal(x.times(FRB3base))
            },
            unlocked() { return hasUpgrade('frog_suit', 23) }
        },
        21: {
            title: "Pedaka swimming",
            cost(x) { return new Decimal(1.8).tetrate(x) },
            display() {
                let FRB4base = new Decimal(1.2)
                return ` Multiply max accelerator clicks by ${format(FRB4base)} per every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Frog Suits`
            },
            canAfford() { return player[this.layer].points.gte(this.cost()) },
            buy() {
                player[this.layer].points = player[this.layer].points.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                let FRB4base = new Decimal(1.2)
                eff = new Decimal.pow(FRB4base, x)
                if (eff.gte(3)) eff = new Decimal(2.99)
                return eff
            },
            unlocked() { return hasUpgrade('frog_suit', 31) }
        },
    },
    update(diff) {
        if (hasUpgrade("frog_suit", 22)) player.frog_suit.swim_calculations_max = new Decimal(10)
        if (hasUpgrade("frog_suit", 31)) player.frog_suit.swim_calculations_max = new Decimal(10).times(buyableEffect("frog_suit", 21)).floor()
        if (hasMilestone('mario', 1)) player.frog_suit.swim_calculations_auto = clickableEffect('frog_suit', 21).times(clickableEffect('frog_suit', 23).pow(27)).pow(clickableEffect('frog_suit', 24))
        //购买项自动化
        if (hasMilestone('mario', 2) && player.frog_suit.points.gte(new Decimal(10).pow(Decimal.pow(player.frog_suit.buyables[11], 1.35).add(1)))) player.frog_suit.buyables[11] = player.frog_suit.points.max(1).log(10).sub(1).root(1.35).floor().add(1)
        if (hasMilestone('mario', 2) && player.frog_suit.points.gte(new Decimal(10).pow(Decimal.pow(player.frog_suit.buyables[12], 1.45).add(1)))) player.frog_suit.buyables[12] = player.frog_suit.points.max(1).log(10).sub(1).root(1.45).floor().add(1)
        if (hasMilestone('mario', 2) && player.frog_suit.points.gte(new Decimal(10).pow(Decimal.pow(player.frog_suit.buyables[13], 1.6).add(1)))) player.frog_suit.buyables[13] = player.frog_suit.points.max(1).log(10).sub(1).root(1.6).floor().add(1)
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + formatWhole(player.invincible_star.points) + ` Invincible Stars`],
        ["display-text", () => `Your best amount of Frog Suit is ` + formatWhole(player.frog_suit.best)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Frog Mario can swim faster, walk like a real frog, even run on the water.`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "Swimming": {
                unlocked() { return hasUpgrade('frog_suit', 15) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        dis = "Frog Mario's swimming speed is <h2 style='color: #24aa0c; text-shadow: 0 0 10px #24aa0c'>" + format(player.frog_suit.swim_speed) + "m/s</h2>. It multiplies Frog Suit gain by <h2 style='color: #24aa0c; text-shadow: 0 0 10px #24aa0c'>" + format(upgradeEffect('frog_suit', 15)) + "x</h2>"
                        if (hasUpgrade('power_balloon', 24) || hasMilestone('boomerang_flower', 2)) dis = "Frog Mario's swimming speed is <h2 style='color: #24aa0c; text-shadow: 0 0 10px #24aa0c'>" + format(player.frog_suit.swim_speed) + "m/s</h2>."
                        return dis
                    }],
                    ["display-text", function () {
                        if (hasUpgrade('power_balloon', 24) || hasMilestone('boomerang_flower', 2))
                            return "Your best Frog Mario's swimming speed is <h2 style='color: #24aa0c; text-shadow: 0 0 10px #24aa0c'>" + format(player.power_balloon.SSbest) + "m/s</h2>. It multiplies Frog Suit gain by <h2 style='color: #24aa0c; text-shadow: 0 0 10px #24aa0c'>" + format(upgradeEffect('frog_suit', 15)) + "x</h2> (You bought 9th Power Balloon upgrade!)"
                    }],
                    ["display-text", function () {
                        if (hasMilestone('mario', 1))
                            return "Your best solution of swimming speed is <h2 style='color: #24aa0c; text-shadow: 0 0 10px #24aa0c'>" + format(player.frog_suit.swim_calculations_auto) + "m/s</h2>"
                    }],
                    ["display-text", function () {
                        return "You can click the accelerator " + formatWhole(player.frog_suit.swim_calculations) + "/" + formatWhole(player.frog_suit.swim_calculations_max) + " times"
                    }],
                    "blank",
                    ["clickables", [1]],
                    "blank",
                    ["clickables", [2]],
                    "blank",
                    "buyables",
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #24aa0c, #1f950a)',
                        'border-color': '#24aa0c',
                        'color': 'black',
                    }
                },
            },
        },
    },
})
// 第十七层：力量气球
addLayer("power_balloon", {
    componentStyles: {
        "buyable"() {
            return {
                'margin-left': '-7px',
                'margin-right': '-7px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            resistance: new Decimal(1000000),
            space: new Decimal(1),
            space_hardcap: new Decimal(0),
            expansion_a: new Decimal(0),
            expansion_b: new Decimal(0),
            expansion_c: new Decimal(0),
            expbs: new Decimal(0),
            MSbest: new Decimal(0),
            SSbest: new Decimal(0),
        }
    },
    effect() {
        eff = player[this.layer].best.add(1).log(2).add(1)
        if (hasUpgrade('power_balloon', 14)) eff = eff.pow(2)
        return eff
        /*
        you should use this.layer instead of <layerID>
        Decimal.pow(num1, num2) is an easier way to do
        num1.pow(num2)
        */
    },
    effectDescription() {
        return `multiplying "Box generator" base by ${textStyle_h2(format(tmp[this.layer].effect) + "x", 'ffff6e')}`
        /*
        use format(num) whenever displaying a number
        */
    },
    color: "#FFFF6E",                       // The color for this layer, which affects many elements.
    resource: "Power Balloons",            // The name of this layer's main prestige resource.
    row: 6,                                 // The row this layer is on (0 is the first row).
    position: 0,
    branches: ["usa_mushroom"],
    symbol: "PB",

    baseResource: "SMB2 Mushrooms",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.usa_mushroom.points },  // A function to return the current amount of baseResource.

    requires: new Decimal(1e122),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.04,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        if (hasUpgrade('power_balloon', 11)) mult = mult.times(4)
        if (hasUpgrade('power_balloon', 21)) mult = mult.times(upgradeEffect('power_balloon', 21))
        if (hasUpgrade('power_balloon', 43)) mult = mult.times(upgradeEffect('power_balloon', 43))
        if (hasMilestone('boomerang_flower', 0)) mult = mult.times(1000)
        if (hasUpgrade('mario', 13)) mult = mult.times(upgradeEffect('mario', 13))
        return mult
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },

    layerShown() { return hasAchievement("achievements", 121) },          // Returns a bool for if this layer's node should be visible in the tree.

    doReset(resettingLayer) {
        if (layers[resettingLayer].row >= 12) return undefined
        else if (layers[resettingLayer].row > layers[this.layer].row) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('boomerang_flower', 0)) {
                kept.push("milestones")
                kept.push("SSbest")
            }
            layerDataReset(this.layer, kept)
        }
    },

    passiveGeneration() { return hasMilestone('boomerang_flower', 3) },
    autoUpgrade() { return hasMilestone('boomerang_flower', 6) },

    hotkeys: [
        { key: "P", description: "Shift+P: Reset for Power Balloons", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],

    upgrades: {
        11: {
            title: "UFO",
            description: "Autobuy SMB2 Mushroom buyables and 4x Power Balloon gain.",
            cost: new Decimal(2),
            unlocked() { return hasMilestone('power_balloon', 1) },
        },
        12: {
            title: "Helium balloon?",
            description: "100x Link's Bombs, Explosion Defeats, Link's Bow and SMB2 Mushroom gain.",
            cost: new Decimal(4),
            unlocked() { return hasUpgrade('power_balloon', 11) },
        },
        13: {
            title: "Infinite gas?",
            description: "100x Frog Suit gain.",
            cost: new Decimal(4),
            unlocked() { return hasUpgrade('power_balloon', 12) },
        },
        14: {
            title: "The night sky",
            description: "Square Power Balloon effect and keep 38th MS upgrade effect.",
            cost: new Decimal(18),
            unlocked() { return hasUpgrade('power_balloon', 13) },
        },
        15: {
            title: "Be a squirrel",
            description: "Unlock a new layer on row 7.",
            cost: new Decimal(18),
            unlocked() { return hasUpgrade('power_balloon', 14) || hasUpgrade(this.layer, this.id) },
        },
        21: {
            title: "Balloon Expansion",
            description: "Unlock a subtab in this layer.",
            cost: new Decimal(60),
            unlocked() { return hasUpgrade('power_balloon', 15) },
            effect() {
                space = player.power_balloon.space
                eff = space.max(1).log(10).root(1.25)
                dilbase = new Decimal(5)
                if (hasUpgrade('boomerang_flower', 21)) dilbase = new Decimal(4)
                if (hasUpgrade('power_balloon', 31)) eff = Decimal.pow(10, space.max(1).log(10).pow(0.5)).max(1).root(dilbase)
                return eff
            }
        },
        22: {
            title: "Same speed",
            description: "Unlock 16th Frog Suit upgrade.",
            cost: new Decimal(1775),
            unlocked() { return hasUpgrade('power_balloon', 21) },
            effect() {
                resistance = player.power_balloon.resistance
                eff = new Decimal(1).div(resistance).times(1000000).add(1).pow(1024)
                return eff
            }
        },
        23: {
            title: "Ring shaped flying",
            description: "Decrease Expansion Resistance based on best Master Sword. (It won't reset on row 7 reset)",
            cost: new Decimal(1825600),
            unlocked() { return hasUpgrade('power_balloon', 22) },
            effect() {
                return player.power_balloon.MSbest.max(1).log(10).max(1)
            },
            effectDisplay() { return "/" + format(upgradeEffect(this.layer, this.id)) },
        },
        24: {
            title: "You need this!",
            description: "You can keep your best swimming speed. And the effect is now based on best swimming speed instead of your current one.",
            currencyDisplayName: "Balloon Space",
            currencyInternalName: "space",
            currencyLayer: "power_balloon",
            cost: new Decimal("1e660"),
            unlocked() { return hasUpgrade('power_balloon', 23) },
        },
        25: {
            title: "Gas gas gas (Power balloon race)",
            description: "Unlock a buyable for increasing expansion speed.",
            cost: new Decimal(10000000),
            unlocked() { return hasUpgrade('power_balloon', 24) },
        },
        31: {
            title: "Two balloons' collision",
            description: "Balloon Space is stronger.",
            cost: new Decimal(12413170),
            unlocked() { return hasUpgrade('power_balloon', 25) },
        },
        32: {
            title: "Luigi ballon",
            description: "'Tedaka swimming' base is increased based on Power Balloon.",
            cost: new Decimal(1e15),
            unlocked() { return hasUpgrade('power_balloon', 31) },
            effect() {
                return player.power_balloon.points.max(10000).log(10000)
            },
            effectDisplay() { return "+" + format(upgradeEffect(this.layer, this.id)) },
        },
        33: {
            title: "Toad ballon",
            description: "Unlock a stronger buyable in SH layer.",
            cost: new Decimal(3e15),
            unlocked() { return hasUpgrade('power_balloon', 32) },
        },
        34: {
            title: "Toadette ballon",
            description: "Divide Expansion Resistance based on OoM^2's of coins.",
            cost: new Decimal(1e17),
            unlocked() { return hasUpgrade('power_balloon', 33) },
            effect() {
                return player.coin.points.max(1e10).log(10).log(10)
            },
            effectDisplay() { return "/" + format(upgradeEffect(this.layer, this.id)) },
        },
        35: {
            title: "Thunder balloon running",
            description: "'Zedaka expanding' gives free levels to 'Exdaka expanding'.",
            cost: new Decimal(4.8e19),
            unlocked() { return hasUpgrade('power_balloon', 34) },
            effect() {
                return player.power_balloon.buyables[12].times(2)
            },
            effectDisplay() { return "+" + formatWhole(upgradeEffect(this.layer, this.id)) + " free levels" },
        },
        41: {
            title: "Mario Kart?",
            description: "Increase FS accelerator 4's base based on Balloon Space.",
            cost: new Decimal(7.77e26),
            unlocked() { return hasUpgrade('power_balloon', 35) },
            effect() {
                return player.power_balloon.space.max(1).log(10).max(1).log(10).div(2.33).max(0)
            },
            effectDisplay() { return "+" + format(upgradeEffect(this.layer, this.id)) },
        },
        42: {
            title: "No blue shell here",
            description: "Multiply Grabbing Enemies based on Power Balloons.",
            cost: new Decimal(1e43),
            unlocked() { return hasUpgrade('power_balloon', 41) },
            effect() {
                return player.power_balloon.points.max(1).pow(33.33)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        43: {
            title: "Cheesable balloon",
            description: "Multiply Power Balloon and Super Acorn gain based on expansion resistance.",
            cost: new Decimal(1e47),
            unlocked() { return hasUpgrade('power_balloon', 42) },
            effect() {
                return new Decimal(0).sub(player.power_balloon.resistance.log(10)).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        44: {
            title: "Resistance to motivation",
            description: "Multiply Frog Suit gain by reciporcal of expansion resistance.",
            cost: new Decimal(1e49),
            unlocked() { return hasUpgrade('power_balloon', 43) },
            effect() {
                return new Decimal(1).div(player.power_balloon.resistance).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        45: {
            title: "Overpowered balloon",
            description: "Make 1st Coin milestone overpowered. (Check the effect on that milestone)",
            cost: new Decimal(5e61),
            unlocked() { return hasUpgrade('power_balloon', 44) },
        },
        51: {
            title: "Back to the oak forest",
            description: "Unlock 14th Super Acorn upgrade.",
            cost: new Decimal(5e63),
            unlocked() { return hasUpgrade('power_balloon', 45) },
        },
        // Look in the upgrades docs to see what goes here!
    },
    milestones: {
        0: {
            requirementDescription: "Get 1 Power Balloon",
            effectDescription: "Keep Master Sword milestones on row 7 reset. 10x passive Link's Bomb gain, 3x Arrow, SMB2 Mushroom and Frog Suit gain. Bulk buy 10x SMB2 Mushroom buyables and cost nothing, \"Exa grabbing\" now affacts all SMB2 buyables.",
            done() { return player.power_balloon.points.gte(1) },
        },
        1: {
            requirementDescription: "Get 2 Power Balloons",
            effectDescription: "1.25x Master Sword gain, unlock 1st Power Balloon upgrade.",
            done() { return player.power_balloon.points.gte(2) },
        },
        2: {
            requirementDescription: "Get 4 Power Balloons",
            effectDescription: "Keep SMB2 Mushroom and Frog Suit milestones on row 7 reset and 37th and 39th MS upgrade's effects are always activated.",
            done() { return player.power_balloon.points.gte(4) },
        },
        3: {
            requirementDescription: "Get 40 Power Balloons",
            effectDescription: "5th SMB2 Mushroom upgrade's effect is always activated.",
            done() { return player.power_balloon.points.gte(40) },
        },
        4: {
            requirementDescription() { return "Get " + format(new Decimal(2024)) + " Power Balloons" },
            effectDescription: "You can autobuy Master Swords.",
            done() { return player.power_balloon.points.gte(2024) },
        },
        5: {
            requirementDescription() { return "Get " + format(new Decimal(2e6)) + " Power Balloons" },
            effectDescription: "Keep SMB2 Mushroom and Frog Suit upgrades.",
            done() { return player.power_balloon.points.gte(2000000) },
        },
        6: {
            requirementDescription() { return "Get " + format(new Decimal(1e20)) + " Power Balloons" },
            effectDescription: "Passive gain 100% Frog Suits every second.",
            done() { return player.power_balloon.points.gte(1e20) },
        },
    },
    buyables: {
        11: {
            title: "Exdaka expanding",
            cost(x) { return new Decimal(19.9).pow(Decimal.pow(x, 1.05).add(1)) },
            display() {
                let PBB1base = new Decimal(2.65)
                if (player.boomerang_flower.boomerang.gte(1e21)) PBB1base = PBB1base.add(upgradeEffect('boomerang_flower', 23))
                let display = ` Multiply expanding speed by ${format(PBB1base)} per every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Power Balloons`
                if (hasUpgrade("power_balloon", 35))
                    display = ` Multiply expanding speed by ${format(PBB1base)} per every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}+${formatWhole(upgradeEffect('power_balloon', 35))}<br>
                Cost: ${format(this.cost())} Power Balloons`
                return display
            },
            canAfford() { return player[this.layer].points.gte(this.cost()) },
            buy() {
                player[this.layer].points = player[this.layer].points.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                let PBB1base = new Decimal(2.65)
                if (player.boomerang_flower.boomerang.gte(1e21)) PBB1base = PBB1base.add(upgradeEffect('boomerang_flower', 23))
                let free = upgradeEffect('power_balloon', 35)
                effect = Decimal.pow(PBB1base, x).max(1)
                if (hasUpgrade("power_balloon", 35)) effect = Decimal.pow(PBB1base, x.add(free)).max(1)
                return effect
            },
            unlocked() { return hasUpgrade('power_balloon', 25) }
        },
        12: {
            title: "Zedaka expanding",
            cost(x) { return new Decimal(11.45).pow(Decimal.pow(x, 1.05).add(1)) },
            display() {
                let PBB2base = new Decimal(1.414213562373)
                if (hasUpgrade('super_acorn', 21)) PBB2base = PBB2base.add(upgradeEffect('super_acorn', 23))
                let display = ` Divide Explosion Resistance by ${format(PBB2base)} per every level. <br>
                Effect: /${format(this.effect())} <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Power Balloons`
                return display
            },
            canAfford() { return player[this.layer].points.gte(this.cost()) },
            buy() {
                player[this.layer].points = player[this.layer].points.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                let PBB2base = new Decimal(1.414213562373)
                if (hasUpgrade('super_acorn', 21)) PBB2base = PBB2base.add(upgradeEffect('super_acorn', 23))
                effect = Decimal.pow(PBB2base, x).max(1)
                return effect
            },
            unlocked() { return hasUpgrade('power_balloon', 25) }
        },
    },
    update(diff) {
        let tick = new Decimal(0.05) //其实这个tick该叫spt的...或者说d(50)就是mspt...挖矿页那个tick = d(20)是tps //得了得了直接用diff解决一切问题 2025.5.22
        let expBS = new Decimal(10)
        let leastBS = d(1)
        if (hasUpgrade('power_balloon', 25)) expBS = expBS.times(buyableEffect('power_balloon', 11))
        if (hasMilestone('boomerang_flower', 1)) expBS = expBS.pow(3)
        if (hasUpgrade('power_balloon', 21)) player.power_balloon.expbs = expBS
        if (hasUpgrade('power_balloon', 21)) player.power_balloon.space_hardcap = upgradeEffect('power_balloon', 22)
        if (hasUpgrade('boomerang_flower', 12)) leastBS = player.power_balloon.space_hardcap.max(1).pow(0.8)
        else leastBS = new Decimal(1)
        if (player.power_balloon.space.lte(leastBS)) player.power_balloon.space = leastBS
        if (hasUpgrade('power_balloon', 21)) player.power_balloon.space = player.power_balloon.space.times(expBS.pow(diff)).min(player.power_balloon.space_hardcap)
        let resist = new Decimal(1000000)
        if (hasUpgrade('power_balloon', 23)) resist = resist.div(upgradeEffect('power_balloon', 23))
        if (hasUpgrade('power_balloon', 25)) resist = resist.div(buyableEffect('power_balloon', 12))
        if (hasUpgrade('power_balloon', 34)) resist = resist.div(upgradeEffect('power_balloon', 34))
        if (hasUpgrade('boomerang_flower', 15)) resist = resist.div(upgradeEffect('boomerang_flower', 15))
        if (player.power_balloon.MSbest.lte(player.master_sword.best)) player.power_balloon.MSbest = player.master_sword.best
        if (player.power_balloon.SSbest.lte(player.frog_suit.swim_speed)) player.power_balloon.SSbest = player.frog_suit.swim_speed
        if (player.power_balloon.SSbest.lte(player.frog_suit.swim_calculations_auto)) player.power_balloon.SSbest = player.frog_suit.swim_calculations_auto
        player.power_balloon.resistance = resist
        //购买项自动化
        if (hasMilestone('boomerang_flower', 4) && player.power_balloon.points.gte(new Decimal(19.9).pow(Decimal.pow(player.power_balloon.buyables[11], 1.05).add(1)))) player.power_balloon.buyables[11] = player.power_balloon.points.max(1).log(19.9).sub(1).root(1.05).floor().add(1)
        if (hasMilestone('boomerang_flower', 4) && player.power_balloon.points.gte(new Decimal(11.45).pow(Decimal.pow(player.power_balloon.buyables[12], 1.05).add(1)))) player.power_balloon.buyables[12] = player.power_balloon.points.max(1).log(11.45).sub(1).root(1.05).floor().add(1)
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + formatWhole(player.usa_mushroom.points) + ` SMB2 Mushrooms`],
        ["display-text", () => `Your best amount of Power Balloon is ` + formatWhole(player.power_balloon.best)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Power Balloon is added in v3.0.0 update. Let's fly infinitely!`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "Balloon Expansion": {
                unlocked() { return hasUpgrade('power_balloon', 21) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return "You have <h2 style='color: #ffff6e; text-shadow: 0 0 10px #ffff6e'>" + format(player.power_balloon.space) + "</h2> Balloon Space. Multipliying Power Balloon gain by <h2 style='color: #ffff6e; text-shadow: 0 0 10px #ffff6e'>" + format(upgradeEffect('power_balloon', 21)) + "x</h2>"
                    }],
                    ["display-text", function () {
                        return "You gain Ballon Space <h2 style='color: #ffff6e; text-shadow: 0 0 10px #ffff6e'>" + format(player.power_balloon.expbs) + "x </h2> per second"
                    }],
                    ["display-text", function () {
                        return "Your expansion resistance is <h2 style='color: #ffff6e; text-shadow: 0 0 10px #ffff6e'>" + format(player.power_balloon.resistance) + "</h2>, the hardcap of Balloon Space is <h2 style='color: #ffff6e; text-shadow: 0 0 10px #ffff6e'>" + format(upgradeEffect('power_balloon', 22)) + "</h2>"
                    }],
                    "clickables",
                    "buyables",
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #ffff6e, #bbbb43)',
                        'border-color': '#ffff6e',
                        'color': 'black',
                    }
                },
            },
        },
    },
})
// 第十八层：超级橡栗
addLayer("super_acorn", {
    componentStyles: {
        "buyable"() {
            return {
                'margin-left': '-7px',
                'margin-right': '-7px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            strength: new Decimal(0),
            SMBsan: new Decimal(0),
            SMWorld: new Decimal(0),
            NSMBrosU: new Decimal(0),
        }
    },

    effect() {
        softcap = new Decimal(1e100)
        if (hasUpgrade('super_acorn', 25)) softcap = new Decimal("1e1000")
        eff1 = player[this.layer].best.add(1).pow(10)
        eff2 = eff1.div(softcap).max(1).pow(0.2).times(softcap) //超级橡栗效果软上限
        eff = eff1
        if (eff1.gte(softcap)) eff = eff2
        return eff
        /*
        you should use this.layer instead of <layerID>
        Decimal.pow(num1, num2) is an easier way to do
        num1.pow(num2)
        */
    },
    effectDescription() {
        softcap = new Decimal(1e100)
        if (hasUpgrade('super_acorn', 25)) softcap = new Decimal("1e1000")
        dis = `multiplying SMB2 Mushroom gain by ${textStyle_h2(format(tmp[this.layer].effect) + "x", 'd74a19')}`
        if (tmp[this.layer].effect.gte(softcap)) dis = dis + " (softcapped)"
        return dis
        /*
        use format(num) whenever displaying a number
        */
    },

    color: "#D74A19",                       // The color for this layer, which affects many elements.
    resource: "Super Acorns",            // The name of this layer's main prestige resource.
    row: 6,                                 // The row this layer is on (0 is the first row).
    position: 1,
    symbol: "SA",
    branches: ["frog_suit"],


    baseResource: "Frog Suits",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.frog_suit.points },  // A function to return the current amount of baseResource.

    requires: new Decimal(1e15),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 1 / 3,                          // "normal" prestige gain is (currency^exponent).

    softcap() {
        return new Decimal(200000)
    },

    softcapPower() {
        power = new Decimal(0.4)
        if (hasUpgrade('super_acorn', 24)) power = new Decimal(0.8)
        else if (hasUpgrade('super_acorn', 13)) power = new Decimal(0.6)
        return power
    },

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        if (hasUpgrade('super_acorn', 21)) mult = mult.times(upgradeEffect('super_acorn', 21))
        if (hasUpgrade('power_balloon', 43)) mult = mult.times(upgradeEffect('power_balloon', 43))
        if (hasMilestone('boomerang_flower', 0)) mult = mult.times(100)
        return mult
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        exp = new Decimal(1)
        return exp
    },
    directMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        return mult
    },

    layerShown() { return hasAchievement('achievements', 122) },          // Returns a bool for if this layer's node should be visible in the tree.

    doReset(resettingLayer) {
        if (layers[resettingLayer].row >= 12) return undefined
        else if (layers[resettingLayer].row > layers[this.layer].row) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('boomerang_flower', 2)) {
                kept.push("milestones")
            }
            if (hasUpgrade('boomerang_flower', 11)) {
                kept.push("upgrades")
            }
            layerDataReset(this.layer, kept)
        }
    },

    passiveGeneration() { return hasMilestone('boomerang_flower', 5) },

    hotkeys: [
        { key: "a", description: "A: Reset for Super Acorns", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],

    upgrades: {
        11: {
            title: "Air slide",
            description: "Raise FS accelerator 3's exponential base to 0.95.",
            cost: new Decimal(2),
            unlocked() { return true },
        },
        12: {
            title: "6-block spin jump",
            description() { return format(new Decimal("e3e36")) + "x Cleared Courses gain. (Resets will be faster!)" },
            cost: new Decimal(20),
            unlocked() { return hasUpgrade('super_acorn', 11) },
        },
        13: {
            title: "Toad's different head",
            description() { return "Weaken Super Acorn softcap: softcap power from 0.4 to 0.6." },
            cost: new Decimal(50176100),
            unlocked() { return hasUpgrade('super_acorn', 12) },
        },
        14: {
            title: "From dots to lines",
            description: "Power Balloon can increase 'Box transcender' max level",
            cost: new Decimal(5e8),
            unlocked() { return hasUpgrade('super_acorn', 13) },
            effect() {
                return player.power_balloon.points.max(1).log(10).div(5).round()
            },
            effectDisplay() { return "+" + formatWhole(upgradeEffect(this.layer, this.id)) },
        },
        15: {
            title: "Adorable",
            description() { return `Power Balloon boosts SMB2 Mushroom gain. (Hardcap at ${f(1.79e308)}x)` },
            cost: new Decimal(9e8),
            unlocked() { return hasUpgrade('super_acorn', 14) },
            effect() {
                return player.power_balloon.points.pow(4).max(1).min("1.79e308")
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        21: {
            title: "Flying all-stars",
            description: "Unlock a new subtab and buyables this layer.",
            cost: new Decimal(2.233e12),
            unlocked() { return hasUpgrade('super_acorn', 15) },
            effect() {
                eff = Decimal.pow(10, player.super_acorn.strength.max(1).log(10).pow(0.75)).max(1)
                if (hasUpgrade('mario', 13)) eff = Decimal.pow(10, player.super_acorn.strength.max(1).log(10).pow(0.75).times(75)).max(1)
                return eff
            },
        },
        22: {
            title: "Which is best?",
            description: "Keep buyables, click counts in FS layer.",
            cost: new Decimal(4e16),
            unlocked() { return hasUpgrade('super_acorn', 21) },
            effect() {
                return player.super_acorn.SMBsan.max(1).root(3)
            },
        },
        23: {
            title: "Faster!",
            description: "^22 base Super Hammer gain, bind resources better.",
            cost: new Decimal(1e21),
            unlocked() { return hasUpgrade('super_acorn', 22) },
            effect() {
                return player.super_acorn.SMWorld.max(1).log(10).pow(0.66).div(5).max(0)
            },
        },
        24: {
            title: "Acorn boost I",
            description: "Weaken Super Acorn's softcap again. (Power from 0.6 to 0.8)",
            cost: new Decimal(2.488e23),
            unlocked() { return hasUpgrade('power_balloon', 51) },
            effect() {
                return player.super_acorn.NSMBrosU.max(1).root(5)
            },
        },
        25: {
            title: "Acorn boost II",
            description() { return `Delay Super Acorn effect's softcap. (From ${f(1e100)} to ${f('1e1000')})` },
            cost: new Decimal(3.777e29),
            unlocked() { return hasUpgrade('super_acorn', 24) },
        },
        31: {
            title: "The overpwered",
            description: "Unlock a new subtab for overpowering more milestones.",
            cost: new Decimal(3e31),
            unlocked() { return hasUpgrade('super_acorn', 25) },
        },
        32: {
            title: "The last power-up",
            description: "Unlock a new layer on row 8.",
            cost: new Decimal(1.5e32),
            unlocked() { return hasUpgrade('super_acorn', 31) || hasUpgrade(this.layer, this.id) },
        },
        101: {
            title: "SA-OPU1",
            tooltip: "Overpower 2nd Coin milestone",
            currencyDisplayName: "Coins",
            currencyInternalName: "points",
            currencyLayer: "coin",
            cost: new Decimal("e6.7e55"),
            unlocked() { return hasUpgrade('super_acorn', 31) || hasUpgrade('boomerang_flower', 11) },
            style() {
                style = {
                    'min-height': '180px',
                    'width': '180px',
                    'font-size': '18px',
                    'border-radius': '0%'
                }
                if (hasUpgrade(this.layer, 101))
                    style = {
                        'min-height': '180px',
                        'width': '180px', 'font-size': '18px',
                        'border-radius': '0%',
                        'background-color': '#feb252'
                    }
                return style
            }
        },
        102: {
            title: "SA-OPU2",
            tooltip: "Overpower 1st Super Mushroom milestone",
            currencyDisplayName: "Super Mushrooms",
            currencyInternalName: "points",
            currencyLayer: "super_mushroom",
            cost: new Decimal("e2e56"),
            unlocked() { return hasUpgrade('super_acorn', 101) },
            effect() {
                return player.super_mushroom.points.max(1e10).log(10).log(10).pow(2)
            },
            style() {
                style = {
                    'min-height': '180px',
                    'width': '180px',
                    'font-size': '18px',
                    'border-radius': '0%'
                }
                if (hasUpgrade(this.layer, 102))
                    style = {
                        'min-height': '180px',
                        'width': '180px', 'font-size': '18px',
                        'border-radius': '0%',
                        'background-color': '#c42533'
                    }
                return style
            }
        },
        103: {
            title: "SA-OPU3",
            tooltip: "Overpower 1st Fire Flower milestone",
            currencyDisplayName: "Fire Flowers",
            currencyInternalName: "points",
            currencyLayer: "fire_flower",
            cost: new Decimal("e1.37e60"),
            unlocked() { return hasUpgrade('super_acorn', 102) },
            effect() {
                return player.super_mushroom.points.max(1e10).log(10).log(10).pow(2)
            },
            style() {
                style = {
                    'min-height': '180px',
                    'width': '180px',
                    'font-size': '18px',
                    'border-radius': '0%'
                }
                if (hasUpgrade(this.layer, 103))
                    style = {
                        'min-height': '180px',
                        'width': '180px', 'font-size': '18px',
                        'border-radius': '0%',
                        'background-color': '#ff8d00'
                    }
                return style
            }
        },
        111: {
            title: "SA-OPU4",
            tooltip: "Overpower 2nd Invinsible Star milestone",
            currencyDisplayName: "Invinsible Stars",
            currencyInternalName: "points",
            currencyLayer: "invincible_star",
            cost: new Decimal("2.4e69"),
            unlocked() {
                return hasMilestone('luigi', 0)
            },
            effect() {
                return player.invincible_star.points.max(1).root(6.666).times(player.invincible_star.opmtime.max(1).pow(2))
            },
            style() {
                style = {
                    'min-height': '180px',
                    'width': '180px',
                    'font-size': '18px',
                    'border-radius': '0%'
                }
                if (hasUpgrade(this.layer, 111))
                    style = {
                        'min-height': '180px',
                        'width': '180px', 'font-size': '18px',
                        'border-radius': '0%',
                        'background-color': '#ffb15a'
                    }
                return style
            }
        },
        112: {
            title: "SA-OPU5",
            tooltip: "Overpower 4th Invinsible Star milestone",
            currencyDisplayName: "Invinsible Stars",
            currencyInternalName: "points",
            currencyLayer: "invincible_star",
            cost: new Decimal("e3.15e15"),
            unlocked() {
                return expertBossMagicEffect('ludwig').gte(1)
            },
            effect() {
                let eff = player.invincible_star.points.max(10).log(10).pow(2)
                if (hasUpgrade('expert', 55)) eff = eff.pow(upgradeEffect('expert', 55))
                return eff
            },
            style() {
                style = {
                    'min-height': '180px',
                    'width': '180px',
                    'font-size': '18px',
                    'border-radius': '0%'
                }
                if (hasUpgrade(this.layer, 112))
                    style = {
                        'min-height': '180px',
                        'width': '180px', 'font-size': '18px',
                        'border-radius': '0%',
                        'background-color': '#ffb15a'
                    }
                return style
            }
        },
        113: {
            title: "SA-OPU6",
            tooltip: "Overpower 2nd 1UP Mushroom milestone",
            currencyDisplayName: "1UP Mushrooms",
            currencyInternalName: "points",
            currencyLayer: "oneup_mushroom",
            cost: new Decimal("ee9.6e16"),
            unlocked() {
                return expertBossMagicEffect('ludwig').gte(2)
            },
            effect() {
                let eff = player.oneup_mushroom.points.max(10).log(10).max(10).log(10).root(10)
                return eff
            },
            style() {
                style = {
                    'min-height': '180px',
                    'width': '180px',
                    'font-size': '18px',
                    'border-radius': '0%'
                }
                if (hasUpgrade(this.layer, 113))
                    style = {
                        'min-height': '180px',
                        'width': '180px', 'font-size': '18px',
                        'border-radius': '0%',
                        'background-color': '#5bbf2f'
                    }
                return style
            }
        },
        121: {
            title: "SA-OPU7",
            tooltip: "Overpower 1st Bouncy Ball Flower milestone",
            currencyDisplayName: "Bouncy Ball Flowers",
            currencyInternalName: "points",
            currencyLayer: "bouncy_ball_flower",
            cost: new Decimal("ee1.25e24"),
            unlocked() {
                return expertBossMagicEffect('ludwig').gte(3)
            },
            effect() {
                let eff = player.bouncy_ball_flower.points.max(10).log(10).max(10).log(10).root(12)
                return eff
            },
            style() {
                style = {
                    'min-height': '180px',
                    'width': '180px',
                    'font-size': '18px',
                    'border-radius': '0%'
                }
                if (hasUpgrade(this.layer, 121))
                    style = {
                        'min-height': '180px',
                        'width': '180px', 'font-size': '18px',
                        'border-radius': '0%',
                        'background-color': '#606040'
                    }
                return style
            }
        },
        122: {
            title: "SA-OPU8",
            tooltip: "Overpower 1st Big Mushroom milestone",
            currencyDisplayName: "Big Mushrooms",
            currencyInternalName: "points",
            currencyLayer: "big_mushroom",
            cost: new Decimal("ee4.08e39"),
            unlocked() {
                return expertBossMagicEffect('ludwig').gte(4)
            },
            effect() {
                let eff = player.big_mushroom.points.max(10).log(10).max(10).log(10).root(1.33)
                return eff
            },
            style() {
                style = {
                    'min-height': '180px',
                    'width': '180px',
                    'font-size': '18px',
                    'border-radius': '0%'
                }
                if (hasUpgrade(this.layer, 122))
                    style = {
                        'min-height': '180px',
                        'width': '180px', 'font-size': '18px',
                        'border-radius': '0%',
                        'background-color': '#f7431d'
                    }
                return style
            }
        },
        // Look in the upgrades docs to see what goes here!
    },
    update(diff) {
        let tick = new Decimal(0.05)
        let multFlS = new Decimal(1)
        let multSMB3 = new Decimal(1)
        let multSMW = new Decimal(1)
        let multNSMBU = new Decimal(1)
        if (hasUpgrade('super_acorn', 21)) multSMB3 = multSMB3.times(buyableEffect('super_acorn', 11)),
            multSMW = multSMW.times(buyableEffect('super_acorn', 21)).times(buyableEffect('super_acorn', 22)),
            multNSMBU = multNSMBU.times(buyableEffect('super_acorn', 31)).times(buyableEffect('super_acorn', 32)),
            multFlS = multFlS.times(upgradeEffect('super_acorn', 24)),
            player.super_acorn.SMBsan = player.super_acorn.SMBsan.add(multSMB3.times(diff)),
            player.super_acorn.SMWorld = player.super_acorn.SMWorld.add(multSMW.times(diff)),
            player.super_acorn.NSMBrosU = player.super_acorn.NSMBrosU.add(multNSMBU.times(diff)),
            player.super_acorn.strength = player.super_acorn.strength.add(multFlS.times(diff))
        //购买项自动化
        if (hasMilestone('boomerang_flower', 7) && player.super_leaf.points.gte(new Decimal("ee30").pow(Decimal.pow(15, player.super_acorn.buyables[11]).add(1)))) player.super_acorn.buyables[11] = player.super_leaf.points.max(1).log("ee30").max(2).sub(1).log(15).max(0).floor().add(1)
        if (hasMilestone('boomerang_flower', 7) && player.cape_feather.points.gte(new Decimal(1000000).times(Decimal.pow(1.35, player.super_acorn.buyables[21])))) player.super_acorn.buyables[21] = player.cape_feather.points.div(1000000).max(1).log(1.35).floor().add(1)
        if (hasMilestone('boomerang_flower', 7) && player.power_balloon.points.gte(new Decimal(100).pow(Decimal.pow(player.super_acorn.buyables[22], 1.3)))) player.super_acorn.buyables[22] = player.power_balloon.points.max(1).log(100).root(1.3).floor().add(1)
        if (hasMilestone('boomerang_flower', 7) && player.propeller_mushroom.points.gte(new Decimal("ee28").pow(Decimal.pow(14, player.super_acorn.buyables[31])))) player.super_acorn.buyables[31] = player.propeller_mushroom.points.max(1).log("ee28").max(1).log(14).max(0).floor().add(1)
        if (hasMilestone('boomerang_flower', 7) && player.super_acorn.points.gte(new Decimal(1000).pow(Decimal.pow(player.super_acorn.buyables[32], 1.3)))) player.super_acorn.buyables[32] = player.super_acorn.points.max(1).log(1000).root(1.3).floor().add(1)
    },
    milestones: {
        0: {
            requirementDescription: "Get 1 Super Acorn",
            effectDescription: "Keep Master Sword upgrades on reset.",
            done() { return player.super_acorn.points.gte(1) },
        },
        1: {
            requirementDescription: "Get 200,000 Super Acorns",
            effectDescription: "Auto sacrifice 1UP Mushrooms to gain Rotten Mushrooms.",
            done() { return player.super_acorn.points.gte(200000) },
        },
        2: {
            requirementDescription: "Get 9,402,011 Super Acorns",
            effectDescription: "Passive gain SMB2 Mushroom every second.",
            done() { return player.super_acorn.points.gte(9402011) },
        },
    },
    buyables: {
        11: {
            title: "SMB3 power: Tail Mario",
            cost(x) { return new Decimal("ee30").pow(Decimal.pow(15, x).add(1)) },
            display() {
                let SAB1base = new Decimal(5)
                let display = ` Multiply SMB3 flying power by ${format(SAB1base)} per every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Super Leaves`
                return display
            },
            canAfford() { return player.super_leaf.points.gte(this.cost()) },
            buy() {
                player.super_leaf.points = player.super_leaf.points.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                let SAB1base = new Decimal(5)
                effect = Decimal.pow(SAB1base, x).max(1)
                return effect
            },
            unlocked() { return hasUpgrade('super_acorn', 21) },
            style() { if (canBuyBuyable('super_acorn', 11) == true) return { "background-color": "#f83c11" } }
        },
        21: {
            title: "SMW power: Cape Mario",
            cost(x) { return new Decimal(1000000).times(Decimal.pow(1.35, x)) },
            display() {
                let SAB2base = new Decimal(3)
                let display = ` Multiply SMW flying power by ${format(SAB2base)} per every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Cape Feathers`
                return display
            },
            canAfford() { return player.cape_feather.points.gte(this.cost()) },
            buy() {
                player.cape_feather.points = player.cape_feather.points.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                let SAB2base = new Decimal(3)
                effect = Decimal.pow(SAB2base, x).max(1)
                return effect
            },
            unlocked() { return hasUpgrade('super_acorn', 21) },
            style() { if (canBuyBuyable('super_acorn', 21) == true) return { "background-color": "#fcbf02" } }
        },
        22: {
            title: "SMW power: Balloon Mario",
            cost(x) { return new Decimal(100).pow(Decimal.pow(x, 1.3)) },
            display() {
                let SAB3base = new Decimal(3.5)
                let display = ` Multiply SMW flying power by ${format(SAB3base)} per every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Power Balloons`
                return display
            },
            canAfford() { return player.power_balloon.points.gte(this.cost()) },
            buy() {
                player.power_balloon.points = player.power_balloon.points.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                let SAB3base = new Decimal(3.5)
                effect = Decimal.pow(SAB3base, x).max(1)
                return effect
            },
            unlocked() { return hasUpgrade('super_acorn', 21) },
            style() { if (canBuyBuyable('super_acorn', 22) == true) return { "background-color": "#ffff6e" } }
        },
        31: {
            title: "NSMBU power: Propeller Mario",
            cost(x) { return new Decimal("ee28").pow(Decimal.pow(14, x)) },
            display() {
                let SAB4base = new Decimal(3)
                let display = ` Multiply SMW flying power by ${format(SAB4base)} per every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Propeller Mushrooms`
                return display
            },
            canAfford() { return player.propeller_mushroom.points.gte(this.cost()) },
            buy() {
                player.propeller_mushroom.points = player.propeller_mushroom.points.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                let SAB4base = new Decimal(3)
                effect = Decimal.pow(SAB4base, x).max(1)
                return effect
            },
            unlocked() { return hasUpgrade('super_acorn', 21) },
            style() { if (canBuyBuyable('super_acorn', 31) == true) return { "background-color": "#f45b00" } }
        },
        32: {
            title: "NSMBU power: Squirrel Mario",
            cost(x) { return new Decimal(1000).pow(Decimal.pow(x, 1.3)) },
            display() {
                let SAB5base = new Decimal(3.5)
                let display = ` Multiply SMW flying power by ${format(SAB5base)} per every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Super Acorns`
                return display
            },
            canAfford() { return player.super_acorn.points.gte(this.cost()) },
            buy() {
                player.super_acorn.points = player.super_acorn.points.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                let SAB5base = new Decimal(3.5)
                effect = Decimal.pow(SAB5base, x).max(1)
                return effect
            },
            unlocked() { return hasUpgrade('super_acorn', 21) },
        },
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + formatWhole(player.frog_suit.points) + ` Frog Suits`],
        ["display-text", () => `Your best amount of Super Acorn is ` + formatWhole(player.super_acorn.best)],
        ["display-text", () => `Super Acorn softcap starts at ${f(200000)}`],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Super Acorn is added in v3.0.0 update. It's in NSMBU style. Squirrel Mario is so cute!`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "SMM2 Fly All-stars": {
                unlocked() { return hasUpgrade('super_acorn', 21) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return "You have is <h2 style='color: #d74a19; text-shadow: 0 0 10px #d74a19'>" + format(player.super_acorn.strength) + "</h2> Flying Strength, which boosting Super Acorn gain by <h2 style='color: #d74a19; text-shadow: 0 0 10px #d74a19'>" + format(upgradeEffect('super_acorn', 21)) + "x</h2>"
                    }],
                    ["display-text", function () {
                        return "You have is <h2 style='color: #d74a19; text-shadow: 0 0 10px #d74a19'>" + format(player.super_acorn.SMBsan) + "</h2> SMB3 Flying Power, which boosting 'Doka swimming' base by <h2 style='color: #d74a19; text-shadow: 0 0 10px #d74a19'>" + format(upgradeEffect('super_acorn', 22)) + "x</h2>"
                    }],
                    ["display-text", function () {
                        return "You have is <h2 style='color: #d74a19; text-shadow: 0 0 10px #d74a19'>" + format(player.super_acorn.SMWorld) + "</h2> SMW Flying Power, which increasing 'Zedaka expanding base' by <h2 style='color: #d74a19; text-shadow: 0 0 10px #d74a19'>+" + format(upgradeEffect('super_acorn', 23)) + "</h2>"
                    }],
                    ["display-text", function () {
                        return "You have is <h2 style='color: #d74a19; text-shadow: 0 0 10px #d74a19'>" + format(player.super_acorn.NSMBrosU) + "</h2> NSMBU Flying Power, which boosting Flying Strength gain by <h2 style='color: #d74a19; text-shadow: 0 0 10px #d74a19'>" + format(upgradeEffect('super_acorn', 24)) + "x</h2>"
                    }],
                    "buyables",
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #d74a19, #fbcf02)',
                        'border-color': '#d74a19',
                        'color': 'black',
                    }
                },
            },
            "SA Overpowers": {
                unlocked() { return hasUpgrade('super_acorn', 31) || hasUpgrade('boomerang_flower', 11) },
                content: [
                    ["blank", "15px"],
                    ["upgrades", [10, 11, 12]]
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #ffad00, #7a5600)',
                        'border-color': '#ffad00',
                        'color': 'black',
                    }
                },
            },
        },
    },
})
// 第十九层：回旋镖之花
addLayer("boomerang_flower", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            boomerang: new Decimal(0),
            boomerang_persec: new Decimal(0),
        }
    },

    color: "#0097EF",                       // The color for this layer, which affects many elements.
    resource: "Boomerang Flowers",            // The name of this layer's main prestige resource.
    row: 7,                                 // The row this layer is on (0 is the first row).
    position: 0,
    branches: ["power_balloon"],
    symbol: "BF",


    baseResource: "Power Balloons",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.power_balloon.points },  // A function to return the current amount of baseResource.

    requires: new Decimal(4.5e79),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.1,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        if (hasUpgrade('boomerang_flower', 14)) mult = mult.times(upgradeEffect('boomerang_flower', 14))
        if (player.boomerang_flower.boomerang.gte(500)) mult = mult.times(upgradeEffect('boomerang_flower', 21))
        if (hasUpgrade('boomerang_flower', 34)) mult = mult.times(upgradeEffect('boomerang_flower', 34))
        if (hasUpgrade('mario', 11)) mult = mult.times(upgradeEffect('mario', 11))
        return mult
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },

    passiveGeneration() { return hasMilestone('mario', 0) },

    layerShown() { return hasAchievement('achievements', 125) },          // Returns a bool for if this layer's node should be visible in the tree.

    doReset(resettingLayer) {
        return undefined
    },

    hotkeys: [
        { key: "x", description: "X: Reset for Boomerang Flowers", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],

    upgrades: {
        11: {
            title: "Fly back",
            description: "Keep 'SA Overpowers' subtab and SA upgrades on reset. (Not instantly)",
            cost: new Decimal(5),
            unlocked() { return true },
        },
        12: {
            title: "Throw into clear pipes",
            description: "Keep your Balloon Space at least ^0.8 of hardcap.",
            cost: new Decimal(6),
            unlocked() { return hasUpgrade('boomerang_flower', 11) },
        },
        13: {
            title: "Damage entire row of enemies",
            description: "Raise accelerator 3's exponential base to 1.",
            cost: new Decimal(8),
            unlocked() { return hasUpgrade('boomerang_flower', 12) },
        },
        14: {
            title: "Boomerang can't infinite fly",
            description: "Boost Boomerang Flower gain based on itself.",
            cost: new Decimal(25),
            unlocked() { return hasUpgrade('boomerang_flower', 13) },
            effect() {
                return player.boomerang_flower.points.max(1).add(1.71829).ln().max(1).pow(2)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        15: {
            title: "Break in clear pipes",
            description: "Divide expansion resistance based on Boomerang Flower.",
            cost: new Decimal(888),
            unlocked() { return hasUpgrade('boomerang_flower', 14) },
            effect() {
                return player.boomerang_flower.points.max(1).root(3)
            },
            effectDisplay() { return "/" + format(upgradeEffect(this.layer, this.id)) },
        },
        21: {
            title: "1 Damage per throw",
            description: "Balloon Space's effect is better.",
            cost: new Decimal(2024),
            unlocked() { return hasUpgrade('boomerang_flower', 15) },
            effect() {
                eff = player.boomerang_flower.boomerang.max(2.71829).ln().pow(1.5)
                if (hasUpgrade('boomerang_flower', 31)) eff = player.boomerang_flower.boomerang.max(10).log(10).pow(player.boomerang_flower.boomerang.max(10).log(10).pow(0.6))
                return eff
            },
        },
        22: {
            title: "20 throws to defeat a Bowser",
            description: "Unlock a new subtab.",
            cost: new Decimal(333333),
            unlocked() { return hasUpgrade('boomerang_flower', 21) },
            effect() {
                return player.boomerang_flower.boomerang.max(10).log(10).root(2)
            },
        },
        23: {
            title: "40 throws to defeat a big Bowser",
            description: "1.1x Master Sword gain.",
            cost: new Decimal(30000000),
            unlocked() { return hasUpgrade('boomerang_flower', 22) },
            effect() {
                return player.boomerang_flower.boomerang.max(10).log(10).root(1.77)
            },
        },
        24: {
            title: "Dash block faster than a boomerang",
            description: "Power SH gain based on BF.",
            cost: new Decimal(50000000),
            unlocked() { return hasUpgrade('boomerang_flower', 23) },
            effect() {
                return player.boomerang_flower.points.max(8000).log(8000)
            },
            effectDisplay() { return "^" + format(upgradeEffect(this.layer, this.id)) },
        },
        25: {
            title: "Hit spike balls",
            description: "Boomerang boost itself gain but stronger.",
            cost: new Decimal(8e9),
            unlocked() { return hasUpgrade('boomerang_flower', 24) },
            effect() {
                return player.boomerang_flower.boomerang.max(1).root(3.5)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        31: {
            title: "Hit snow balls",
            description: "Improve 1st Boomerang's effect formula.",
            cost: new Decimal(3e10),
            unlocked() { return hasUpgrade('boomerang_flower', 25) },
        },
        32: {
            title: "Hit Bowser's fire",
            description() { return `${f(1e19)}x Invincible Star and ${f(1e9)}x Cape Feather gain.` },
            cost: new Decimal(1e21),
            unlocked() { return hasUpgrade('boomerang_flower', 31) },
        },
        33: {
            title: "Another flying object",
            description: "Flying Strength amount now boost Boomerang gain.",
            cost: new Decimal(1e24),
            unlocked() { return hasUpgrade('boomerang_flower', 32) },
            effect() {
                return player.super_acorn.strength
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        34: {
            title: "Power-ups' ENDGAME",
            description: "Boost Boomerang Flower gain based on EVERY KIND OF POWER-UPS.",
            cost: new Decimal(1e31),
            unlocked() { return hasUpgrade('boomerang_flower', 33) },
            effect() {
                SM = player.super_mushroom.points.max(10).slog(10)
                FF = player.fire_flower.points.max(10).slog(10)
                IS = player.invincible_star.points.max(10).slog(10)
                UP1 = player.oneup_mushroom.points.max(10).slog(10)
                BBF = player.bouncy_ball_flower.points.max(10).slog(10)
                BM = player.big_mushroom.points.max(10).slog(10)
                SL = player.super_leaf.points.max(10).slog(10)
                CF = player.cape_feather.points.max(10).slog(10)
                YE = player.yoshi_egg.points.max(10).slog(10)
                PM = player.propeller_mushroom.points.max(10).slog(10)
                SB = player.super_bell.points.max(10).slog(10)
                SH = player.super_hammer.points.max(10).slog(10)
                MS = player.master_sword.points.max(10).slog(10)
                SMB2 = player.usa_mushroom.points.max(10).slog(10)
                FS = player.frog_suit.points.max(10).slog(10)
                PB = player.power_balloon.points.max(10).slog(10)
                SA = player.super_acorn.points.max(10).slog(10)
                BF = player.boomerang_flower.points.max(10).slog(10)
                return SM.times(FF).times(IS).times(UP1).times(BBF).times(BM).times(SL).times(CF).times(YE).times(PM).times(SB).times(SH).times(MS).times(SMB2).times(FS).times(PB).times(SA).times(BF).pow(5)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        35: {
            title: "It's-a me!",
            description: "Unlock a new layer at row 9.",
            cost: new Decimal(1.24e124),
            unlocked() { return hasUpgrade('boomerang_flower', 34) || hasUpgrade(this.layer, this.id) },
        },
        // Look in the upgrades docs to see what goes here!
    },
    challenges: {
        11: {
            name: "Piranhas",
            challengeDescription: "'Box transcender' effect is always 1x.",
            goalDescription() { return "Get " + format("e5e147") + " Cleared Courses. Then ^1e10 per each completion." },
            completionLimit() {
                let FBCCL = new Decimal(10)
                if (hasUpgrade('toad', 32)) FBCCL = FBCCL.add(upgradeEffect('toad', 32))
                return FBCCL
            },
            canComplete: function () {
                let FBC1C = player[this.layer].challenges[11]
                return player.points.gte(new Decimal("e5e147").pow(new Decimal(1e10).pow(new Decimal(new Decimal(FBC1C))).max(1)))
            },
            rewardDescription() {
                let base = new Decimal(2)
                if (hasUpgrade('luigi', 23)) base = new Decimal(10)
                return "Delay Luigi's effect hardcap by " + format(base) + "x per each completion."
            },
            rewardEffect() {
                let base = new Decimal(2)
                if (hasUpgrade('luigi', 23)) base = new Decimal(10)
                if (hasUpgrade('toad', 33)) base = base.pow(2)
                let FBC1C = player[this.layer].challenges[11]
                return Decimal.pow(base, new Decimal(FBC1C))
            },
            rewardDisplay() {
                let FBC1C = player[this.layer].challenges[11]
                return format(challengeEffect(this.layer, this.id)) + "x<br>Completions: "
                    + formatWhole(FBC1C)
                    + "/" + formatWhole(completionLimit('boomerang_flower', 11)) + "<br>Current Goal: "
                    + format(new Decimal("e5e147").pow(new Decimal(1e10).pow(new Decimal(FBC1C)).max(1)))
            },
            unlocked() { return hasUpgrade('luigi', 22) },
        },
    },
    resetsNothing() { return hasUpgrade('luigi', 31) },
    milestones: {
        0: {
            requirementDescription: "Get 1 Boomerang Flower",
            effectDescription() { return `100x Frog Suit and Super Acorn gain, ${f(1000)}x Power Balloon gain. Keep Power Balloon milestones and best swimming speed on row 8 reset` },
            done() { return player.boomerang_flower.points.gte(1) },
        },
        1: {
            requirementDescription() { return `Get ${f(1.79e308)} Balloon Space with at least 1 Boomerang Flower` },
            effectDescription: "Cube Balloon Space's expansion speed.",
            done() { return player.boomerang_flower.points.gte(1) && player.power_balloon.space.gte("1.79e308") && player.boomerang_flower.resetTime >= 1 },
        },
        2: {
            requirementDescription: "Get 3 Boomerang Flowers",
            effectDescription: "Keep Super Acorn milestones and 9th Power Balloon upgrade's effect on row 8 reset.",
            done() { return player.boomerang_flower.points.gte(3) },
        },
        3: {
            requirementDescription: "Get 5 Boomerang Flowers",
            effectDescription: "Passive gain 100% Power Balloon every second.",
            done() { return player.boomerang_flower.points.gte(5) },
        },
        4: {
            requirementDescription: "Get 15 Boomerang Flowers",
            effectDescription: "Autobuy Power Balloon buyables.",
            done() { return player.boomerang_flower.points.gte(15) },
        },
        5: {
            requirementDescription: "Get 50 Boomerang Flowers",
            effectDescription: "Passive gain 100% Super Acorn every second.",
            done() { return player.boomerang_flower.points.gte(50) },
        },
        6: {
            requirementDescription: "Get 501 Boomerang Flowers",
            effectDescription: "Autobuy Power Balloon upgrades.",
            done() { return player.boomerang_flower.points.gte(501) },
        },
        7: {
            requirementDescription() { return `Get ${f(202404)} Boomerang Flowers` },
            effectDescription: "Autobuy Super Acorn buyables.",
            done() { return player.boomerang_flower.points.gte(202404) },
        },
        8: {
            requirementDescription() { return `Get ${f(1.79e308)} Boomerang Flowers` },
            effectDescription() { return `2nd Coin milestone overpower effect is stronger` },
            done() { return player.boomerang_flower.points.gte(1.79e308) },
        },
    },
    bars: {
        eff1: {
            direction: RIGHT,
            width: 333,
            height: 50,
            display() { return "Unlock 1st Boomerang's effect<br> Req: " + format(player.boomerang_flower.boomerang) + "/" + format(new Decimal(500)) + " Boomerangs" },
            progress() { return player.boomerang_flower.boomerang.div(500).min(1).max(0) },
            unlocked() { return hasUpgrade('boomerang_flower', 22) },
            fillStyle() { return { "background-color": "#0097ef" } }
        },
        eff2: {
            direction: RIGHT,
            width: 333,
            height: 50,
            display() { return "Unlock 2nd Boomerang's effect<br> Req: " + format(player.boomerang_flower.boomerang) + "/" + format(new Decimal(1e9)) + " Boomerangs" },
            progress() { return player.boomerang_flower.boomerang.div(1e9).min(1).max(0) },
            unlocked() { return player.boomerang_flower.boomerang.gte(500) },
            fillStyle() { return { "background-color": "#0097ef" } }
        },
        eff3: {
            direction: RIGHT,
            width: 333,
            height: 50,
            display() { return "Unlock 3rd Boomerang's effect<br> Req: " + format(player.boomerang_flower.boomerang) + "/" + format(new Decimal(1e21)) + " Boomerangs" },
            progress() { return player.boomerang_flower.boomerang.max(1).log(1e21).min(1).max(0) },
            unlocked() { return player.boomerang_flower.boomerang.gte(1e9) },
            fillStyle() { return { "background-color": "#0097ef" } }
        },
    },
    update(diff) {
        tick = new Decimal(0.05)
        let multB = new Decimal(1)
        if (hasUpgrade('boomerang_flower', 22)) multB = multB.times(player.boomerang_flower.points.max(1).log(10))
        if (player.boomerang_flower.boomerang.gte(500)) multB = multB.times(upgradeEffect('boomerang_flower', 21))
        if (hasUpgrade('super_acorn', 102)) multB = multB.times(upgradeEffect('super_acorn', 102))
        if (hasUpgrade('boomerang_flower', 25)) multB = multB.times(upgradeEffect('boomerang_flower', 25))
        if (hasUpgrade('boomerang_flower', 33)) multB = multB.times(upgradeEffect('boomerang_flower', 33))
        if (hasUpgrade('super_acorn', 103)) multB = multB.times(upgradeEffect('boomerang_flower', 34))
        if (hasUpgrade('boomerang_flower', 22)) player.boomerang_flower.boomerang_persec = multB
        if (hasUpgrade('boomerang_flower', 22)) player.boomerang_flower.boomerang = player.boomerang_flower.boomerang.add(multB.times(diff))

        if (hasMilestone('mario', 6)) player.boomerang_flower.challenges[11] = completionLimit('boomerang_flower', 11)
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + formatWhole(player.power_balloon.points) + ` Power Balloons`],
        ["display-text", () => `Your best amount of Boomerang Flower is ` + formatWhole(player.boomerang_flower.best)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Boomerang Flower is added in v3.0.0 update. It's in SM3DW style. Boomerang Mario looks like a hammer bro!`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "Boomerang": {
                unlocked() { return hasUpgrade('boomerang_flower', 22) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return "You have <h2 style='color: #0097ef; text-shadow: 0 0 10px #0097ef'>" + format(player.boomerang_flower.boomerang) + "</h2> Boomerangs."
                            + "(+" + format(player.boomerang_flower.boomerang_persec) + "/sec)"
                    }],
                    ["bar", "eff1"],
                    ["display-text", function () {
                        if (player.boomerang_flower.boomerang.gte(500)) return "You have unlocked 1st Boomerang effect, it multiplies <h2 style='color: #0097ef; text-shadow: 0 0 10px #0097ef'>" + format(upgradeEffect('boomerang_flower', 21)) + "x </h2> to Boomerang Flower and Boomerang gain"
                    }],
                    ["bar", "eff2"],
                    ["display-text", function () {
                        if (player.boomerang_flower.boomerang.gte(1e9)) return "You have unlocked 2nd Boomerang effect, it powers <h2 style='color: #0097ef; text-shadow: 0 0 10px #0097ef'>^" + format(upgradeEffect('boomerang_flower', 22)) + " </h2> to Rupee gain"
                    }],
                    ["bar", "eff3"],
                    ["display-text", function () {
                        if (player.boomerang_flower.boomerang.gte(1e21)) return "You have unlocked 3rd Boomerang effect, it increases 'Exdaka expanding' base by <h2 style='color: #0097ef; text-shadow: 0 0 10px #0097ef'>+" + format(upgradeEffect('boomerang_flower', 23))
                    }],
                    "buyables",
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #0097ef, #eeeeee)',
                        'border-color': '#0097ef',
                        'color': 'black',
                    }
                },
            },
            "Challenges": {
                unlocked() { return hasUpgrade('luigi', 22) },
                content: [
                    ["blank", "15px"],
                    "challenges",
                ]
            },
        },
    },
})
// 第二十层：马力欧
addLayer("mario", {
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            c_re: new Decimal(0),
            c_im: new Decimal(0),
            test: d(0),
        }
    },
    test() { //马力欧过关数防爆检测
        if (player.mario.c_re.gte(player.mario.test)) player.mario.test = player.mario.c_re
    },
    color: "#FF0018",                       // The color for this layer, which affects many elements.
    resource: "Mario",            // The name of this layer's main prestige resource.
    row: 8,                                 // The row this layer is on (0 is the first row).
    displayRow: 8,
    position: 0,
    symbol: "M",

    effect() {
        Mstrength = new Decimal(300)
        Msoftcap = new Decimal(30)
        MsoftcapPower = new Decimal(3)
        if (hasUpgrade('mario', 32)) MsoftcapPower = new Decimal(1.25)
        if (hasUpgrade('mario', 22)) Msoftcap = Msoftcap.add(upgradeEffect('mario', 22))
        if (hasUpgrade('mario', 35)) Mstrength = new Decimal(200)
        if (hasUpgrade('mario', 41)) Mstrength = new Decimal(100)
        if (hasUpgrade('mario', 45)) Mstrength = Mstrength.div(upgradeEffect('mario', 45))
        let eff = player[this.layer].points.max(0).div(Mstrength)
        if (player[this.layer].points.gte(Msoftcap)) eff = Msoftcap.div(Mstrength).add(player[this.layer].points.max(Msoftcap).sub(Msoftcap).root(MsoftcapPower).div(300))
        return eff
        /*
        you should use this.layer instead of <layerID>
        Decimal.pow(num1, num2) is an easier way to do
        num1.pow(num2)
        */
    },
    effectDescription() {
        let dis = `increase "Box transcender" base by ${textStyle_h2("+" + format(tmp[this.layer].effect), 'ff0018')}`
        if (player[this.layer].points.gte(Msoftcap)) dis = dis + " (softcapped)"
        return dis
        /*
        use format(num) whenever displaying a number
        */
    },

    baseResource: "OoMs of Cleared Courses",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.lgpoints },  // A function to return the current amount of baseResource.

    requires: new Decimal("8e63"),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "static",                         // Determines the formula used for calculating prestige currency.
    exponent() {
        exp = 1
        return exp
    },                          // "normal" prestige gain is (currency^exponent).
    base: new Decimal(1.75),

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        if (hasUpgrade(this.layer, 33)) mult = mult.times(upgradeEffect(this.layer, 33))
        if (hasUpgrade("super_acorn", 111)) mult = mult.times(upgradeEffect("super_acorn", 111))
        return new Decimal(1).div(mult)
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },
    directMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        if (hasUpgrade('luigi', 24)) mult = mult.times(upgradeEffect('luigi', 24))
        if (hasUpgrade('s_expert', 42)) mult = mult.times(upgradeEffect('s_expert', 42))
        if (hasUpgrade('coop', 31)) mult = mult.times(501761)
        return mult
    },

    layerShown() { return hasAchievement('achievements', 135) },          // Returns a bool for if this layer's node should be visible in the tree.

    autoUpgrade() { return hasMilestone('toad', 2) },
    doReset(resettingLayer) {
        if (layers[resettingLayer].row > layers[this.layer].row) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('toad', 0)) {
                kept.push("milestones")
                kept.push("c_lock")
            }
            if (hasMilestone('toadette', 3)) {
                kept.push("upgrades")
            }
            layerDataReset(this.layer, kept)
        }
    },
    resetsNothing() { return hasMilestone(this.layer, 5) },
    autoPrestige() { return hasMilestone(this.layer, 5) },

    hotkeys: [
        { key: "3", description: "3: Reset for Mario", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],

    upgrades: {
        11: {
            title: "Oh yeah",
            description() { return `${f(1e10)}x BF gain per each Mario you have` },
            cost: new Decimal(2),
            unlocked() { return true },
            effect() {
                return Decimal.pow(1e10, player.mario.points.max(0))
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        12: {
            title: "Mario time",
            description() { return `${f(1e15)}x FS gain per each Mario you have. You'll get 38 Mario back before Mario upgs autobuy` },
            cost: new Decimal(58),
            unlocked() { return hasUpgrade('mario', 11) },
            effect() {
                return Decimal.pow(1e15, player.mario.points.max(0))
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
            onPurchase() {
                if (!tmp.mario.autoUpgrade) player.mario.points = player.mario.points.add(38)
            },
        },
        13: {
            title: "Tomato spaghetti",
            description() { return `${f(1e15)}x PB gain per each Mario you have. You'll get 49 Mario back before Mario upgs autobuy` },
            cost: new Decimal(59),
            unlocked() { return hasUpgrade('mario', 12) },
            effect() {
                return Decimal.pow(1e15, player.mario.points.max(0))
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
            onPurchase() {
                if (!tmp.mario.autoUpgrade) player.mario.points = player.mario.points.add(49)
            },
        },
        14: {
            title: "Mushroom spaghetti",
            description: "Flying Strength is much powerful. You'll get 58 Mario back before Mario upgs autobuy",
            cost: new Decimal(68),
            unlocked() { return hasUpgrade('mario', 13) },
            onPurchase() {
                if (!tmp.mario.autoUpgrade) player.mario.points = player.mario.points.add(58)
            },
        },
        15: {
            title: "Story mode",
            description: "Unlock a subtab.",
            cost: new Decimal(69),
            unlocked() { return hasUpgrade('mario', 14) },
        },
        21: {
            title: "Red flag",
            description: "Unlock boosters for the new subtab.",
            currencyDisplayName: "Mario's clears",
            currencyInternalName: "c_re",
            currencyLayer: "mario",
            cost: new Decimal(1800),
            unlocked() { return hasUpgrade('mario', 15) },
        },
        22: {
            title: "Super jumper",
            description: "Mario cleared courses delay Mario's effect's softcap.",
            currencyDisplayName: "Mario's clears",
            currencyInternalName: "c_re",
            currencyLayer: "mario",
            cost: new Decimal(1898998),
            unlocked() { return hasUpgrade('mario', 21) },
            effect() {
                let base = new Decimal(5)
                if (hasUpgrade('mario', 25)) base = new Decimal(3)
                return player.mario.c_re.max(1).log(base).floor().max(0)
            },
            effectDisplay() { return "+" + format(upgradeEffect(this.layer, this.id)) },
        },
        23: {
            title: "Letter M symbol",
            description: "Unlock a buyable for 1st Mario booster.",
            cost: new Decimal(74),
            unlocked() { return hasUpgrade('mario', 22) },
        },
        24: {
            title: "The famous plumber",
            description: "14th FS upgrade's effect is always maxed and it also affacts Mario cleared courses.",
            cost: new Decimal(77),
            unlocked() { return hasUpgrade('mario', 23) },
        },
        25: {
            title: "Mario bros plumbers",
            description: "Improve 7th Mario upgrade's formula.",
            cost: new Decimal(79),
            unlocked() { return hasUpgrade('mario', 24) },
        },
        31: {
            title: "Balanced character",
            description: "Unlock Mario booster 2.",
            cost: new Decimal(83),
            unlocked() { return hasUpgrade('mario', 25) },
        },
        32: {
            title: "Adventure with Cappy",
            description: "Weaken Mario effect's softcap.",
            cost: new Decimal(88),
            unlocked() { return hasUpgrade('mario', 31) },
        },
        33: {
            title: "Two different main characters",
            description: "Root Mario's gain cost based on Mario cleared courses.",
            currencyDisplayName: "Mario's clears",
            currencyInternalName: "c_re",
            currencyLayer: "mario",
            cost: new Decimal(5e22),
            unlocked() { return hasUpgrade('mario', 32) },
            effect() {
                return player.mario.c_re.max(2).log(2).pow(3)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "√" },
        },
        34: {
            title: "Mushroom Kingdom traveller",
            description: "Unlock a buyable for 2nd Mario booster.",
            cost: new Decimal(124),
            unlocked() { return hasUpgrade('mario', 33) },
        },
        35: {
            title: "Away from softcap",
            description: "Make Mario effect before softcap stronger. (x/300 to x/200)",
            cost: new Decimal(145),
            unlocked() { return hasUpgrade('mario', 34) },
        },
        41: {
            title: "Away from softcap^2",
            description: "Make Mario effect before softcap stronger^2. (x/200 to x/100)",
            cost: new Decimal(160),
            unlocked() { return hasUpgrade('mario', 35) },
        },
        42: {
            title: "Fight against with Bowser",
            description: "1.5x 'Nedaka jumping' base.",
            cost: new Decimal(185),
            unlocked() { return hasUpgrade('mario', 41) },
        },
        43: {
            title: "Dashing Mario",
            description: "Unlock Mario cleared imaginary courses.",
            currencyDisplayName: "Mario's clears",
            currencyInternalName: "c_re",
            currencyLayer: "mario",
            cost: new Decimal("1e1000"),
            unlocked() { return hasUpgrade('mario', 42) },
        },
        44: {
            title: "Theoretical Mario's clears",
            description: "Unlock Mario booster 3.",
            currencyDisplayName: "imaginary Mario's clears",
            currencyInternalName: "c_im",
            currencyLayer: "mario",
            cost: new Decimal(900000),
            unlocked() { return hasUpgrade('mario', 43) },
        },
        45: {
            title: "Mario yeah!",
            description: "Imaginary Mario cleared courses multiplies Mario's effect base before softcap.",
            cost: new Decimal(196),
            unlocked() { return hasUpgrade('mario', 44) },
            effect() {
                return player.mario.c_im.max(1).root(7.5)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        51: {
            title: "We are the Mario Brothers...",
            description: "Unlock a new layer on row 9",
            cost: new Decimal(265),
            unlocked() { return hasUpgrade('mario', 45) || hasUpgrade(this.layer, this.id) },
        },
    },
    milestones: {
        0: {
            requirementDescription: "Get 52 Mario",
            effectDescription: "Passive gain 100% Boomerang Flower every second.",
            done() { return player.mario.points.gte(52) },
        },
        1: {
            requirementDescription: "Get 58 Mario",
            effectDescription: "Auto update your swimming speed for best solution. (accelerator1 1x, accelerator3 27x, accelerator 4 1x)",
            done() { return player.mario.points.gte(58) },
        },
        2: {
            requirementDescription: "Get 68 Mario",
            effectDescription: "Autobuy Frog Suit buyables except \"Pedaka swiming\".",
            done() { return player.mario.points.gte(68) },
        },
        3: {
            requirementDescription() { return `Box transcender level ${f(1000)}` },
            effectDescription: "Autobuy \"Box transcender\".",
            done() { return player.super_hammer.buyables[13].gte(1000) },
        },
        4: {
            requirementDescription() { return `Mario cleared ${f(10000)} courses` },
            effectDescription: "You can buy max Mario.",
            done() { return player.mario.c_re.gte(10000) },
        },
        5: {
            requirementDescription() { return `Get ${f(1000)} Mario` },
            effectDescription: "Mario resets nothing and autobuy Mario.",
            done() { return player.mario.points.gte(1000) },
        },
        6: {
            requirementDescription() { return `Mario cleared ${f("1e10000000")} courses` },
            effectDescription: "\"Piranha\" completion are always maxed.",
            done() { return player.mario.c_re.gte("1e10000000") && hasUpgrade('toad', 65) },
        },
    },
    buyables: {
        11: {
            title: "Yodaka jumping",
            cost(x) { return new Decimal(10).pow(Decimal.pow(x, 1.1)).times(10) },
            display() {
                let MB1base = new Decimal(0.25)
                if (hasUpgrade(this.layer, 31) && player.cape_feather.ce.lt(1) || hasUpgrade('toad', 15)) MB1base = MB1base.add(clickableEffect(this.layer, 12))
                if (hasUpgrade('luigi', 25)) MB1base = MB1base.times(2)
                let display = ` Increase Mario booster 1 base by +${format(MB1base)} per every level. <br>
            Effect: +${format(this.effect())} <br>
            Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
            Cost: ${format(this.cost())} Mario's cleared courses`
                return display
            },
            canAfford() { return player[this.layer].c_re.gte(this.cost()) },
            buyMax() { return setBuyableAmount(this.layer, this.id, player[this.layer].c_re.div(10).max(10).log(10).root(1.1).floor().add(1)) },
            buy() {
                let bulk = new Decimal(1)
                if (hasUpgrade('luigi', 32)) bulk = new Decimal(10)
                if (hasMilestone('toad', 1)) bulk = new Decimal(50)
                if (!this.canBuyMax()) player[this.layer].c_re = player[this.layer].c_re.sub(this.cost()),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(bulk))
                if (this.canBuyMax()) this.buyMax()
            },
            effect(x) {
                let MB1base = new Decimal(0.25)
                if (hasUpgrade(this.layer, 31) && player.cape_feather.ce.lt(1) || hasUpgrade('toad', 15)) MB1base = MB1base.add(clickableEffect(this.layer, 12))
                if (hasUpgrade('luigi', 25)) MB1base = MB1base.times(2)
                effect = MB1base.times(x).max(0)
                return effect
            },
            unlocked() { return hasUpgrade('mario', 23) },
            canBuyMax() { return hasMilestone('toad', 4) },
        },
        12: {
            title: "Nedaka jumping",
            cost(x) { return new Decimal(10).pow(Decimal.pow(1.2, x)).times(1e24) },
            display() {
                let MB2base = new Decimal(0.018)
                if (hasUpgrade("toad", 11)) MB2base = MB2base.add(upgradeEffect("toad", 11))
                if (hasUpgrade(this.layer, 42)) MB2base = MB2base.times(1.5)
                let display = ` Increase Mario booster 1 base by +${format(MB2base)} per every level before level 5, and ${format(MB2base)}·((x-5)^0.2+10) after level 5.<br>
            Effect: +${format(this.effect())} <br>
            Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
            Cost: ${format(this.cost())} Mario's cleared courses`
                return display
            },
            canAfford() { return player[this.layer].c_re.gte(this.cost()) },
            buyMax() { return setBuyableAmount(this.layer, this.id, player[this.layer].c_re.div(1e24).max(10).log(10).max(1.2).log(1.2).floor().add(1)) },
            buy() {
                if (!this.canBuyMax()) player[this.layer].c_re = player[this.layer].c_re.sub(this.cost()),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effect(x) {
                let MB2base = new Decimal(0.018)
                if (hasUpgrade("toad", 11)) MB2base = MB2base.add(upgradeEffect("toad", 11))
                if (hasUpgrade(this.layer, 42)) MB2base = MB2base.times(1.5)
                effect = MB2base.times(x).max(0)
                if (x.gte(5)) effect = MB2base.times(x.sub(5).root(5).add(10)).max(0)
                return effect
            },
            unlocked() { return hasUpgrade('mario', 34) },
            canBuyMax() { return hasMilestone('toad', 4) },
        },
        13: {
            title: "Ika jumping",
            cost(x) { return new Decimal(10).pow(x.pow(1.05)) },
            display() {
                let MB3base = new Decimal(1e100)
                if (hasUpgrade('luigi', 13)) MB3base = MB3base.times(upgradeEffect('luigi', 13))
                let display = ` Multiply Mario booster 3 base by +${format(MB3base)} per every level
            Effect: +${format(this.effect())} <br>
            Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
            Cost: ${format(this.cost())} imaginary Mario's cleared courses`
                return display
            },
            canAfford() { return player[this.layer].c_im.gte(this.cost()) },
            buyMax() { return setBuyableAmount(this.layer, this.id, player[this.layer].c_im.max(10).log(10).root(1.05).floor().add(2)) },
            buy() {
                if (!this.canBuyMax()) player[this.layer].c_im = player[this.layer].c_im.sub(this.cost()),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effect(x) {
                let MB3base = new Decimal(1e100)
                if (hasUpgrade('luigi', 13)) MB3base = MB3base.times(upgradeEffect('luigi', 13))
                effect = MB3base.pow(x).max(1)
                return effect
            },
            unlocked() { return hasUpgrade('mario', 44) },
            canBuyMax() { return hasMilestone('toad', 4) },
        },
    },
    clickables: {
        11: {
            title: "Mario boost 1 activator",
            display() {
                MM1a = new Decimal(2.35)
                if (hasUpgrade('mario', 23)) MM1a = MM1a.add(buyableEffect('mario', 11))
                dis = "Power Mario's clearing courses speed by ^" + format(MM1a) + ".<br>Effect condition: Have 0 Pink Key Coins."
                if (player.coin.pink_key_coin.lt(1) || hasUpgrade('toad', 15)) dis = dis + "<br>Activated!"
                return dis
            },
            tooltip: "Hint: Enter a challenge that disables PKC gain",
            canClick() { return false },
            effect() {
                MM1a = new Decimal(2.35)
                if (hasUpgrade('mario', 23)) MM1a = MM1a.add(buyableEffect('mario', 11))
                return MM1a
            },
            unlocked() { return hasUpgrade('mario', 21) },
            style() {
                return {
                    "width": "200px",
                    "border-radius": "5%",
                    "font-size": "12px",
                    "background": "linear-gradient(#ff0018, #ff4064)"
                }
            }
        },
        12: {
            title: "Mario boost 2 activator",
            display() {
                MM2a = new Decimal(0.1)
                if (hasUpgrade('mario', 34)) MM2a = MM2a.add(buyableEffect('mario', 12))
                dis = "Increase 'Yodaka jumping' base by +" + format(MM2a) + ".<br>Effect condition: Have 0 Cape Essence."
                if (player.cape_feather.ce.lt(1) || hasUpgrade('toad', 15)) dis = dis + "<br>Activated!"
                return dis
            },
            tooltip: "Hint: Enter a challenge that disables CE gain",
            canClick() { return false },
            effect() {
                MM2a = new Decimal(0.1)
                if (hasUpgrade('mario', 34)) MM2a = MM2a.add(buyableEffect('mario', 12))
                return MM2a
            },
            unlocked() { return hasUpgrade('mario', 31) },
            style() {
                return {
                    "width": "200px",
                    "border-radius": "5%",
                    "font-size": "12px",
                    "background": "linear-gradient(#ff0018, #ff4064)"
                }
            }
        },
        13: {
            title: "Mario boost 3 activator",
            display() {
                MM3a = new Decimal(1)
                if (hasUpgrade('mario', 44)) MM3a = MM3a.times(buyableEffect('mario', 13))
                dis = "Multiply Mario cleared courses by " + format(MM3a) + ".<br>Effect condition: 0 FS swimming click counts."
                if (player.frog_suit.swim_calculations.lt(1) || hasUpgrade('toad', 15)) dis = dis + "<br>Activated!"
                return dis
            },
            tooltip: "Hint: Run out FS click counts",
            canClick() { return false },
            effect() {
                MM3a = new Decimal(1)
                if (hasUpgrade('mario', 44)) MM3a = MM3a.times(buyableEffect('mario', 13))
                return MM3a
            },
            unlocked() { return hasUpgrade('mario', 44) },
            style() {
                return {
                    "width": "200px",
                    "border-radius": "5%",
                    "font-size": "12px",
                    "background": "linear-gradient(#ff0018, #ff4064)"
                }
            }
        },
    },
    canBuyMax() { return hasMilestone('mario', 4) },

    MgainR() { //我草可算是把马力欧过关数获取逻辑改好了-v0.12
        let Ms = player.mario.points.max(0)
        let Mcr = player.mario.c_re
        let hcs = tmp.mario.Mhcs
        let m = d(0)
        if (hasUpgrade('mario', 15)) m = d(1)
        m = m.times(Ms)
        if (player.coin.pink_key_coin.lt(1) || hasUpgrade('toad', 15)) m = m.pow(clickableEffect('mario', 11))
        if (hasMilestone('easy', 0)) m = m.times(20)
        if (hasUpgrade('mario', 24)) m = m.pow(upgradeEffect('frog_suit', 34))
        if (hasMilestone('toad', 0)) m = m.times(1e10)
        //sc1
        m = m.div(hcs[0]).max(1).pow(tmp.mario.MscPow[0]).times(m.min(hcs[0])).max(1) // hasUpgrade('luigi', 14) 突破
        //sc2
        m = m.div(hcs[1]).max(1).root(3).times(m.min(hcs[1])) //hasUpgrade('toadette', 14) 突破
        //sc3
        m = m.div(hcs[2]).max(10).log(10).pow(10000000).times(m.min(hcs[2])) // hasUpgrade('toad', 65) 突破

        let pos = tmp.mario.MhcPosition
        if (!hasUpgrade('luigi', 14)) return hcs[0].min(m)
        else if (!hasUpgrade('toadette', 14)) return hcs[1].min(m)
        else if (!hasUpgrade('toad', 65)) return hcs[2].min(m)

        return m
    },

    MgainI() {
        let cap = player.lgpoints.max(10).log(10).pow(3)
        if (hasAchievement('achievements', 143)) cap = cap.times(tmp.luigi.effect)
        return cap
    },

    Mhcs: {
        0() {
            let hc = d("1e1000")
            if (hasUpgrade('mario', 44) && player.frog_suit.swim_calculations.lt(1) || hasUpgrade('toad', 15)) hc = hc.times(clickableEffect('mario', 13))
            return hc
        },
        1() {
            let hc = d("1e400000")
            if (hasUpgrade('toad', 35)) hc = hc.times("1e100000")
            if (hasUpgrade('toadette', 15)) hc = hc.times(buyableEffect('toad', 103))
            return hc
        },
        2() {
            let hc = d("1e6000003")
            return hc
        },
    },

    MscPow() {
        let scPow = [d(1 / 3)]
        return scPow
    },

    MhcPosition() {
        let mult = tmp.mario.MgainR
        let hcs = tmp.mario.Mhcs
        let pos = 0
        for (i = 0; i < 3; i++) {
            if (mult.gte(hcs[i])) pos = i + 1
        }

        return pos
    },

    update(diff) {
        let MgainR = tmp.mario.MgainR

        if (hasUpgrade('mario', 15)) player.mario.c_re = player.mario.c_re.add(MgainR.times(diff))
        if (player.mario.c_re.gte(MgainR.times(99999.95))) player.mario.c_re = MgainR.times(100000)

        let iMhalftime = new Decimal(60)
        if (hasUpgrade('luigi', 11)) iMhalftime = iMhalftime.div(3)
        if (hasUpgrade('mario', 43)) player.mario.c_im = player.mario.c_im.add((tmp.mario.MgainI.sub(player.mario.c_im).div(2)).div(iMhalftime.div(diff))).max(0)
        //automate
        if (hasMilestone('toadette', 0) && player.mario.c_re.gte(buyableCost(this.layer, 11))) setBuyableAmount(this.layer, 11, player[this.layer].c_re.div(10).max(10).log(10).root(1.1).floor().add(1))
        if (hasMilestone('toadette', 0) && player.mario.c_re.gte(buyableCost(this.layer, 12))) setBuyableAmount(this.layer, 12, player[this.layer].c_re.div(1e24).max(10).log(10).max(1.2).log(1.2).floor().add(1))
        if (hasMilestone('toadette', 0) && player.mario.c_im.gte(buyableCost(this.layer, 13))) setBuyableAmount(this.layer, 13, player[this.layer].c_im.max(10).log(10).root(1.05).floor().add(2))

        if (!hasUpgrade('toad', 65)) {
            if (getBuyableAmount('mario', 11).gt(1451965)) player.mario.buyables[11] = d(1451965)
            if (getBuyableAmount('mario', 12).gt(86)) player.mario.buyables[12] = d(86)
        }


    },
    // Look in the upgrades docs to see what goes here!
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + format(player.points) + ` Cleared Courses`],
        ["display-text", () => `Your best amount of Mario is ` + formatWhole(player.mario.best)],
        ["display-text", () => `Mario's effect softcap is at ` + formatWhole(Msoftcap)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">You finally reached layers for characters! There will be 4 layers for characters. Mario is the most famous character is Mario series. His first appearance is in over 40 years from now!`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Mario layer keeps everything in Boomerang Flower layer.`],
                    "milestones",
                ]
            },
            "Mario's Journey": {
                unlocked() { return hasUpgrade('mario', 15) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        let dis = "Mario cleared <h2 style='color: #ff0018; text-shadow: 0 0 10px #ff0018'>" + format(player.mario.c_re) + " </h2> courses (+" + format(tmp.mario.MgainR) + "/sec)"
                        if (player.mario.c_re.gte(tmp.mario.Mhcs[0])) dis = dis + " (hardcapped)"
                        if (hasUpgrade(this.layer, 43)) dis = "Mario cleared <h2 style='color: #ff0018; text-shadow: 0 0 10px #ff0018'>" + format(player.mario.c_re) + " + " + format(player.mario.c_im) + "i </h2> courses (+" + format(tmp.mario.MgainR) + "/sec)"
                        if (hasUpgrade(this.layer, 43) && player.mario.c_re.gte(player.mario.c_re_hardcap) && player.mario.c_re.lt(tmp.mario.Mhcs[1])) dis = dis + " (real side hardcapped)"
                        if (player.mario.c_re.gte(tmp.mario.Mhcs[1]) && player.mario.c_re.lt(tmp.mario.Mhcs[2])) dis = dis + " (real side hardcapped^2)"
                        if (player.mario.c_re.gte(tmp.mario.Mhcs[2])) dis = dis + " (real side hardcapped^3)"
                        return dis
                    }],
                    ["display-text", function () {
                        return `You can not have over ${formatTime(100000)} (100,000s) of Mario cleared courses`
                    }],
                    ["display-text", function () {
                        if (player.mario.c_re.gte("1e1000")) return "Mario cleared courses have a hardcap of <h2 style='color: #ff0018; text-shadow: 0 0 10px #ff0018'>" + format(tmp.mario.Mhcs[0]) + "</h2>"
                    }],
                    ["display-text", function () {
                        if (player.mario.c_re.gte("1e400000")) return "Mario cleared courses have a hardcap^2 of <h2 style='color: #ff0018; text-shadow: 0 0 10px #ff0018'>" + format(tmp.mario.Mhcs[1]) + "</h2>"
                    }],
                    ["display-text", function () {
                        if (player.mario.c_re.gte("1e6000003")) return "Mario cleared courses have a hardcap^3 of <h2 style='color: #ff0018; text-shadow: 0 0 10px #ff0018'>" + format(tmp.mario.Mhcs[2]) + "</h2>"
                    }],
                    ["display-text", function () {
                        if (hasUpgrade(this.layer, 43)) return "Imaginary Mario cleared courses' hardcap is based on Cleared Courses. Now that's at <h2 style='color: #ff0018; text-shadow: 0 0 10px #ff0018'>" + format(tmp.mario.MgainI) + "i</h2>"
                    }],
                    ["display-text", function () {
                        if (hasUpgrade(this.layer, 43)) return "You can auto gain imaginary Mario cleared courses, but it'll be slower while closer to the cap."
                    }],
                    "blank",
                    "clickables",
                    "buyables",
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #ff0018, #ffffff)',
                        'border-color': '#ff0018',
                        'color': 'black',
                    }
                },
            },
        },
    },
})
// 第二十一层：路易吉
addLayer("luigi", {
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            c: new Decimal(0),
            c_psec: new Decimal(0),
            cheesed: new Decimal(0),
            ch_psec: new Decimal(0),
        }
    },

    color: "#5CB73D",                       // The color for this layer, which affects many elements.
    resource: "Luigi",            // The name of this layer's main prestige resource.
    row: 8,                                 // The row this layer is on (0 is the first row).
    displayRow: 8,
    position: 1,
    branches: ['mario'],
    symbol: "L",

    baseResource: "Boomerang Flowers",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.boomerang_flower.points },  // A function to return the current amount of baseResource.

    requires: new Decimal("1e4859"),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "static",                         // Determines the formula used for calculating prestige currency.
    exponent: 1.15,                          // "normal" prestige gain is (currency^exponent).
    base: new Decimal(1e75),

    effect() {
        eff = player[this.layer].points.add(1).max(1).pow(2)
        if (hasUpgrade(this.layer, 21)) eff = eff.pow(upgradeEffect(this.layer, 21))
        let hardcap = new Decimal(2e10)
        if (hasChallenge('boomerang_flower', 11)) hardcap = hardcap.times(challengeEffect('boomerang_flower', 11))
        if (eff.gte(hardcap)) eff = hardcap
        return eff
    },
    effectDescription() {
        dis = `multiplying imaginary Mario cleared courses hardcap by ${textStyle_h2(format(tmp[this.layer].effect) + "x", '5cb73d')}`
        let hardcap = new Decimal(2e10)
        if (hasChallenge('boomerang_flower', 11)) hardcap = hardcap.times(challengeEffect('boomerang_flower', 11))
        if (tmp[this.layer].effect.gte(hardcap)) dis = dis + " (hardcapped)"
        return dis
        /*
        use format(num) whenever displaying a number
        */
    },

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        return new Decimal(1).div(mult)
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },

    canBuyMax() { return hasMilestone(this.layer, 1) },


    resetsNothing() { return hasMilestone(this.layer, 2) },
    autoPrestige() { return hasMilestone(this.layer, 2) },
    autoUpgrade() { return hasMilestone('toad', 3) },
    layerShown() { return hasAchievement('achievements', 143) },          // Returns a bool for if this layer's node should be visible in the tree.

    doReset(resettingLayer) {
        if (layers[resettingLayer].row > layers[this.layer].row) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('toad', 1)) {
                kept.push("milestones")
            }
            if (hasMilestone('toadette', 3)) {
                kept.push("upgrades")
            }
            layerDataReset(this.layer, kept)
        }
    },

    hotkeys: [
        { key: "L", description: "Shift+L: Reset for Luigi", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],

    upgrades: {
        11: {
            title: "Brothers!",
            description: "3x speed of gaining imaginary Mario cleared courses",
            cost: new Decimal(10),
            unlocked() { return true },
        },
        12: {
            title: "Smart Luigi",
            description: "Unlock a subtab this layer",
            cost: new Decimal(60),
            unlocked() { return hasUpgrade(this.layer, 11) },
        },
        13: {
            title: "Good brothers",
            description: "'Ika jumping' increase its base.",
            currencyDisplayName: "Luigi cleared courses",
            currencyInternalName: "c",
            currencyLayer: "luigi",
            cost: new Decimal(10000),
            unlocked() { return hasUpgrade(this.layer, 12) },
            effect() {
                return Decimal.pow(100000, player.mario.buyables[13].max(0))
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        14: {
            title: "Ghost house",
            description: "You can pass Mario cleared courses hardcap but softcapped. ",
            cost: new Decimal(85),
            unlocked() { return hasUpgrade(this.layer, 13) },
        },
        15: {
            title: "Luigi jumps higher",
            description: "Unlock a buyable for Luigi cleared courses. ",
            cost: new Decimal(96),
            unlocked() { return hasUpgrade(this.layer, 14) },
        },
        21: {
            title: "Luigi wins by doing nothing",
            description: "Power Luigi's effect based on Luigi cleared courses. ",
            currencyDisplayName: "Luigi cleared courses",
            currencyInternalName: "c",
            currencyLayer: "luigi",
            cost: new Decimal(1e10),
            unlocked() { return hasUpgrade(this.layer, 15) },
            effect() {
                return player[this.layer].c.max(0).add(100000).log(100000).root(1.5)
            },
            effectDisplay() { return "^" + format(upgradeEffect(this.layer, this.id)) },
        },
        22: {
            title: "Greater than Mario?",
            description: "Unlock a new challenge in Boomerang Flower layer. ",
            cost: new Decimal(4120),
            unlocked() { return hasUpgrade(this.layer, 21) },
        },
        23: {
            title: "The super winner",
            description: "Piranha effect base is 10. ",
            cost: new Decimal(4475),
            unlocked() { return hasUpgrade(this.layer, 22) },
        },
        24: {
            title: "Cross boost",
            description: "Luigi boost Mario gain. ",
            cost: new Decimal(5440),
            unlocked() { return hasUpgrade(this.layer, 23) },
            effect() {
                return player[this.layer].points.max(10).log(10).root(3)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        25: {
            title: "Lucky Luigi",
            description: "\"Yodaka jumping\" is twice as strong, 2x Characters' Box effect. ",
            cost: new Decimal(10666),
            unlocked() { return hasUpgrade(this.layer, 24) },
        },
        31: {
            title: "Best plumber team!",
            description: "Boomerang Flower layer resets nothing. ",
            cost: new Decimal(123456),
            unlocked() { return hasUpgrade(this.layer, 25) },
        },
        32: {
            title: "They need efficiency!",
            description: "Bulk buy 10x 'Yodaka jumping'. ",
            cost: new Decimal(1e9),
            unlocked() { return hasUpgrade(this.layer, 31) },
        },
        33: {
            title: "L is for Luigi",
            description: "25x cheesed Luigi cleared courses gain. ",
            currencyDisplayName: "cheesed Luigi cleared courses",
            currencyInternalName: "cheesed",
            currencyLayer: "luigi",
            cost: new Decimal(60),
            unlocked() { return hasUpgrade('toad', 12) },
        },
        34: {
            title: "L is for lucky",
            description: "Unlock a new buyable for cheesed Luigi cleared courses.",
            currencyDisplayName: "Mario cleared courses",
            currencyInternalName: "c_re",
            currencyLayer: "mario",
            cost: new Decimal("1e29543"),
            unlocked() { return hasUpgrade(this.layer, 33) },
        },
        35: {
            title: "A vacuum cleaner",
            description: "Unlock a new buyable for Luigi cleared courses.",
            currencyDisplayName: "cheesed Luigi cleared courses",
            currencyInternalName: "cheesed",
            currencyLayer: "luigi",
            cost: new Decimal(30000),
            unlocked() { return hasUpgrade(this.layer, 34) },
        },
        // Look in the upgrades docs to see what goes here!
    },
    milestones: {
        0: {
            requirementDescription: "Get 22 Luigi",
            effectDescription: "More overpower upgrades appeared in Super Acorn layer.",
            done() { return player.luigi.points.gte(22) },
        },
        1: {
            requirementDescription: "Get 80 Luigi",
            effectDescription: "You can buy max Luigi.",
            done() { return player.luigi.points.gte(80) },
        },
        2: {
            requirementDescription() { return `Get ${f(10000)} Luigi` },
            effectDescription: "Luigi resets nothing and autobuy Luigi.",
            done() { return player.luigi.points.gte(10000) },
        },
        3: {
            requirementDescription() { return `Get ${f("e1.798e308")} Cleared Courses` },
            effectDescription: "Unlock a new layer on row 10.",
            done() { return player.points.gte("e1.798e308") },
        },
    },
    buyables: {
        11: {
            title: "Ikena jumping",
            cost(x) { return new Decimal(10).pow(Decimal.pow(x, 1.35)) },
            display() {
                let LB1base = new Decimal(12)
                let display = ` Multiply Luigi clearing courses speed by ${format(LB1base)} per every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Luigi's cleared courses`
                return display
            },
            canAfford() { return player[this.layer].c.gte(this.cost()) },
            buy() {
                player[this.layer].c = player[this.layer].c.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            buyMax() { return setBuyableAmount(this.layer, this.id, player[this.layer].c.max(10).log(10).root(1.35).floor().add(1)) },
            effect(x) {
                let LB1base = new Decimal(12)
                effect = LB1base.pow(x).max(1)
                return effect
            },
            unlocked() { return hasUpgrade('luigi', 15) },
            style() {
                if (player[this.layer].c.gte(this.cost()))
                    return { "background": "linear-gradient(45deg, #5cb73d, #8cd46e)" }
            },
            canAuto() { return hasMilestone('toadette', 1) },
        },
        12: {
            title: "Icoda jumping",
            cost(x) { return new Decimal(10).pow(Decimal.pow(x, 1.4)) },
            display() {
                let LB2base = new Decimal(1.25)
                let display = ` Multiply cheesed Luigi clearing courses speed by ${format(LB2base)} per every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Luigi's cleared courses`
                return display
            },
            canAfford() { return player[this.layer].c.gte(this.cost()) },
            buy() {
                player[this.layer].c = player[this.layer].c.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            buyMax() { return setBuyableAmount(this.layer, this.id, player[this.layer].c.max(10).log(10).root(1.4).floor().add(1)) },
            effect(x) {
                let LB2base = new Decimal(1.25)
                effect = LB2base.pow(x).max(1)
                return effect
            },
            unlocked() { return hasUpgrade('luigi', 34) },
            style() {
                if (player[this.layer].c.gte(this.cost()))
                    return { "background": "linear-gradient(45deg, #5cb73d, #8cd46e)" }
            },
            canAuto() { return hasMilestone('toadette', 1) },
        },
        13: {
            title: "Ictra jumping",
            cost(x) { return new Decimal(5).pow(Decimal.pow(x, 1.2)) },
            display() {
                let LB3base = new Decimal(8)
                let display = ` Multiply Luigi clearing courses speed by ${format(LB3base)} per every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} cheesed Luigi's cleared courses`
                return display
            },
            canAfford() { return player[this.layer].cheesed.gte(this.cost()) },
            buy() {
                player[this.layer].cheesed = player[this.layer].cheesed.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            buyMax() { return setBuyableAmount(this.layer, this.id, player[this.layer].cheesed.max(5).log(5).root(1.2).floor().add(1)) },
            effect(x) {
                let LB3base = new Decimal(8)
                effect = LB3base.pow(x).max(1)
                return effect
            },
            unlocked() { return hasUpgrade('luigi', 35) },
            style() {
                if (player[this.layer].cheesed.gte(this.cost()))
                    return { "background": "linear-gradient(45deg, #5cb73d, #8cd46e)" }
            },
            canAuto() { return hasMilestone('toadette', 1) },
        },
    },
    update(diff) {
        let tick = new Decimal(0.05)
        let Lcmult = player[this.layer].points
        if (hasUpgrade(this.layer, 15)) Lcmult = Lcmult.times(buyableEffect(this.layer, 11))
        if (hasUpgrade(this.layer, 35)) Lcmult = Lcmult.times(buyableEffect(this.layer, 13))
        if (player.toad.level.gte(11)) Lcmult = Lcmult.times(player.toad.level_rew[2])
        player[this.layer].c_psec = Lcmult
        if (hasUpgrade(this.layer, 12)) player[this.layer].c = player[this.layer].c.add(Lcmult.times(diff))
        let Lchmult = new Decimal(1)
        if (hasUpgrade(this.layer, 33)) Lchmult = Lchmult.times(25)
        if (hasUpgrade(this.layer, 34)) Lchmult = Lchmult.times(buyableEffect(this.layer, 12))
        if (hasUpgrade('toad', 14)) Lchmult = Lchmult.times(100)
        if (player.toad.level.gte(6)) Lchmult = Lchmult.times(100)
        if (player.toad.level.gte(11)) Lchmult = Lchmult.times(player.toad.level_rew[2])
        if (hasMilestone('easy', 0)) Lchmult = Lchmult.times(20)
        player[this.layer].ch_psec = Lchmult
        if (hasUpgrade('toad', 11)) player[this.layer].cheesed = player[this.layer].cheesed.add(Lchmult.times(diff))

        if (buyableAuto('luigi', 11) && buyableCanAfford('luigi', 11)) setBuyableAmount(this.layer, 11, player[this.layer].c.max(10).log(10).root(1.35).floor().add(1))
        if (buyableAuto('luigi', 12) && buyableCanAfford('luigi', 12)) setBuyableAmount(this.layer, 12, player[this.layer].c.max(10).log(10).root(1.4).floor().add(1))
        if (buyableAuto('luigi', 13) && buyableCanAfford('luigi', 13)) setBuyableAmount(this.layer, 13, player[this.layer].cheesed.max(5).log(5).root(1.2).floor().add(1))
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + formatWhole(player.boomerang_flower.points) + ` Boomerang Flowers`],
        ["display-text", () => `Your best amount of Luigi is ` + formatWhole(player.luigi.best)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Mario and Luigi are called Mario Bros. Luigi is taller than Mario. The green letter "L" is his symbol!`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Luigi layer also keeps everything in Boomerang Flower layer, like coin and Mario layers did.`],
                    "milestones",
                ]
            },
            "Luigi's Journey": {
                unlocked() { return hasUpgrade('luigi', 12) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        dis = "Luigi cleared <h2 style='color: #5cb730; text-shadow: 0 0 10px #5cb730'>" + format(player.luigi.c) + " </h2> courses (+" + format(player.luigi.c_psec) + "/sec)"
                        return dis
                    }
                    ],
                    ["display-text", function () {
                        if (hasUpgrade("toad", 11))
                            return "Luigi cleared <h2 style='color: #5cb730; text-shadow: 0 0 10px #5cb730'>" + format(player.luigi.cheesed) + " </h2> courses by cheesing. (+" + format(player.luigi.ch_psec) + "/sec) Which increasing 'Nedaka jumping' base by <h2 style='color: #5cb730; text-shadow: 0 0 10px #5cb730'>+" + format(upgradeEffect('toad', 11)) + " </h2>"
                    }
                    ],
                    "clickables",
                    "buyables",
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #5cb73d, #ffffff)',
                        'border-color': '#5cb73d',
                        'color': 'black',
                    }
                },
            },
        },
    },
})
// 第二十二层：奇诺比奥
function toadTierLayerDisplay(decimal, isCapital = true) {
    decimal = new Decimal(decimal)
    let onesC = ["", "", "", "", "", "", "", "Hept", "Oct", "Enne"]
    let onesCc1 = ["", "Me", "Due", "Trie", "Tetre", "Pente", "Hexe", "Hepte", "Octe", "Enne"]
    let onesCc2 = ["", "Me", "Due", "Tria", "Tetra", "Penta", "Hexa", "Hepta", "Octa", "Ennea"]
    let onesL = ["", "", "", "", "", "", "", "hept", "oct", "enne"]
    let onesLc1 = ["", "me", "due", "trie", "tetre", "pente", "hexe", "hepte", "octe", "enne"]
    let onesLc2 = ["", "me", "due", "tria", "tetra", "penta", "hexa", "hepta", "octa", "ennea"]
    let tensC = ["", "Dec", "Icos", "Triacont", "Tetracont", "Pentacont", "Hexacont", "Heptacont", "Octacont", "Enneacont"]
    let tensL = ["", "dec", "icos", "triacont", "tetracont", "pentacont", "hexacont", "heptacont", "octacont", "enneacont"]
    let hundsC = ["", "Hect", "Dohect", "Triahect", "Tetrahect", "Pentahect", "Hexahect", "Heptahect", "Octahect", "Enneahect"]
    let hundsL = ["", "hect", "dohect", "triahect", "tetrahect", "pentahect", "hexahect", "heptahect", "octahect", "enneahect"]
    let C11 = "Endec"
    let L11 = "endec"
    let C12 = "Dodec"
    let L12 = "dodec"
    let a = "a"
    if (decimal.gte(1000)) return "Layer-" + formatWhole(decimal)
    let num = decimal.toNumber()
    if (num <= 9 && isCapital) return onesC[num]
    if (num <= 9 && !isCapital) return onesL[num]
    if (num >= 10 && num <= 99 && isCapital && num != 11 && num != 12 && num % 10 != 0) return onesCc2[num % 10] + tensL[Math.floor(num / 10)]
    if (num >= 10 && num <= 99 && !isCapital && num != 11 && num != 12 && num % 10 != 0) return onesLc2[num % 10] + tensL[Math.floor(num / 10)]
    if (num >= 10 && num <= 99 && isCapital && num % 10 == 0) return tensC[Math.floor(num / 10)]
    if (num >= 10 && num <= 99 && !isCapital && num % 10 == 0) return tensL[Math.floor(num / 10)]
    if (num == 11 && isCapital) return C11
    if (num == 11 && !isCapital) return L11
    if (num == 12 && isCapital) return C12
    if (num == 12 && !isCapital) return L12
    if (num >= 100 && num <= 999 && isCapital && num % 100 >= 13) return onesCc2[num % 10] + tensL[Math.floor(num / 10) % 10] + a + hundsL[Math.floor(num / 100)]
    if (num >= 100 && num <= 999 && !isCapital && num % 100 >= 13) return onesLc2[num % 10] + tensL[Math.floor(num / 10) % 10] + a + hundsL[Math.floor(num / 100)]
    if (num >= 100 && num <= 999 && isCapital && num % 100 == 11) return C11 + a + hundsL[Math.floor(num / 100)]
    if (num >= 100 && num <= 999 && isCapital && num % 100 == 12) return C12 + a + hundsL[Math.floor(num / 100)]
    if (num >= 100 && num <= 999 && isCapital && num % 100 >= 1 && num % 100 <= 9) return onesCc1[num % 100] + hundsL[Math.floor(num / 100)]
    if (num >= 100 && num <= 999 && !isCapital && num % 100 == 11) return L11 + a + hundsL[Math.floor(num / 100)]
    if (num >= 100 && num <= 999 && !isCapital && num % 100 == 12) return L12 + a + hundsL[Math.floor(num / 100)]
    if (num >= 100 && num <= 999 && !isCapital && num % 100 >= 1 && num % 100 <= 9) return onesLc1[num % 100] + hundsL[Math.floor(num / 100)]
    if (num >= 100 && num <= 999 && isCapital && num % 100 == 0) return hundsC[Math.floor(num / 100)]
    if (num >= 100 && num <= 999 && !isCapital && num % 100 == 0) return hundsL[Math.floor(num / 100)]
    // num == 1000 chilla? killi?
}
addLayer("toad", {
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            level: new Decimal(0),
            tier: new Decimal(0),
            supertier: [new Decimal(0), new Decimal(0), new Decimal(0), new Decimal(0), new Decimal(0)],
            level_des: "placeholder",
            tier_des: "placeholder",
            supertier_des: ["placeholder", "placeholder", "placeholder", "placeholder", "placeholder"],
            level_rew: [new Decimal(0), new Decimal(0), new Decimal(0), new Decimal(0), new Decimal(0)],
            tier_rew: [new Decimal(0), new Decimal(0), new Decimal(0), new Decimal(0), new Decimal(0)],
            supertier_rew: [[new Decimal(0), new Decimal(0), new Decimal(0), new Decimal(0), new Decimal(0)],
            [new Decimal(0), new Decimal(0), new Decimal(0), new Decimal(0), new Decimal(0)],
            [new Decimal(0), new Decimal(0), new Decimal(0), new Decimal(0), new Decimal(0)],
            [new Decimal(0), new Decimal(0), new Decimal(0), new Decimal(0), new Decimal(0)],
            [new Decimal(0), new Decimal(0), new Decimal(0), new Decimal(0), new Decimal(0)]],
            tierlayer: new Decimal(7),
            tierlayer_des: ["placeholder", "placeholder", "placeholder", "placeholder", "placeholder"],
            tierlayer_rew: [new Decimal(0), new Decimal(0), new Decimal(0), new Decimal(0), new Decimal(0)],
            highest_tierlayer: new Decimal(0),
            awaken_power: new Decimal(0),
        }
    },

    color: "#0047ff",                       // The color for this layer, which affects many elements.
    resource: "Toad",            // The name of this layer's main prestige resource.
    symbol: "To",
    branches: ["mario"],
    row: 9,                                 // The row this layer is on (0 is the first row).
    displayRow: 9,
    position: 0,
    baseResource: "Mario cleared courses",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.mario.c_re },  // A function to return the current amount of baseResource.

    requires: new Decimal("1e21160"),              // The amount of the base needed to  gain 1 of the prestige currency.
    //v0.9改成1e21160
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.00007,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        if (player.toad.level.gte(1)) mult = mult.times(player.toad.level_rew[0])
        if (player.toad.tier.gte(1)) mult = mult.times(buyableEffect(this.layer, 101))
        if (hasUpgrade(this.layer, 23)) mult = mult.times(upgradeEffect(this.layer, 23))
        if (hasUpgrade(this.layer, 24)) mult = mult.times(79)
        if (hasUpgrade(this.layer, 25)) mult = mult.times(2400)
        if (hasMilestone('toadette', 2)) mult = mult.times(milestoneEffect('toadette', 2))
        if (hasUpgrade(this.layer, 52)) mult = mult.times(1e30)
        if (hasUpgrade('toadette', 41)) mult = mult.times(upgradeEffect('toadette', 41))
        if (hasUpgrade(this.layer, 53)) mult = mult.times(1e50)
        if (hasUpgrade(this.layer, 54)) mult = mult.times(1e50)
        if (hasUpgrade(this.layer, 63)) mult = mult.times("1e2000")
        if (hasUpgrade('normal', 12)) mult = mult.times(upgradeEffect('normal', 12))
        return mult
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },
    softcap() {
        cap = new Decimal(1e37)
        if (hasUpgrade('toadette', 11)) cap = cap.times(upgradeEffect('toadette', 11))
        if (hasUpgrade('toad', 51)) cap = cap.times(1e20)
        if (hasUpgrade('easy', 13)) cap = cap.times(upgradeEffect('easy', 13))
        return cap
    },
    softcapPower() {
        let power = 0.5
        if (hasUpgrade('toad', 55)) power = 0.66
        if (hasUpgrade('toadette', 42)) power = 0.8
        return power
    },

    layerShown() { return hasAchievement('achievements', 145) },          // Returns a bool for if this layer's node should be visible in the tree.

    passiveGeneration() { return hasUpgrade(this.layer, 21) },

    doReset(resettingLayer) {
        if (layers[resettingLayer].row >= 12) return undefined
        else if (layers[resettingLayer].row > layers[this.layer].row) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('easy', 0)) {
                kept.push("milestones")
            }
            if (hasMilestone('easy', 5)) {
                kept.push("upgrades")
            }
            if (player.toad.supertier[2].gte(1)) {
                kept.push("buyables", 11)
                kept.push("buyables", 12)
                kept.push("buyables", 21)
                kept.push("buyables", 22)
                kept.push("buyables", 31)
                kept.push("buyables", 32)
            }
            layerDataReset(this.layer, kept)
        }
    },

    hotkeys: [
        { key: "t", description: "T: Reset for Toad", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],

    upgrades: {
        11: {
            title: "We are adorable!",
            description: "Unlock a new resource in Luigi layer.",
            cost: new Decimal(4),
            unlocked() { return true },
            effect() { return player.luigi.cheesed.add(10).max(10).log(10).div(1000) }
        },
        12: {
            title: "Thank you! Mario",
            description: "Unlock 13th Luigi upgrade.",
            cost: new Decimal(6),
            unlocked() { return hasUpgrade(this.layer, 11) },
        },
        13: {
            title: "But our princess is in another castle",
            description: "Unlock a subtab this layer.",
            currencyDisplayName: "cheesed Luigi cleared courses",
            currencyInternalName: "cheesed",
            currencyLayer: "luigi",
            cost: new Decimal(98000),
            unlocked() { return hasUpgrade(this.layer, 12) },
        },
        14: {
            title: "Mushroom head",
            description: "100x cheesed Luigi cleared courses gain.",
            cost: new Decimal(36),
            unlocked() { return hasUpgrade(this.layer, 13) },
        },
        15: {
            title: "Welcome to the Mushroom Kingdom!",
            description: "3 Mario boosters have no conditions.",
            cost: new Decimal(144),
            unlocked() { return hasUpgrade(this.layer, 14) },
        },
        21: {
            title: "Red Toad",
            description: "Passive gain 100% Toad every second.",
            cost: new Decimal(240),
            unlocked() { return hasUpgrade(this.layer, 15) },
        },
        22: {
            title: "Yellow Toad",
            description: "Unlock Toad Tier.",
            cost: new Decimal(99999),
            unlocked() { return hasUpgrade(this.layer, 21) },
        },
        23: {
            title: "Green Toad",
            description: "Multiply Toad gain by OoM^2s of Cleared Courses.",
            cost: new Decimal(1e11),
            unlocked() { return hasUpgrade(this.layer, 22) },
            effect() {
                return player.lgpoints.max(10).log(10)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        24: {
            title: "Blue Toad",
            description: "79x Toad gain, it'll help you to reach Toad level 11.",
            cost: new Decimal(4e16),
            unlocked() { return hasUpgrade(this.layer, 23) },
        },
        25: {
            title: "Purple Toad",
            description() { return `${f(2400)}x Toad gain, it'll help you to reach Toad tier 4.` },
            cost: new Decimal(2e44),
            unlocked() { return hasUpgrade(this.layer, 24) },
        },
        31: {
            title: "Captain Toad",
            description() {
                let hardcap = new Decimal(100)
                if (hasMilestone('easy', 8)) hardcap = hardcap.add(100)
                return "Toad Tier requirment is decreased based on Toadette. (Requirment can't be negative, and hardcap at -" + formatWhole(hardcap) + ")"
            },
            cost: new Decimal(6e60),
            unlocked() { return hasUpgrade(this.layer, 25) },
            effect() {
                let hardcap = new Decimal(100)
                if (hasMilestone('easy', 8)) hardcap = hardcap.add(100)
                let eff = player.toadette.points.max(10).log(10).min(hardcap).ceil()
                if (hasUpgrade(this.layer, 45)) eff = eff.times(2).min(hardcap)
                return eff
            },
            effectDisplay() { return "-" + formatWhole(upgradeEffect(this.layer, this.id)) },
        },
        32: {
            title: "Mushroom team",
            description: "Piranhas completion limit is increased based on Cleared Courses.",
            cost: new Decimal(1e64),
            unlocked() { return hasUpgrade(this.layer, 31) },
            effect() {
                return player.lgpoints.max(1e13).log(1e13).round()
            },
            effectDisplay() { return "+" + formatWhole(upgradeEffect(this.layer, this.id)) },
        },
        33: {
            title: "Iron head",
            description: "Square \"Piranha\" effect base.",
            cost: new Decimal(6.66e66),
            unlocked() { return hasUpgrade(this.layer, 32) }
        },
        34: {
            title: "Worker Toad",
            description: "+1 to \"Ictera jumping\" base.",
            cost: new Decimal(1.717e68),
            unlocked() { return hasUpgrade(this.layer, 33) }
        },
        35: {
            title: "Cat Toad",
            description() { return `Delay Mario cleared courses hard(soft)cap by ${f('1e100000')}x` },
            cost: new Decimal(7.654e77),
            unlocked() { return hasUpgrade(this.layer, 34) }
        },
        41: {
            title: "Many many Toads",
            description: "2x Toad Tier 5 effect base.",
            cost: new Decimal(4e86),
            unlocked() { return hasUpgrade(this.layer, 35) }
        },
        42: {
            title: "Running faster",
            description: "Unlock Toad Tetr.",
            cost: new Decimal(3e152),
            unlocked() { return hasUpgrade(this.layer, 41) }
        },
        43: {
            title: "Blue fire Toad",
            description: "20x Toadette gain.",
            cost: new Decimal(1e153),
            unlocked() { return hasUpgrade(this.layer, 42) }
        },
        44: {
            title: "Doesn't become yellow",
            description: "You can buy max Toad level.",
            currencyDisplayName: "Awaken Power",
            currencyInternalName: "awaken_power",
            currencyLayer: "toad",
            cost: new Decimal(10000),
            unlocked() { return hasUpgrade(this.layer, 43) }
        },
        45: {
            title: "Ha ya ho",
            description: "Double 11th Toad upgrade's effect.",
            cost: new Decimal(1e214),
            unlocked() { return hasUpgrade(this.layer, 44) }
        },
        51: {
            title: "Waaaa!",
            description() { return `Delay Toad softcap by ${f(1e20)}x.` },
            cost: new Decimal(1e260),
            unlocked() { return hasUpgrade(this.layer, 45) },
        },
        52: {
            title: "Toad's ascend",
            description() { return `${f(1e30)}x Toad gain.` },
            cost: new Decimal("1e616"),
            unlocked() { return hasUpgrade(this.layer, 51) },
        },
        53: {
            title: "Catch the flag!",
            description() { return `${f(1e50)}x Toad gain.` },
            cost: new Decimal("1e1251"),
            unlocked() { return hasUpgrade(this.layer, 52) },
        },
        54: {
            title: "Toad's singularity",
            description() { return `Unlock Toad Pent, and ${f(1e50)}x Toad gain.` },
            cost: new Decimal("1e1325"),
            unlocked() { return hasUpgrade(this.layer, 53) }
        },
        55: {
            title: "Red Toad in the year 1985",
            description: "Weaken Toad gain softcap.",
            cost: new Decimal("1e1388"),
            unlocked() { return hasUpgrade(this.layer, 54) }
        },
        61: {
            title: "Toad's army",
            description: "Toad tetr multiplies No Damage easy clears.",
            cost: new Decimal("1e25070"),
            unlocked() { return hasUpgrade('easy', 23) },
            effect() {
                return player.toad.supertier[0].add(1).max(1)
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        62: {
            title: "Paper Toad",
            description: "^1.5 Peachette's effect.",
            cost: new Decimal("1e33000"),
            unlocked() { return hasUpgrade(this.layer, 61) }
        },
        63: {
            title: "Teamwork!",
            description() { return `${f('1e2000')}x Toad gain.` },
            cost: new Decimal("1e35100"),
            unlocked() { return hasUpgrade(this.layer, 62) }
        },
        64: {
            title: "Never again",
            description: "You never lose any no damage easy clears.",
            cost: new Decimal("1e226666"),
            unlocked() { return hasUpgrade(this.layer, 63) }
        },
        65: {
            title: "Rolling Toad",
            description: "You can go beyond Mario cleared courses hardcap^3, but it'll be logarithmically softcapped.",
            cost: new Decimal("1e250000"),
            unlocked() { return hasUpgrade(this.layer, 64) }
        },
        // Look in the upgrades docs to see what goes here!
    },
    buyables: {
        11: {
            title() { return "Toad Level " + formatWhole(getBuyableAmount(this.layer, this.id)) },
            cost(x) {
                cost = new Decimal(10).pow(x.pow(1.28).add(1))
                if (player.toad.tier.gte(2)) cost = cost.div(buyableEffect(this.layer, 102))
                return cost
            },
            display() {
                let display = ` Raise Toad level, but reset your Toad. <br>
                Cost: ${formatWhole(this.cost())} Toad <br>
                ${player.toad.level_des}`
                return display
            },
            canAfford() { return player[this.layer].points.gte(this.cost()) },
            buyMax() {
                if (player.toad.tier.gte(2))
                    return setBuyableAmount('toad', 11, player.toad.points.times(buyableEffect('toad', 102)).max(10).log(10).sub(1).root(1.28).floor().add(1))
                else return setBuyableAmount('toad', 11, player.toad.points.max(10).log(10).sub(1).root(1.28).floor().add(1))
            },
            buy() {
                let amount = getBuyableAmount(this.layer, this.id).add(1)
                setBuyableAmount(this.layer, this.id, amount)
                if (hasUpgrade(this.layer, 44)) this.buyMax()
                if (player.toad.tier.lt(12)) player[this.layer].points = new Decimal(0)
            },

            unlocked() { return hasUpgrade('toad', 13) },
            style() {
                return {
                    "background": "linear-gradient(90deg, #000000, #001244)",
                    "border-radius": "0%",
                    "width": "300px",
                    "height": "120px",
                    "color": "white",
                    "border": "5px solid",
                    "border-color": "rgba(255,255,255,0.125)"
                }
            },
        },
        12: {
            title() { return "Toad Tier " + formatWhole(getBuyableAmount(this.layer, this.id)) },
            cost(x) {
                let cheap = new Decimal(0)
                let reduce = new Decimal(1)
                if (player.toad.level.gte(234)) reduce = new Decimal(0.75)
                if (hasUpgrade(this.layer, 31)) cheap = cheap.add(upgradeEffect(this.layer, 31))
                let cost = new Decimal(4).times(x.times(4 / 3).pow(1.1).add(1)).sub(cheap).times(reduce).floor().max(0)
                return cost
            },
            display() {
                let display = ` Raise Toad tier, but reset your Toad and Toad level. <br>
                Cost: Toad level ${formatWhole(this.cost())} <br>
                ${player.toad.tier_des}`
                return display
            },
            canAfford() { return player[this.layer].level.gte(this.cost()) },
            buyMax() {
                let cheap = new Decimal(0)
                let reduce = new Decimal(1)
                if (player.toad.level.gte(234)) reduce = new Decimal(0.75)
                if (hasUpgrade(this.layer, 31)) cheap = cheap.add(upgradeEffect(this.layer, 31))
                return setBuyableAmount('toad', 12, player.toad.level.div(reduce).add(cheap).div(4).sub(1).root(1.1).times(0.75).round().add(1))
            },
            buy() {
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (hasMilestone('easy', 1)) this.buyMax()
                if (hasMilestone('easy', 1) == false) player[this.layer].points = new Decimal(0)
                if (hasMilestone('easy', 1) == false) player[this.layer].buyables[11] = new Decimal(0)
            },
            unlocked() { return hasUpgrade('toad', 22) },
            style() {
                return {
                    "background": "linear-gradient(90deg, #000000, #001244)",
                    "border-radius": "0%",
                    "width": "300px",
                    "height": "120px",
                    "color": "white",
                    "border": "5px solid",
                    "border-color": "rgba(255,255,255,0.125)"
                }
            },
        },
        21: {
            title() { return "Toad Tetr " + formatWhole(getBuyableAmount(this.layer, this.id)) },
            cost(x) {
                let cheap = new Decimal(0)
                let cost = new Decimal(10).times(x.times(4 / 3).pow(1.1).add(1)).floor().sub(cheap).max(0)
                return cost
            },
            display() {
                let display = ` Raise Toad tetr, but reset your Toad, Toad level and Toad tier. <br>
                Cost: Toad tier ${formatWhole(this.cost())} <br>
                ${player.toad.supertier_des[0]}`
                return display
            },
            canAfford() { return player[this.layer].tier.gte(this.cost()) },
            buyMax() { return setBuyableAmount('toad', 21, player.toad.tier.div(10).sub(1).root(1.1).times(0.75).ceil()) },
            buy() {
                if (hasMilestone('toad', 7) == false) player[this.layer].points = new Decimal(0)
                if (hasMilestone('toad', 7) == false) player[this.layer].buyables[11] = new Decimal(0)
                if (hasMilestone('toad', 7) == false) player[this.layer].buyables[12] = new Decimal(0)
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            unlocked() { return hasUpgrade('toad', 42) },
            style() {
                return {
                    "background": "linear-gradient(90deg, #000000, #001244)",
                    "border-radius": "0%",
                    "width": "300px",
                    "height": "120px",
                    "color": "white",
                    "border": "5px solid",
                    "border-color": "rgba(255,255,255,0.125)"
                }
            },
        },
        22: {
            title() { return "Toad Pent " + formatWhole(getBuyableAmount(this.layer, this.id)) },
            cost(x) {
                let cheap = new Decimal(0)
                let reduce = new Decimal(1)
                if (hasUpgrade('easy', 42)) reduce = new Decimal(0.475)
                let cost = new Decimal(12).times(x.pow(1.2).add(1)).sub(7).sub(cheap).times(reduce).floor().max(0)
                return cost
            },
            display() {
                let display = ` Raise Toad pent, but reset all your previous Toad level layers. <br>
                Cost: Toad tetr ${formatWhole(this.cost())} <br>
                ${player.toad.supertier_des[1]}`
                return display
            },
            canAfford() { return player[this.layer].supertier[0].gte(this.cost()) },
            buyMax() {
                let cheap = new Decimal(0)
                let reduce = new Decimal(1)
                if (hasUpgrade('easy', 42)) reduce = new Decimal(0.475)
                setBuyableAmount('toad', 22, player.toad.supertier[0].div(reduce).add(cheap).add(7).div(12).sub(1).root(1.2).floor().add(1))
            },
            buy() {
                if (hasMilestone('easy', 14) == false) player[this.layer].points = new Decimal(0)
                if (hasMilestone('easy', 14) == false) player[this.layer].buyables[11] = new Decimal(0)
                if (hasMilestone('easy', 14) == false) player[this.layer].buyables[12] = new Decimal(0)
                if (hasMilestone('easy', 14) == false) player[this.layer].buyables[21] = new Decimal(0)
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            unlocked() { return hasUpgrade('toad', 54) },
            style() {
                return {
                    "background": "linear-gradient(90deg, #000000, #001244)",
                    "border-radius": "0%",
                    "width": "300px",
                    "height": "120px",
                    "color": "white",
                    "border": "5px solid",
                    "border-color": "rgba(255,255,255,0.125)"
                }
            },
        },
        31: {
            title() { return "Toad Hex " + formatWhole(getBuyableAmount(this.layer, this.id)) },
            cost(x) {
                let cost = new Decimal(18).times(x.pow(1.25).add(1)).floor().sub(11).max(0)
                return cost
            },
            display() {
                let display = ` Raise Toad hex, but reset all your previous Toad level layers. <br>
                Cost: Toad pent ${formatWhole(this.cost())} <br>
                ${player.toad.supertier_des[2]}`
                return display
            },
            canAfford() { return player[this.layer].supertier[1].gte(this.cost()) },
            buyMax() {
                return setBuyableAmount('toad', 31, player.toad.supertier[2].max(0).add(11).div(18).sub(1).root(1.25).ceil())
            },
            buy() {
                player[this.layer].points = new Decimal(0)
                player[this.layer].buyables[11] = new Decimal(0)
                player[this.layer].buyables[12] = new Decimal(0)
                player[this.layer].buyables[21] = new Decimal(0)
                player[this.layer].buyables[22] = new Decimal(0)
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            unlocked() { return hasUpgrade('toadette', 44) },
            style() {
                return {
                    "background": "linear-gradient(90deg, #000000, #001244)",
                    "border-radius": "0%",
                    "width": "300px",
                    "height": "120px",
                    "color": "white",
                    "border": "5px solid",
                    "border-color": "rgba(255,255,255,0.125)"
                }
            },
        },
        32: {
            title() { return "Toad Hept " + formatWhole(getBuyableAmount(this.layer, this.id)) },
            cost(x) {
                let cheap = new Decimal(0)
                let cost = new Decimal(23).times(x.add(1)).max(0)
                return cost
            },
            display() {
                let display = ` Raise Toad hept, oct, enne... etc. <br>
                Cost: Toad hex ${formatWhole(this.cost())} <br>
                ${player.toad.supertier_des[3]}`
                return display
            },
            canAfford() { return player[this.layer].supertier[2].gte(this.cost()) },
            buyMax() {
                return setBuyableAmount('toad', 32, player.toad.supertier[2].div(23).floor())
            },
            buy() {
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            unlocked() { return player.toad.supertier[2].gte(20) },
            style() {
                return {
                    "background": "linear-gradient(90deg, #000000, #001244)",
                    "border-radius": "0%",
                    "width": "300px",
                    "height": "120px",
                    "color": "white",
                    "border": "5px solid",
                    "border-color": "rgba(255,255,255,0.125)"
                }
            },
        },
        41: {
            title() {
                let l = player.toad.tierlayer
                let c = l.sub(7)
                let c_1 = l.sub(8)
                let c_2 = l.sub(9)
                if (player.toad.tierlayer.eq(7))
                    return "Toad " + toadTierLayerDisplay(l) + " " + formatWhole(player.toad.supertier[3])
                if (player.toad.tierlayer.eq(8))
                    return "Toad " + toadTierLayerDisplay(l) + " " + formatWhole(player.toad.supertier[3].div(100).floor()) + "<br>"
                        + "Toad " + toadTierLayerDisplay(l.sub(1)) + " " + formatWhole(player.toad.supertier[3])
                if (player.toad.tierlayer.gte(9))
                    return "Toad " + toadTierLayerDisplay(l) + " " + formatWhole(player.toad.supertier[3].div(Decimal.pow(10, c.times(3).add(c.pow(2)).div(2))).floor()) + "<br>"
                        + "Toad " + toadTierLayerDisplay(l.sub(1)) + " " + formatWhole(player.toad.supertier[3].div(Decimal.pow(10, c_1.times(3).add(c_1.pow(2)).div(2))).floor()) + "<br>"
                        + "Toad " + toadTierLayerDisplay(l.sub(2)) + " " + formatWhole(player.toad.supertier[3].div(Decimal.pow(10, c_2.times(3).add(c_2.pow(2)).div(2))).floor())
            },
            display() {
                let l = player.toad.tierlayer
                let display = ` Higher Toad tier layers are passively increasing <br>
                Toad ${toadTierLayerDisplay(l.add(1), false)} up at Toad ${toadTierLayerDisplay(l, false)} ${formatWhole(Decimal.pow(10, l.sub(5)))}
                <br>${player.toad.tierlayer_des}`
                return display
            },
            unlocked() { return player.toad.supertier[2].gte(20) },
            style() {
                return {
                    "background": "linear-gradient(90deg, #000000, #001244)",
                    "border-radius": "0%",
                    "width": "614px",
                    "height": "180px",
                    "color": "white",
                    "border": "5px solid",
                    "border-color": "rgba(255,255,255,0.125)"
                }
            },
        },
        101: {
            title: "Ictera jumping",
            cost(x) { return new Decimal(2).pow(Decimal.pow(x, 1.4)) },
            display() {
                let ToB1base = new Decimal(2)
                if (hasUpgrade(this.layer, 34)) ToB1base = ToB1base.add(1)
                if (player.toad.tier.gte(7)) ToB1base = ToB1base.add(player.toad.tier_rew[1])
                if (hasUpgrade('easy', 21)) ToB1base = ToB1base.times(upgradeEffect('easy', 21))
                if (player.toad.supertier[1].gte(4)) ToB1base = ToB1base.times(100)
                if (player.toad.supertier[3].gte(12)) ToB1base = ToB1base.pow(2)
                let display = ` Multiply Toad gain by ${format(ToB1base)} per every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Toad`
                return display
            },
            canAfford() { return player[this.layer].points.gte(this.cost()) },
            buyMax() {
                return setBuyableAmount('toad', 101, player.toad.points.max(2).log(2).root(1.4).floor().add(1))
            },
            buy() {
                player[this.layer].points = player[this.layer].points.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (hasMilestone('easy', 1)) this.buyMax()
            },
            effect(x) {
                let ToB1base = new Decimal(2)
                if (hasUpgrade(this.layer, 34)) ToB1base = ToB1base.add(1)
                if (player.toad.tier.gte(7)) ToB1base = ToB1base.add(player.toad.tier_rew[1])
                if (hasUpgrade('easy', 21)) ToB1base = ToB1base.times(upgradeEffect('easy', 21))
                if (player.toad.supertier[1].gte(4)) ToB1base = ToB1base.times(100)
                if (player.toad.supertier[3].gte(12)) ToB1base = ToB1base.pow(2)
                effect = ToB1base.pow(x).max(1)
                return effect
            },
            unlocked() { return player.toad.tier.gte(1) },
            style() {
                if (player[this.layer].points.gte(this.cost()))
                    dis = {
                        "background": "linear-gradient(45deg, #0047ff, #2265ff)",
                        "border-radius": "0%"
                    }
                else dis = { "border-radius": "0%" }
                return dis
            },
        },
        102: {
            title: "Icpeta jumping",
            cost(x) { return new Decimal(3).pow(Decimal.pow(x, 1.78)).times(1e10) },
            display() {
                let ToB2base = new Decimal(2)
                if (player.toad.tier.gte(34)) ToB2base = ToB2base.add(clickableEffect('toadette', 11))
                let display = ` Divide Toad level cost by ${format(ToB2base)} per every level. <br>
                Effect: /${format(this.effect())} <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Toad`
                return display
            },
            canAfford() { return player[this.layer].points.gte(this.cost()) },
            buyMax() {
                return setBuyableAmount('toad', 102, player.toad.points.div(1e10).max(3).log(3).root(1.78).floor().add(1))
            },
            buy() {
                player[this.layer].points = player[this.layer].points.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (hasMilestone('easy', 1)) this.buyMax()
            },
            effect(x) {
                let ToB2base = new Decimal(2)
                if (player.toad.tier.gte(34)) ToB2base = ToB2base.add(clickableEffect('toadette', 11))
                effect = ToB2base.pow(x).max(1)
                return effect
            },
            unlocked() { return player.toad.tier.gte(2) },
            style() {
                if (player[this.layer].points.gte(this.cost()))
                    dis = {
                        "background": "linear-gradient(45deg, #0047ff, #2265ff)",
                        "border-radius": "0%"
                    }
                else dis = { "border-radius": "0%" }
                return dis
            },
        },
        103: {
            title: "Ikecta jumping",
            cost(x) { return new Decimal(100).pow(Decimal.pow(x, 1.9)).times(1e76) },
            display() {
                let ToB3base = new Decimal("1e25000")
                let ToB3base2 = new Decimal(1.01)
                let display = ` Delay Mario cleared courses hard(soft)cap^2 by ${format(ToB3base)}x per every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Toad`
                if (hasUpgrade('easy', 33)) display = ` Delay Mario cleared courses hard(soft)cap^2 by ${format(ToB3base)}x per every level, multiply Free Clear by ${format(ToB3base2)} per every level. <br>
                Effect 1: ${format(this.effect())}x <br>
                Effect 2: ${format(this.effectII())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Toad`
                return display
            },
            canAfford() { return player[this.layer].points.gte(this.cost()) },
            buyMax() {
                return setBuyableAmount('toad', 103, player.toad.points.div(1e76).max(100).log(100).root(1.9).floor().add(1))
            },
            buy() {
                player[this.layer].points = player[this.layer].points.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (hasMilestone('easy', 1)) this.buyMax()
            },
            effect(x) {
                let ToB3base = new Decimal("1e25000")
                effect = ToB3base.pow(x).max(1)
                return effect
            },
            effectII(x) {
                let ToB3base2 = new Decimal(1.01)
                effect = ToB3base2.pow(getBuyableAmount(this.layer, this.id)).max(1)
                return effect
            },
            unlocked() { return hasUpgrade('toadette', 15) },
            style() {
                if (player[this.layer].points.gte(this.cost()))
                    dis = {
                        "background": "linear-gradient(45deg, #0047ff, #2265ff)",
                        "border-radius": "0%"
                    }
                else dis = { "border-radius": "0%" }
                return dis
            },
        },
        111: {
            title: "Toad tickspeed",
            cost(x) { return new Decimal(5).pow(Decimal.pow(x, 1.64)) },
            display() {
                let base = new Decimal(5)
                if (hasMilestone('easy', 4)) base = base.add(2.5)
                if (hasUpgrade('easy', 12)) base = base.add(upgradeEffect('easy', 12))
                let display = ` Multiply Toadette gain by ${format(base)}x per every level. <br>
                Effect: ${format(this.effect())}x <br>
                Level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Awaken Power`
                return display
            },
            canAfford() { return player[this.layer].awaken_power.gte(this.cost()) },
            buyMax() {
                return setBuyableAmount('toad', 111, player.toad.awaken_power.max(5).log(5).root(1.64).floor().add(1))
            },
            buy() {
                player[this.layer].awaken_power = player[this.layer].awaken_power.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (hasMilestone('easy', 1)) this.buyMax()
            },
            effect(x) {
                let base = new Decimal(5)
                if (hasMilestone('easy', 4)) base = base.add(2.5)
                if (hasUpgrade('easy', 12)) base = base.add(upgradeEffect('easy', 12))
                effect = base.pow(x).max(1)
                return effect
            },
            unlocked() { return hasMilestone(this.layer, 5) },
            style() {
                if (player[this.layer].awaken_power.gte(this.cost()))
                    dis = {
                        "background-color": "#ffca00",
                        "border-radius": "0%"
                    }
                else dis = { "border-radius": "0%" }
                return dis
            },
        },
    },
    clickables: {
        11: {
            title: "Awaken Toad",
            display() {
                let gain = player.toad.points.div(1e165).max(0).root(14)
                if (player.toad.level.gte(66)) gain = gain.times(player.toad.level_rew[3])
                gain = gain.floor()
                let next = Decimal.pow(gain.add(1), 14).times(1e165)
                if (player.toad.level.gte(66)) next = Decimal.pow(gain.add(1).div(player.toad.level_rew[3]), 14).times(1e165)
                return "Reset Toad, Toad level, tier, tetr...etc. But gain <b>" + formatWhole(gain) + "</b> Awaken Power<br>Next Awaken Power: " + format(next) + " Toad<br>Req: Toad tetr 1"
            },
            canClick() { return player.toad.points.gte(1e165) && player.toad.supertier[0].gte(1) },
            onClick() {
                let gain = player.toad.points.div(1e165).max(0).root(14)
                if (player.toad.level.gte(66)) gain = gain.times(player.toad.level_rew[3])
                gain = gain.floor()
                if (player.toad.supertier[0].lt(2))
                    return player[this.layer].points = new Decimal(0),
                        player[this.layer].buyables[11] = new Decimal(0),
                        player[this.layer].buyables[12] = new Decimal(0),
                        player[this.layer].buyables[21] = new Decimal(0),
                        player.toad.awaken_power = player.toad.awaken_power.add(gain)
                else return player[this.layer].points = new Decimal(0),
                    player[this.layer].buyables[11] = new Decimal(0),
                    player[this.layer].buyables[12] = new Decimal(0),
                    player.toad.awaken_power = player.toad.awaken_power.add(gain)
            },
            unlocked() { return hasAchievement('achievements', 154) },
            style() {
                if (player.toad.points.gte(1e165) && player.toad.supertier[0].gte(1))
                    dis = {
                        "background-color": "#ffca00",
                        "width": "180px"
                    }
                else dis = { "width": "180px" }
                return dis
            },
        },
    },
    update(diff) {
        let tick = new Decimal(0.05)

        if (hasUpgrade('toad', 13)) player.toad.level = player.toad.buyables[11]
        if (hasUpgrade('toad', 22)) player.toad.tier = player.toad.buyables[12]
        if (hasUpgrade('toad', 42)) player.toad.supertier[0] = player.toad.buyables[21]
        if (hasUpgrade('toad', 54)) player.toad.supertier[1] = player.toad.buyables[22]
        if (hasUpgrade('toadette', 44)) player.toad.supertier[2] = player.toad.buyables[31]
        if (player.toad.supertier[2].gte(20)) player.toad.supertier[3] = player.toad.buyables[32]
        let r = player.toad.supertier[3].max(1).log(10)
        if (player.toad.supertier[2].gte(20)) player.toad.tierlayer = r.times(2).add(2.25).root(2).add(5.5).floor() //100七重阶是1八重阶，1000八重阶是1九重阶，10000九重阶是1十重阶，以此类推

        let c = player.toad.tierlayer.sub(7)
        player.toad.highest_tierlayer = player.toad.supertier[3].div(Decimal.pow(10, c.times(3).add(c.pow(2)).div(2))).floor()
        // 文本更新
        if (player.toad.level.lt(1)) player.toad.level_des = "At Toad level 1, Toad level boosts Toad gain."
        else if (player.toad.level.lt(3)) player.toad.level_des = "At Toad level 3, Toad level delays Cleared Courses hardcap."
        else if (player.toad.level.lt(6)) player.toad.level_des = "At Toad level 6, 100x cheesed Luigi cleared courses gain."
        else if (player.toad.level.lt(11)) player.toad.level_des = "At Toad level 11, Toad boosts cheesed and normal Luigi cleared courses gain."
        else if (player.toad.level.lt(25)) player.toad.level_des = "At Toad level 25, +1 to Toad level 1 reward base."
        else if (player.toad.level.lt(66)) player.toad.level_des = "At Toad level 66, Luigi multiplies Awaken Power gain."
        else if (player.toad.level.lt(234)) player.toad.level_des = "At Toad level 234, Toad tier cost is reduced by 0.75x."
        else if (player.toad.level.lt(2600)) player.toad.level_des = "At Toad level 2600, Toad level now boosts Easy Endless clears gain."
        else if (player.toad.level.gte(2600)) player.toad.level_des = "You have unlocked every Toad level rewards!"

        if (player.toad.tier.lt(1)) player.toad.tier_des = "At Toad tier 1, unlock a buyable for Toad."
        else if (player.toad.tier.lt(2)) player.toad.tier_des = "At Toad tier 2, unlock another buyable."
        else if (player.toad.tier.lt(4)) player.toad.tier_des = "At Toad tier 4, unlock the last character layer."
        else if (player.toad.tier.lt(5)) player.toad.tier_des = "At Toad tier 5, Toad Tier boosts Toadette gain."
        else if (player.toad.tier.lt(7)) player.toad.tier_des = "At Toad tier 7, Toadette increases 'Ictera jumping' base."
        else if (player.toad.tier.lt(12)) player.toad.tier_des = "At Toad tier 12, Toad level no longer resets Toad."
        else if (player.toad.tier.lt(34)) player.toad.tier_des = "At Toad tier 34, unlock a new resource in Toadette layer."
        else if (player.toad.tier.lt(238)) player.toad.tier_des = "At Toad tier 238, ^5 2nd coin upgrade's effect."
        else if (player.toad.tier.gte(238)) player.toad.tier_des = "You have unlocked every Toad tier rewards!"

        if (player.toad.supertier[0].lt(1)) player.toad.supertier_des[0] = "At Toad tetr 1, unlock a new resource for Toad."
        else if (player.toad.supertier[0].lt(2)) player.toad.supertier_des[0] = "At Toad tetr 2, Awaken Power no longer resets Toad tetr."
        else if (player.toad.supertier[0].lt(3)) player.toad.supertier_des[0] = "At Toad tetr 3, auto Toad level up."
        else if (player.toad.supertier[0].lt(6)) player.toad.supertier_des[0] = "At Toad tetr 6, unlock a new layer about a game mode of SMM2."
        else if (player.toad.supertier[0].lt(28)) player.toad.supertier_des[0] = "At Toad tetr 28, Toadette Crown effect is boosted base on Toad tetr."
        else if (player.toad.supertier[0].lt(2434)) player.toad.supertier_des[0] = "At Toad tetr 2434, Toad level 3 effect's softcap is weaker again."
        else if (player.toad.supertier[0].gte(2434)) player.toad.supertier_des[0] = "You have unlocked every Toad tetr rewards!"

        if (player.toad.supertier[1].lt(1)) player.toad.supertier_des[1] = "At Toad pent 1, ^1.5 1st Toadette upgrade's effect."
        else if (player.toad.supertier[1].lt(4)) player.toad.supertier_des[1] = "At Toad pent 4, 100x 'Ictera jumping' base."
        else if (player.toad.supertier[1].lt(8)) player.toad.supertier_des[1] = "At Toad pent 8, remove Toad level 11 effect hardcap but softcapped."
        else if (player.toad.supertier[1].lt(69)) player.toad.supertier_des[1] = "At Toad pent 69, triple Normal Endless Clears gain."
        else if (player.toad.supertier[1].lt(501761)) player.toad.supertier_des[1] = "At Toad pent 501,761, delay 'Ikyota challenging' softcap^2 to 1e200."
        else if (player.toad.supertier[1].gte(501761)) player.toad.supertier_des[1] = "You have unlocked every Toad pent rewards!"

        if (player.toad.supertier[2].lt(1)) player.toad.supertier_des[2] = "At Toad hex 1, Easy Endless and future layers no longer resets Toad pent, hex... etc."
        else if (player.toad.supertier[2].lt(3)) player.toad.supertier_des[2] = "At Toad hex 3, unlock a new layer about the second difficulty of endless challenge."
        else if (player.toad.supertier[2].lt(20)) player.toad.supertier_des[2] = "At Toad hex 20, unlock Toad hept and more Toad tier layers."
        else if (player.toad.supertier[2].gte(20)) player.toad.supertier_des[2] = "You have unlocked every Toad hex rewards!"

        if (player.toad.supertier[3].lt(2)) player.toad.supertier_des[3] = "At Toad hept 2, you are able to spend Semi-Auto Courses to gain Condition Courses."
        else if (player.toad.supertier[3].lt(12)) player.toad.supertier_des[3] = "At Toad hept 12, square 'Ictera jumping' base."
        else if (player.toad.supertier[3].gte(12)) player.toad.supertier_des[3] = "You have unlocked every Toad hept rewards!"

        if (player.toad.tierlayer.lt(8)) player.toad.tierlayer_des = "At Toad oct 1, unlock Larry's minigame."
        else if (player.toad.tierlayer.lt(9)) player.toad.tierlayer_des = "At Toad enne 1, unlock Iggy's minigame."
        else if ((player.toad.tierlayer.lte(10) && player.toad.highest_tierlayer.lt(20)) || player.toad.tierlayer.lte(9)) player.toad.tierlayer_des = "At Toad dec 20, passive OSC generation is always activated."
        else if ((player.toad.tierlayer.lte(11) && player.toad.highest_tierlayer.lt(222)) || player.toad.tierlayer.lte(10)) player.toad.tierlayer_des = "At Toad endec 222, Toad level 3 reward softcap is slightly weaker."
        else if ((player.toad.tierlayer.lt(13))) player.toad.tierlayer_des = "At Toad triadec 1, unlock Versus Skills in MPVS layer."
        else if ((player.toad.tierlayer.lt(15))) player.toad.tierlayer_des = "At Toad pentadec 1, unlock Lag in MPVS layer."
        else if ((player.toad.tierlayer.lt(21))) player.toad.tierlayer_des = "At Toad meicos 1, unlock Batoko in MPVS layer and factor E for Versus Rating."
        else if ((player.toad.tierlayer.lt(30))) player.toad.tierlayer_des = "At Toad triacont 1, unlock Speedrun Course Layer."
        else if ((player.toad.tierlayer.lt(84))) player.toad.tierlayer_des = "At Toad tetraoctacont 1, TBD."

        // 等级奖励
        let Tl1base = new Decimal(2)
        if (player.toad.level.gte(25)) Tl1base = Tl1base.add(1) //25级奖励
        if (hasUpgrade('toadette', 24)) Tl1base = Tl1base.add(clickableEffect('toadette', 11))
        player.toad.level_rew[0] = Decimal.pow(Tl1base, player.toad.level.max(0)) //1级奖励
        player.toad.level_rew[1] = Decimal.pow(1e10, player.toad.level.max(0)) //3级奖励
        let Tl3softcapRoot = new Decimal(1.25)
        if (hasUpgrade('easy', 34)) Tl3softcapRoot = new Decimal(1.2)
        if (player.toad.supertier[0].gte(2434)) Tl3softcapRoot = new Decimal(1.165)
        if ((player.toad.tierlayer.gte(11) && player.toad.highest_tierlayer.gte(222)) || player.toad.tierlayer.gte(12)) Tl3softcapRoot = new Decimal(1.13)
        if (player.toad.level.gte(500)) player.toad.level_rew[1] = Decimal.pow(1e10, player.toad.level.max(500).sub(500).root(Tl3softcapRoot)).times("1e5000")  //3级奖励软上限
        player.toad.level_rew[2] = player.toad.points.max(1).root(5).min(decimalInfinity) //11级奖励      
        player.toad.level_rew[3] = player.luigi.points.max(1e10).log(1e10).pow(1.5).min(decimalInfinity) //66级奖励
        player.toad.level_rew[4] = player.toad.level.max(1).pow(2) //2600级奖励

        let Tt1base = new Decimal(2)
        let Tt7base = new Decimal(1)
        if (hasUpgrade('easy', 14)) Tt7base = Tt7base.times(1.5)
        if (hasUpgrade('toad', 41)) Tt1base = Tt1base.add(2)
        if (hasUpgrade('toadette', 25)) Tt1base = Tt1base.add(upgradeEffect('toadette', 25))
        if (player.toad.tier.gte(5)) player.toad.tier_rew[0] = Decimal.pow(Tt1base, player.toad.tier.max(0)) //5阶奖励
        if (player.toad.tier.gte(7)) player.toad.tier_rew[1] = player.toadette.points.max(5).log(5).pow(Tt7base) //7阶奖励
        if (hasUpgrade('toad', 41)) Tt1base = Tt1base.add(2)
        if (player.toad.level.gte(3)) player.hardcap = new Decimal("e1.798e308").pow(player.toad.level_rew[1])

        if (player.toad.supertier[0].gte(28)) player.toad.supertier_rew[0][0] = player.toad.supertier[0].add(1).max(1).pow(1.33)

        if (player.toad.supertier[1].gte(8)) player.toad.level_rew[2] = player.toad.points.max(1).root(10) //8五重阶奖励
        //自动化
        if ((player.toad.supertier[0].gte(3) && player.toad.tier.gte(2) || hasMilestone('easy', 1)) && getBuyableAmount('toad', 11).lte(player.toad.points.times(buyableEffect('toad', 102)).max(10).log(10).sub(1).root(1.28).floor().add(1))) setBuyableAmount('toad', 11, player.toad.points.times(buyableEffect('toad', 102)).max(10).log(10).sub(1).root(1.28).floor().add(1))
        else if (player.toad.supertier[0].gte(3) && getBuyableAmount('toad', 11).lte(player.toad.points.max(10).log(10).sub(1).root(1.28).floor().add(1))) setBuyableAmount('toad', 11, player.toad.points.max(10).log(10).sub(1).root(1.28).floor().add(1)) //3四重阶奖励 

        let cheap2 = new Decimal(0)
        let reduce2 = new Decimal(1)
        if (player.toad.level.gte(234)) reduce2 = new Decimal(0.75)
        if (hasUpgrade(this.layer, 31)) cheap2 = cheap2.add(upgradeEffect(this.layer, 31))
        if (hasMilestone('easy', 3) && getBuyableAmount('toad', 12).lte(player.toad.level.div(reduce2).add(cheap2).div(4).sub(1).root(1.1).times(0.75).round().add(1))) setBuyableAmount('toad', 12, player.toad.level.div(reduce2).add(cheap2).div(4).sub(1).root(1.1).times(0.75).round().add(1))
        if (hasMilestone('easy', 12) && getBuyableAmount('toad', 21).lte(player.toad.tier.div(10).sub(1).root(1.1).times(0.75).ceil())) setBuyableAmount('toad', 21, player.toad.tier.div(10).sub(1).root(1.1).times(0.75).ceil())

        let cheap3 = new Decimal(0)
        let reduce3 = new Decimal(1)
        if (hasUpgrade('easy', 42)) reduce3 = new Decimal(0.475)
        if (hasMilestone('normal', 6) && getBuyableAmount('toad', 22).lte(player.toad.supertier[0].div(reduce3).add(cheap3).add(7).div(12).sub(1).root(1.2).floor().add(1))) setBuyableAmount('toad', 22, player.toad.supertier[0].div(reduce3).add(cheap3).add(7).div(12).sub(1).root(1.2).floor().add(1))

        if (hasMilestone('expert', 8) && getBuyableAmount('toad', 31).lte(player.toad.supertier[1].max(0).add(11).div(18).sub(1).root(1.25).ceil())) setBuyableAmount('toad', 31, player.toad.supertier[1].max(0).add(11).div(18).sub(1).root(1.25).ceil())

        if (hasMilestone('expert', 10) && getBuyableAmount('toad', 32).lte(player.toad.supertier[2].div(23).floor())) setBuyableAmount('toad', 32, player.toad.supertier[2].div(23).floor())
        if (hasMilestone('easy', 6) && getBuyableAmount('toad', 101).lte(player.toad.points.max(2).log(2).root(1.4).floor().add(1))) setBuyableAmount('toad', 101, player.toad.points.max(2).log(2).root(1.4).floor().add(1))
        if (hasMilestone('easy', 6) && getBuyableAmount('toad', 102).lte(player.toad.points.div(1e10).max(3).log(3).root(1.78).floor().add(1))) setBuyableAmount('toad', 102, player.toad.points.div(1e10).max(3).log(3).root(1.78).floor().add(1))
        if (hasMilestone('easy', 6) && getBuyableAmount('toad', 103).lte(player.toad.points.div(1e76).max(100).log(100).root(1.9).floor().add(1))) setBuyableAmount('toad', 103, player.toad.points.div(1e76).max(100).log(100).root(1.9).floor().add(1))
        if (hasMilestone('easy', 10) && getBuyableAmount('toad', 111).lte(player.toad.awaken_power.max(5).log(5).root(1.64).floor().add(1))) setBuyableAmount('toad', 111, player.toad.awaken_power.max(5).log(5).root(1.64).floor().add(1))
        //觉醒力量
        let APgain = player.toad.points.div(1e165).max(0).root(14)
        if (player.toad.level.gte(66)) APgain = APgain.times(player.toad.level_rew[3])
        if (hasMilestone('toad', 6)) player.toad.awaken_power = player.toad.awaken_power.add(APgain.times(diff))
    },
    milestones: {
        0: {
            requirementDescription: "Get 1 Toad",
            effectDescription() { return `Keep Mario milestones on row 10 reset and ${f(1e10)}x real Mario cleared courses gain after exp. cal` },
            done() { return player.toad.points.gte(1) },
        },
        1: {
            requirementDescription: "Get 3 Toad",
            effectDescription: "Keep Luigi milestones on row 10 reset and bulk buy 50x 'Yodaka jumping'.",
            done() { return player.toad.points.gte(3) },
        },
        2: {
            requirementDescription: "Get 25 Toad",
            effectDescription: "Autobuy Mario upgrades.",
            done() { return player.toad.points.gte(25) },
        },
        3: {
            requirementDescription: "Get 99 Toad",
            effectDescription: "Autobuy Luigi upgrades.",
            done() { return player.toad.points.gte(99) },
        },
        4: {
            requirementDescription: "Get 199 Toad",
            effectDescription: "You can buy max Mario buyables and no longer spend the currency.",
            done() { return player.toad.points.gte(199) },
        },
        5: {
            requirementDescription: "Get 1 Awaken Power",
            effectDescription: "Unlock a new buyable for Awaken Power, 2nd Coin milestone iverpower effect is much stronger.",
            done() { return player.toad.awaken_power.gte(1) },
            unlocked() { return hasAchievement('achievements', 154) },
        },
        6: {
            requirementDescription() { return `Get ${f(1.79e308)} Awaken Power` },
            effectDescription: "Passive gain 100% Awaken Power every.",
            done() { return player.toad.awaken_power.gte("1.79e308") },
            unlocked() { return hasAchievement('achievements', 154) },
        },
        7: {
            requirementDescription() { return `Get ${f('1e50000')} Toad` },
            effectDescription: "Toad tetr no longer resets Toad, Toad level and Toad tier.",
            done() { return player.toad.points.gte("1e50000") },
            unlocked() { return hasAchievement('achievements', 154) },
        },
    },

    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `Mario cleared ` + formatWhole(player.mario.c_re) + ` courses (real)`],
        ["display-text", () => `Your best amount of Toad is ` + formatWhole(player.toad.best)],
        ["display-text", function () {
            if (player.toad.best.gte(1e36))
                return "Toad gain's softcap is at " + formatWhole(tmp.toad.softcap)
        }
        ],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">In Mario Maker 2, only blue Toad that you can control in Toads. They are citizens of Mushroom Kingdom.<br>(Oh where is the Captain Toad?)`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Toad layer resets row 9 layers`],
                    "milestones",
                ]
            },
            "Toad's Journey": {
                unlocked() { return hasUpgrade('toad', 13) },
                content: [
                    ["blank", "15px"],
                    ["buyables", [1, 2, 3, 4, 10]],
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #0047ff, #ffffff)',
                        'border-color': '#0047ff',
                        'color': 'black',
                    }
                },
            },
            "Rewards": {
                unlocked() { return hasUpgrade('toad', 13) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return "Cleared Courses hardcap is at " + format(player.hardcap)
                    }
                    ],
                    ["microtabs", "rewards"],
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #0047ff, #ffffff)',
                        'border-color': '#0047ff',
                        'color': 'black',
                    }
                },
            },
            "Awaken": {
                unlocked() { return hasAchievement('achievements', 154) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return "You have <h2 style='color: #ffca00; text-shadow: 0 0 10px #ffca00'>" + format(player.toad.awaken_power) + " </h2> Awaken Power."
                    },
                    ],
                    "clickables",
                    "blank",
                    ["buyables", [11, 12]]
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #ffca00, #ffd880)',
                        'border-color': '#ffca00',
                        'color': 'black',
                    }
                },
            },
        },
        rewards: {
            "Toad Level": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        if (player.toad.level.gte(1))
                            return "Toad level 1: Toad level boosts Toad gain. Currently: " + format(player.toad.level_rew[0]) + "x"
                    }
                    ],
                    ["display-text", function () {
                        let dis = ""
                        if (player.toad.level.gte(3))
                            dis = "Toad level 3: Toad level delays Cleared Courses hardcap.  Currently: ^" + format(player.toad.level_rew[1])
                        if (player.toad.level.gte(500)) dis = dis + " (softcapped)"
                        return dis
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.level.gte(6))
                            return "Toad level 6: 100x cheesed Luigi cleared courses gain"
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.level.gte(11))
                            return "Toad level 11: Toad boosts cheesed and normal Luigi cleared courses gain.  Currently: " + format(player.toad.level_rew[2]) + "x"
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.level.gte(25))
                            return "Toad level 25: +1 to Toad level 1 reward base."
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.level.gte(66))
                            return "Toad level 66: Luigi multiplies Awaken Power gain. Currently: " + format(player.toad.level_rew[3]) + "x"
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.level.gte(234))
                            return "Toad level 234: Toad tier cost is reduced by 0.75x."
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.level.gte(2600))
                            return "Toad level 2600: Toad level now boosts Easy Endless clears gain. Currently: " + format(player.toad.level_rew[4]) + "x"
                    }
                    ],
                ]
            },
            "Toad Tier": {
                unlocked() { return hasUpgrade('toad', 22) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        if (player.toad.tier.gte(1))
                            return "Toad tier 1: Unlock a buyable for Toad"
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.tier.gte(2))
                            return "Toad tier 2: Unlock another buyable"
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.tier.gte(4))
                            return "Toad tier 4: Unlock Toadette layer"
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.tier.gte(5))
                            return "Toad tier 5: Toad Tier boosts Toadette gain. Currently: " + format(player.toad.tier_rew[0]) + "x"
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.tier.gte(7))
                            return "Toad tier 7: Toadette increases 'Ictera jumping' base. Currently: +" + format(player.toad.tier_rew[1])
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.tier.gte(12))
                            return "Toad tier 12: Toad level no longer resets Toad."
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.tier.gte(34))
                            return "Toad tier 34: Unlock a new resource in Toadette layer."
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.tier.gte(238))
                            return "Toad tier 238: ^5 2nd coin upgrade's effect."
                    }
                    ],
                ]
            },
            "Toad Tetr": {
                unlocked() { return hasUpgrade('toad', 42) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        if (player.toad.supertier[0].gte(1))
                            return "Toad tetr 1: Unlock a new resource for Toad layer."
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.supertier[0].gte(2))
                            return "Toad tetr 2: Awaken Power no longer resets Toad tetr."
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.supertier[0].gte(3))
                            return "Toad tetr 3: Auto Toad level up."
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.supertier[0].gte(6))
                            return "Toad tetr 6: Unlock Easy Endless Challenge layer."
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.supertier[0].gte(28))
                            return "Toad tetr 28: Toadette Crown effect is boosted base on Toad tetr. Currently: " + format(player.toad.supertier_rew[0][0]) + "x"
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.supertier[0].gte(2434))
                            return "Toad tetr 2434: Toad level 3 effect's softcap is weaker again."
                    }
                    ],
                ]
            },
            "Toad Pent": {
                unlocked() { return hasUpgrade('toad', 54) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        if (player.toad.supertier[1].gte(1))
                            return "Toad pent 1: ^1.5 1st Toadette upgrade's effect."
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.supertier[1].gte(4))
                            return "Toad pent 4: 100x 'Ictera jumping' base."
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.supertier[1].gte(8))
                            return "Toad pent 8: Remove Toad level 11 effect hardcap but softcapped."
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.supertier[1].gte(69))
                            return "Toad pent 69: Triple Normal Endless Clears gain."
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.supertier[1].gte(501761))
                            return "Toad pent 501761: Delay 'Ikyota challenging' softcap^2 to 1e200."
                    }
                    ],
                ]
            },
            "Toad Hex": {
                unlocked() { return hasUpgrade('toadette', 44) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        if (player.toad.supertier[2].gte(1))
                            return "Toad hex 1: Easy Endless no longer resets Toad pent, hex... etc."
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.supertier[2].gte(3))
                            return "Toad hex 3: Unlock a new layer about the second difficulty of endless challenge."
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.supertier[2].gte(20))
                            return "Toad hex 20: Unlock Toad hept and more Toad tier layers."
                    }
                    ],
                ]
            },
            "Higher Toad Tier Layers": {
                unlocked() { return player.toad.supertier[2].gte(20) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        if (player.toad.supertier[3].gte(2))
                            return "Toad hept 2: Able to spend Semi-Auto Courses to gain Condition Courses."
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.supertier[3].gte(12))
                            return "Toad hept 12: Square 'Ictera jumping' base."
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.tierlayer.gte(8))
                            return "Toad oct 1: Unlock Larry's minigame."
                    }
                    ],
                    ["display-text", function () {
                        if (player.toad.tierlayer.gte(9))
                            return "Toad enne 1: Unlock Iggy's minigame."
                    }
                    ],
                    ["display-text", function () {
                        if ((player.toad.tierlayer.gte(10) && player.toad.highest_tierlayer.gte(20)) || player.toad.tierlayer.gte(11))
                            return "Toad dec 20: Passive OSC generation is always activated."
                    }
                    ],
                    ["display-text", function () {
                        if ((player.toad.tierlayer.gte(11) && player.toad.highest_tierlayer.gte(222)) || player.toad.tierlayer.gte(12))
                            return "Toad endec 222: Toad level 3 reward softcap is slightly weaker."
                    }
                    ],
                    ["display-text", function () {
                        if ((player.toad.tierlayer.gte(13)))
                            return "Toad triadec 1: Unlock Versus Skills in MPVS layer."
                    }
                    ],
                    ["display-text", function () {
                        if ((player.toad.tierlayer.gte(15)))
                            return "Toad pentadec 1: Unlock Lag in MPVS layer."
                    }
                    ],
                    ["display-text", function () {
                        if ((player.toad.tierlayer.gte(21)))
                            return "Toad meicos 1: Unlock Batoko in MPVS layer."
                    }
                    ],
                    ["display-text", function () {
                        if ((player.toad.tierlayer.gte(30)))
                            return "Toad triacont 1: Unlock Speedrun Course layer."
                    }
                    ],
                ]
            },
        }
    },
})
// 第二十三层：奇诺比珂
addLayer("toadette", {
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            crown: new Decimal(0),
            peachette: new Decimal(0),
            yu_ayasaki: false,
        }
    },

    color: "#ff4899",                       // The color for this layer, which affects many elements.
    resource: "Toadette",            // The name of this layer's main prestige resource.
    symbol: "Te",
    branches: ["luigi", "toad"],
    row: 9,                                 // The row this layer is on (0 is the first row).
    displayRow: 9,
    position: 1,

    baseResource: "Luigi",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.luigi.points },  // A function to return the current amount of baseResource.

    requires: new Decimal(1.71e20),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.1,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        if (hasUpgrade(this.layer, 12)) mult = mult.times(3)
        if (player.toad.tier.gte(5)) mult = mult.times(player.toad.tier_rew[0])
        if (hasUpgrade('toad', 43)) mult = mult.times(20)
        if (hasMilestone('toad', 5)) mult = mult.times(buyableEffect('toad', 111))
        if (hasUpgrade(this.layer, 21)) mult = mult.times(5)
        if (hasUpgrade(this.layer, 22)) mult = mult.times(upgradeEffect(this.layer, 22))
        if (hasMilestone('toadette', 2)) mult = mult.times(milestoneEffect('toadette', 2))
        if (hasUpgrade(this.layer, 31)) mult = mult.times(upgradeEffect(this.layer, 31))
        if (hasUpgrade(this.layer, 32)) mult = mult.times(upgradeEffect(this.layer, 32))
        if (hasUpgrade(this.layer, 33)) mult = mult.times(10)
        if (hasUpgrade('easy', 11)) mult = mult.times(1e15)
        if (hasUpgrade(this.layer, 45)) mult = mult.times("1e1000")
        return mult
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },

    layerShown() { return hasAchievement('achievements', 153) },          // Returns a bool for if this layer's node should be visible in the tree.

    doReset(resettingLayer) {
        if (layers[resettingLayer].row > layers[this.layer].row) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('easy', 1)) {
                kept.push("milestones")
            }
            if (hasMilestone('easy', 5)) {
                kept.push("upgrades")
            }
            layerDataReset(this.layer, kept)
        }
    },

    passiveGeneration() {
        if (hasMilestone('easy', 2)) return 10
    },

    hotkeys: [
        { key: "T", description: "Shift+T: Reset for Toadette", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],
    upgrades: {
        11: {
            title: "The cutest!",
            description: "Toadette delays Toad gain softcap.",
            cost: new Decimal(40),
            unlocked() { return true },
            effect() {
                let eff = player.toadette.points.max(1).pow(3.6).root(player.toadette.points.max(10).log(10).div(100).add(1).min(3.6))
                if (hasUpgrade(this.layer, 13)) eff = eff.pow(2)
                if (hasUpgrade(this.layer, 35)) eff = eff.pow(1.2)
                if (player.toad.supertier[1].gte(1)) eff = eff.pow(1.5)
                if (hasUpgrade('easy', 22)) eff = eff.pow(upgradeEffect('easy', 22))
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        12: {
            title: "Mushroom girl",
            description: "Triple Toadette gain.",
            cost: new Decimal(120),
            unlocked() { return hasUpgrade(this.layer, 11) },
        },
        13: {
            title: "Getting famous",
            description: "^2 1st Toadette upgrade's effect'.",
            cost: new Decimal(300),
            unlocked() { return hasUpgrade(this.layer, 12) },
        },
        14: {
            title: "Special pink!",
            description: "You can go beyond Mario cleared courses hardcap^2, but effect will be super nerfed.",
            cost: new Decimal(28888),
            unlocked() { return hasUpgrade(this.layer, 13) },
        },
        15: {
            title: "SM3DW Toadette",
            description: "Unlock another Toad buyable.",
            cost: new Decimal(142857),
            unlocked() { return hasUpgrade(this.layer, 14) },
        },
        21: {
            title: "Yee- Hah- Hoo-",
            description: "5x Toadette again.",
            cost: new Decimal(5e13),
            unlocked() { return hasUpgrade(this.layer, 15) },
        },
        22: {
            title: "The only special mushroom",
            description: "Awaken Power boosts Toadette again but weaker than 'Toad tickspeed'.",
            cost: new Decimal(6e18),
            unlocked() { return hasUpgrade(this.layer, 21) },
            effect() {
                let eff = Decimal.pow(10, player.toad.awaken_power.max(1).log(10).pow(0.75).div(2.5))
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        23: {
            title: "Need more Toadette",
            description: "Unlock a new subtab, to display reward of Toad tier 34.",
            cost: new Decimal(2e49),
            unlocked() { return hasUpgrade(this.layer, 22) },
        },
        24: {
            title: "Toadette's showtime!",
            description: "Toadette's Crown also affacts 1st Toad level reward base.",
            currencyDisplayName: "Toadette's Crowns",
            currencyInternalName: "crown",
            currencyLayer: "toadette",
            cost: new Decimal(5),
            unlocked() { return hasUpgrade(this.layer, 23) },
        },
        25: {
            title: "Disappear in 3-player VS",
            description: "Toad tetr increases Toad tier 5 reward base.",
            cost: new Decimal(1e54),
            unlocked() { return hasUpgrade(this.layer, 24) },
            effect() {
                let eff = player.toad.supertier[0].div(5).max(0)
                return eff
            },
            effectDisplay() { return "+" + format(upgradeEffect(this.layer, this.id)) },
        },
        31: {
            title: "Toadette cheesed a course",
            description: "Cheesed Luigi cleared courses boosts Toadette gain.",
            cost: new Decimal(1e57),
            unlocked() { return hasUpgrade(this.layer, 25) },
            effect() {
                let eff = player.luigi.cheesed.max(10).log(10).pow(3)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        32: {
            title: "Toadette imagines a course",
            description: "Imaginary Mario cleared courses boosts Toadette gain.",
            cost: new Decimal(1e68),
            unlocked() { return hasUpgrade(this.layer, 31) },
            effect() {
                let eff = player.mario.c_im.max(10).log(10).pow(3)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        33: {
            title: "You got a star! (Mario Party Superstars)",
            description: "10x Toadette gain.",
            cost: new Decimal(1e80),
            unlocked() { return hasUpgrade(this.layer, 32) },
        },
        34: {
            title: "You got a moon! (Super Mario Odyssey)",
            description: "Unlock a new resource in this layer.",
            cost: new Decimal(3e88),
            unlocked() { return hasUpgrade(this.layer, 33) },
            effect() {
                let eff = Decimal.pow(65, player.toadette.peachette.max(0))
                if (hasUpgrade('toad', 62)) eff = eff.pow(1.5)
                if (hasUpgrade('toadette', 51)) eff = eff.pow(2)
                if (hasUpgrade('easy', 41)) eff = eff.pow(2)
                return eff
            },
        },
        35: {
            title: "Captain Toad: Treasure Tracker",
            description: "^1.2 1st Toadette upgrade's effect.",
            cost: new Decimal(1e95),
            unlocked() { return hasUpgrade(this.layer, 34) },
        },
        41: {
            title: "Traveller Toadette",
            description: "Toad boosts itself.",
            cost: new Decimal(1e100),
            unlocked() { return hasUpgrade(this.layer, 35) },
            effect() {
                let eff = player.toad.points.max(1).root(20)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        42: {
            title: "Only Toadette can beat this",
            description: "Weaken Toad's softcap again.",
            cost: new Decimal(1e192),
            unlocked() { return hasUpgrade(this.layer, 41) },
        },
        43: {
            title: "More pixels",
            description: "Multiply Easy Endless Clears gain based on Toad tetr and pent.",
            cost: new Decimal('3e418'),
            unlocked() { return hasUpgrade(this.layer, 42) },
            effect() {
                let eff = player.toad.supertier[0].add(1).pow(2).times(player.toad.supertier[1].add(1).pow(5))
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        44: {
            title: "20 coins to buy a star",
            description: "Unlock Toad Hex.",
            cost: new Decimal("1e4250"),
            unlocked() { return hasUpgrade(this.layer, 43) },
        },
        45: {
            title: "Half price to buy a star",
            description() { return `${f('1e1000')}x Toadette gain.` },
            cost: new Decimal("1e5421"),
            unlocked() { return hasUpgrade(this.layer, 44) },
        },
        51: {
            title: "Mushroom Kingdom idol",
            description: "Square Peachette effect.",
            cost: new Decimal("1e6795"),
            unlocked() { return hasUpgrade(this.layer, 45) },
        },
        // Look in the upgrades docs to see what goes here!
    },
    milestones: {
        0: {
            requirementDescription: "Get 1 Toadette",
            effectDescription: "Autobuy Mario buyables.",
            done() { return player.toadette.points.gte(1) },
        },
        1: {
            requirementDescription() { return `Get ${f(3.45e9)} Toadette` },
            effectDescription: "Autobuy Luigi buyables.",
            done() { return player.toadette.points.gte(3.45e9) },
        },
        2: {
            requirementDescription: "Complete 'Piranha' 100 times",
            effect() { return new Decimal(challengeCompletions('boomerang_flower', 11)).max(1).pow(2) },
            effectDescription() { return "Multiply Toad and Toadette gain based on 'Piranhas' completions. <br>Currently: " + format(milestoneEffect(this.layer, 2)) + "x" },
            done() { return challengeCompletions('boomerang_flower', 11) >= 100 },
        },
        3: {
            requirementDescription() { return `Get ${f(1.23e77)} Toadette` },
            effectDescription: "Keep Mario and Luigi upgrades on row 10 reset.",
            done() { return player.toadette.points.gte(1.23e77) },
        },
        4: {
            requirementDescription: "Peachette level 10",
            effectDescription: "Weaken 2nd Coin upgrade's softcap.",
            done() { return player.toadette.peachette.gte(10) },
        },
    },
    clickables: {
        11: {
            title: "Crowns!",
            display() {
                let mult = new Decimal(1)
                if (hasUpgrade(this.layer, 34)) mult = mult.times(upgradeEffect(this.layer, 34))
                let gain = player.toadette.points.div(1e50).max(0).root(3.678).times(mult)
                gain = gain.floor()
                let next = Decimal.pow(gain.add(1).div(mult), 3.678).times(1e50)
                return "Reset Toadette for <b>" + formatWhole(gain) + "</b> Toadette's Crowns <br>Next Toadette's Crown: " + format(next) + " Toadette<br>"
            },
            canClick() { return player.toadette.points.gte(1e50) },
            onClick() {
                let mult = new Decimal(1)
                if (hasUpgrade(this.layer, 34)) mult = mult.times(upgradeEffect(this.layer, 34))
                let gain = player.toadette.points.div(1e50).max(0).root(3.678).times(mult)
                gain = gain.floor()
                player.toadette.points = decimalZero
                player.toadette.crown = player.toadette.crown.add(gain)
            },
            unlocked() { return hasAchievement('achievements', 154) },
            effect() {
                let eff = player.toadette.crown.add(10).max(10).log(10).pow(1.25).sub(1).times(3)
                if (player.toad.supertier[0].gte(28)) eff = eff.times(player.toad.supertier_rew[0][0])
                if (hasUpgrade('easy', 41)) eff = eff.pow(2)
                return eff
            },
            style() {
                dis = { "width": "180px" }
                return dis
            },
        },
        21: {
            title() {
                let t = ""
                if (player.toadette.yu_ayasaki) t = "Secret"
                return t
            },
            display() {
                let d = ""
                if (player.toadette.yu_ayasaki) d = "You found a secret!<br>Yu Ayasaki!"
                return d
            },
            canClick() { return true },
            onClick() {
                player.toadette.yu_ayasaki = true
            },
            unlocked() { return true },
            style() {
                if (player.toadette.yu_ayasaki == false) dis = { "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)" }
                else dis = {
                    "background-color": "rgb(0,194,199)",
                }
                return dis
            },
        },
    },
    buyables: {
        11: {
            title: "Toadette's Transfiguration",
            cost(x) { return new Decimal(20).pow(Decimal.pow(x, 1.44)).times(1e12) },
            display() {
                let display = ` Toadette uses her crown, now she becomes Peachette! <br>
                Peachette level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Cost: ${format(this.cost())} Toadette's Crowns`
                return display
            },
            canAfford() { return player[this.layer].crown.gte(this.cost()) },
            buyMax() { return setBuyableAmount('toadette', 11, player.toadette.crown.div(1e12).max(20).log(20).root(1.44).floor().add(1)) },
            canBuyMax() { return hasMilestone('easy', 10) },
            buy() {
                player[this.layer].crown = player[this.layer].crown.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            unlocked() { return hasUpgrade('toadette', 34) },

        },
    },
    update(diff) {
        let tick = new Decimal(0.05)
        if (hasUpgrade('toadette', 34)) player.toadette.peachette = getBuyableAmount('toadette', 11)

        let mult = new Decimal(1)
        if (hasUpgrade(this.layer, 34)) mult = mult.times(upgradeEffect(this.layer, 34))
        let gain = player.toadette.points.div(1e50).max(0).root(3.678).times(mult)
        if (hasMilestone('easy', 7)) player.toadette.crown = player.toadette.crown.add(gain.times(diff))

        if (hasMilestone('normal', 0)) setBuyableAmount('toadette', 11, player.toadette.crown.div(1e12).max(20).log(20).root(1.44).floor().add(1))
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + formatWhole(player.luigi.points) + ` Luigi`],
        ["display-text", () => `Your best amount of Toadette is ` + formatWhole(player.toadette.best)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Toadette is Captain Toad's sister, pink head with white spot and pink mushroom braids are her symbols. Also, in Mario Maker 2 story mode, she is a chief!`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "Toadette's Journey": {
                unlocked() { return hasUpgrade('toadette', 23) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        if (player.toad.tier.gte(34))
                            return "You have <h2 style='color: #ff4899; text-shadow: 0 0 10px #ff4899'>" + formatWhole(player.toadette.crown) + " </h2> Toadette's Crowns, increasing 'Icpeta jumping' base by <h2 style='color: #ff4899; text-shadow: 0 0 10px #ff4899'>+" + format(clickableEffect('toadette', 11)) + ""
                    }
                    ],
                    ["display-text", function () {
                        if (hasUpgrade('toadette', 34))
                            return "Your Peachette level is <h2 style='color: #ff4899; text-shadow: 0 0 10px #ff4899'>" + formatWhole(player.toadette.peachette) + "</h2>, multipling Toadette's Crown gain by <h2 style='color: #ff4899; text-shadow: 0 0 10px #ff4899'>" + format(upgradeEffect('toadette', 34)) + "x"
                    }
                    ],
                    ["clickables", [1]],
                    "blank",
                    "buyables",
                    ["blank", "81900px"],
                    ["microtabs", "secret"],
                    ["blank", "41700px"],
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #ff4899, #ffffff)',
                        'border-color': '#ff4899',
                        'color': 'black',
                    }
                },
            },
        },
        secret: {
            "Secret": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["clickables", [2]],
                    ["display-image", function () {
                        if (player.toadette.yu_ayasaki) return "resources/69695.png"
                    }]
                ]
            },
        },
    },
})
// 第二十四层：简单耐力挑战
function easyEndlessRandom() {
    return player.easy.random_theme = new Decimal(Math.random()).times(10).floor().add(1),
        player.easy.random_style = new Decimal(Math.random()).times(5).floor().add(1)
}
addLayer("easy", {
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        },
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            life: new Decimal(5),
            free_c: new Decimal(0),
            no_dmg: new Decimal(0),
            no_dmg_running: false,
            random_theme: new Decimal(0),
            random_style: new Decimal(0),
            no_dmg_mult: new Decimal(1),
        }
    },

    color: "#2DBBA4",                       // The color for this layer, which affects many elements.
    resource: "Easy Endless Clears",            // The name of this layer's main prestige resource.
    row: 10,                                 // The row this layer is on (0 is the first row).
    symbol: "Eas",

    baseResource: "OoMs of cleared courses",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.lgpoints },  // A function to return the current amount of baseResource.

    requires: new Decimal("1e6450"),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.0025,                          // "normal" prestige gain is (currency^exponent).

    canReset() {
        return player.toad.points.gte("1e5250") && player.points.gte("e1e6450")
    },

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        if (hasUpgrade('toadette', 43)) mult = mult.times(upgradeEffect('toadette', 43))
        if (hasUpgrade(this.layer, 15)) mult = mult.times(clickableEffect(this.layer, 11).times(30))
        if (player.toad.level.gte(2600)) mult = mult.times(player.toad.level_rew[4])
        return mult
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },

    layerShown() { return hasAchievement('achievements', 171) },          // Returns a bool for if this layer's node should be visible in the tree.

    onPrestige() {
        let gain = tmp.easy.resetGain.max(10).log(10).floor()
        if (hasUpgrade('easy', 33)) gain = gain.times(tmp.toad.buyables[103].effectII)
        if (hasUpgrade('easy', 35)) gain = gain.times(buyableEffect('easy', 11))
        if (hasUpgrade('normal', 11)) gain = gain.times(upgradeEffect('normal', 11))
        if (hasUpgrade('easy', 31))
            player[this.layer].free_c = player[this.layer].free_c.add(gain)
    },
    doReset(resettingLayer) {
        if (layers[resettingLayer].row > layers[this.layer].row) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('normal', 0)) {
                kept.push("milestones")
            }
            if (hasMilestone('normal', 2)) {
                kept.push("upgrades")
            }
            if (hasMilestone('expert', 3)) {
                kept.push("no_dmg_running")
                kept.push("random_theme")
                kept.push("random_style")
            }
            layerDataReset(this.layer, kept)
        }
    },
    passiveGeneration() { return hasMilestone('normal', 5) },
    hotkeys: [
        { key: "e", description: "E: Reset for Easy Endless", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],
    upgrades: {
        11: {
            title: "The new journey",
            description() { return `${f(1e15)}x Toadette gain.` },
            cost: new Decimal(8),
            unlocked() { return true },
        },
        12: {
            title: "Record and rank",
            description: "Easy Endless record increases 'Toad tickspeed' base.",
            cost: new Decimal(4),
            unlocked() { return hasUpgrade(this.layer, 11) },
            effect() {
                let hardcap = new Decimal(100)
                if (hasUpgrade('easy', 24)) hardcap = new Decimal(1000)
                let eff = player.easy.best.add(1).max(1).log(2).min(hardcap)
                return eff
            },
            effectDisplay() { return "+" + format(upgradeEffect(this.layer, this.id)) },
        },
        13: {
            title: "For medals",
            description: "Easy Endless Clears delays Toad's softcap.",
            cost: new Decimal(72535),
            unlocked() { return hasUpgrade(this.layer, 12) },
            effect() {
                let eff = Decimal.pow(10, player.easy.points.max(1).log(10).add(10).pow(2))
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        14: {
            title: "Easy gold ribbon",
            description: "Toad tier 7 reward now has a better formula.",
            cost: new Decimal(222222),
            unlocked() { return hasUpgrade(this.layer, 13) },
        },
        15: {
            title: "Special challenge",
            description: "Unlock a new subtab, 30x Easy Endless Clears gain.",
            cost: new Decimal(1e10),
            unlocked() { return hasUpgrade(this.layer, 14) },
        },
        21: {
            title: "Speedrunning",
            description: "No damage easy clears boosts 'Ictera jumping' base.",
            cost: new Decimal(2e15),
            unlocked() { return hasUpgrade(this.layer, 15) },
            effect() {
                let eff = player.easy.no_dmg.max(1).root(2.5)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        22: {
            title: "Speedrunner",
            description: "Peachette level powers 1st Toadette upgrade's effect. (hardcap at ^3)",
            cost: new Decimal(8e26),
            unlocked() { return hasUpgrade(this.layer, 21) },
            effect() {
                let cap = new Decimal(3)
                if (hasUpgrade(this.layer, 32)) cap = new Decimal(10)
                let eff = player.toadette.peachette.max(0).div(200).add(1).pow(2).min(cap)
                return eff
            },
            effectDisplay() { return "^" + format(upgradeEffect(this.layer, this.id)) },
        },
        23: {
            title: "Toad's speedrun",
            description: "Unlock 26th Toad upgrade.",
            cost: new Decimal(1e28),
            unlocked() { return hasUpgrade(this.layer, 22) },
        },
        24: {
            title: "Safety running",
            description: "Delay 2nd Easy Endless upgrade hardcap to 1000.",
            cost: new Decimal(1e39),
            unlocked() { return hasUpgrade(this.layer, 23) },
        },
        25: {
            title: "Farming lives",
            description: "Fire Flower effect ^1000.",
            cost: new Decimal(1e80),
            unlocked() { return hasUpgrade(this.layer, 24) },
        },
        31: {
            title: "Is not necessary",
            description: "Unlock a new subtab.",
            cost: new Decimal(1e98),
            unlocked() { return hasUpgrade(this.layer, 25) },
            effect() {
                let ex = player.easy.free_c.max(1e100).log(1e100).root(1.5)
                let eff = player.easy.free_c.add(1).max(1).root(3).root(ex)
                return eff
            },
        },
        32: {
            title: "Eternal grinding",
            description: "7th Easy Endless upgrade's effect hardcap is delayed to ^10.",
            cost: new Decimal(1e114),
            unlocked() { return hasUpgrade(this.layer, 31) },
        },
        33: {
            title: "00:01.301",
            description: "Unlock 2nd effect of 'Ikecta jumping'.",
            cost: new Decimal(1e119),
            unlocked() { return hasUpgrade(this.layer, 32) },
        },
        34: {
            title: "00:01.317",
            description: "Weaken Toad level 3 effect softcap.",
            cost: new Decimal(1e125),
            unlocked() { return hasUpgrade(this.layer, 33) },
        },
        35: {
            title: "Lots of free clear",
            description: "Unlock a buyable in this layer in Free Clears subtab.",
            cost: new Decimal(1e165),
            unlocked() { return hasUpgrade(this.layer, 34) },
        },
        41: {
            title: "That's empty",
            description: "Square Toadette's Crown and Peachette effects.",
            cost: new Decimal(1e175),
            unlocked() { return hasUpgrade(this.layer, 35) },
        },
        42: {
            title: "Difficulty up",
            description: "Reduce Toad pent cost by 0.475x",
            cost: new Decimal("1e623"),
            unlocked() { return hasUpgrade(this.layer, 41) },
        },
        43: {
            title: "Easy endless leader",
            description: "Unlock a new buyable.",
            currencyDisplayName: "Free Clears",
            currencyInternalName: "free_c",
            currencyLayer: "easy",
            cost: new Decimal(1e40),
            unlocked() { return hasUpgrade(this.layer, 42) },
        },
        44: {
            title: "Leading forever",
            description: "Every 2 'Ikyota challenging' levels provides 1 free level of 'Iczeta challenging'.",
            cost: new Decimal("1e1625"),
            unlocked() { return hasUpgrade(this.layer, 43) },
            effect() {
                let eff = getBuyableAmount('easy', 12).max(0).div(2).floor()
                return eff
            },
            effectDisplay() { return "+" + formatWhole(upgradeEffect(this.layer, this.id)) },
        },
        45: {
            title: "The display limit",
            description: "5x One Shot Clears gain.",
            cost: new Decimal("1e1725"),
            unlocked() { return hasUpgrade(this.layer, 44) },
        },
        // Look in the upgrades docs to see what goes here!
    },
    milestones: {
        0: {
            requirementDescription: "1 Easy Endless Clear",
            effectDescription: "20x Mario cleared courses and cheesed Luigi cleared courses gain. Keep Toad milestones on row 11 reset.",
            done() { return player.easy.points.gte(1) },
        },
        1: {
            requirementDescription: "2 Easy Endless Clears",
            effectDescription: "Keep Toadette milestones on row 11 reset. You can always autobuy Toad level and you can buy max Toad tier and buyables. (Including Toad tickspeed) Toad tier no longer reset Toad level.",
            done() { return player.easy.points.gte(2) },
        },
        2: {
            requirementDescription: "3 Easy Endless Clears",
            effectDescription: "Passive gain 1000% Toadette every second.",
            done() { return player.easy.points.gte(3) },
        },
        3: {
            requirementDescription: "4 Easy Endless Clears",
            effectDescription: "Autobuy Toad tier.",
            done() { return player.easy.points.gte(4) },
        },
        4: {
            requirementDescription: "5 Easy Endless Clears",
            effectDescription: "+2.5 'Toad tickspeed' base.",
            done() { return player.easy.points.gte(5) },
        },
        5: {
            requirementDescription: "6 Easy Endless Clears",
            effectDescription: "Keep Toad and Toadette upgrades on row 11 reset.",
            done() { return player.easy.points.gte(6) },
        },
        6: {
            requirementDescription() { return `${f(37000)} Easy Endless Clears` },
            effectDescription: "Autobuy Toad buyables except 'Toad tickspeed'.",
            done() { return player.easy.points.gte(37000) },
        },
        7: {
            requirementDescription() { return `${f(1e11)} Easy Endless Clears` },
            effectDescription: "Passive gain 100% Toadette's crown every second.",
            done() { return player.easy.points.gte(1e11) },
        },
        8: {
            requirementDescription: "30 Easy Endless Clears without taking damage",
            effectDescription: "+100 to 11th Toad upgrade's hardcap.",
            done() { return player.easy.no_dmg.gte(30) },
        },
        9: {
            requirementDescription() { return `${f(1000)} Easy Endless Clears without taking damage` },
            effectDescription: "Protect 50% of No Damage easy clears while picking an incorrect goal.",
            done() { return player.easy.no_dmg.gte(1000) },
        },
        10: {
            requirementDescription() { return `${f(8e80)} Easy Endless Clears` },
            effectDescription: "Autobuy 'Toad tickspeed' and you can buy max Peachette levels.",
            done() { return player.easy.points.gte(8e80) },
        },
        11: {
            requirementDescription() { return `${f(1e130)} Easy Endless Clears` },
            effectDescription() { return `^${f(1000)} Cleared Courses gain.` },
            done() { return player.easy.points.gte(1e130) },
        },
        12: {
            requirementDescription() { return `${f(2.22e222)} Easy Endless Clears` },
            effectDescription: "Auto Toad tetr up.",
            done() { return player.easy.points.gte(2.22e222) },
        },
        13: {
            requirementDescription() { return `${f(1.79e308)} Easy Endless Clears` },
            effectDescription() { return `^${f(1000000)} Cleared Courses gain.` },
            done() { return player.easy.points.gte("1.79e308") },
        },
        14: {
            requirementDescription() { return `${f('1e1600')} Easy Endless Clears` },
            effectDescription: "Toad pent resets nothing.",
            done() { return player.easy.points.gte("1e1600") },
            unlocked() { return hasAchievement('achievements', 174) },
        },
        15: {
            requirementDescription() { return `${f('3.33e3333')} Easy Endless Clears` },
            effect() { return player.toad.level.max(10).log(10) },
            effectDescription() { return "Power Normal Endless Clears effect based on Toad level.<br>Currently: ^" + format(milestoneEffect(this.layer, 15)) },
            done() { return player.easy.points.gte("3.33e3333") },
            unlocked() { return hasAchievement('achievements', 174) },
        },
    },
    clickables: {
        11: {
            title: "Spend 3e11 Easy Endless Clears to start a new No damage easy run",
            display() {
                return ""
            },
            canClick() { return player.easy.points.gte(3e11) && player.easy.no_dmg_running == false },
            onClick() {
                return player.easy.points = player.easy.points.sub(3e11),
                    player.easy.no_dmg_running = true,
                    easyEndlessRandom()
            },
            unlocked() { return hasUpgrade('easy', 15) },
            effect() {
                let eff = Decimal.factorial(player.easy.no_dmg.add(1.7).max(1.7).log(1.7))
                return eff
            },
            style: {
                'border-radius': "0%",
                'width': "500px",
                'min-height': '20px',
            },
        },
        21: {
            title: "Overworld",
            display() {
                return ""
            },
            canClick() { return false },
            unlocked() { return hasUpgrade('easy', 15) },
            style() {
                if (player.easy.no_dmg_running && player.easy.random_theme.eq(1))
                    return { 'background-color': "#58cd2a" }
            },
        },
        22: {
            title: "Underground",
            display() {
                return ""
            },
            canClick() { return false },
            unlocked() { return hasUpgrade('easy', 15) },
            style() {
                if (player.easy.no_dmg_running && player.easy.random_theme.eq(2))
                    return { 'background-color': "#317b86" }
            },
        },
        23: {
            title: "Underwater",
            display() {
                return ""
            },
            canClick() { return false },
            unlocked() { return hasUpgrade('easy', 15) },
            style() {
                if (player.easy.no_dmg_running && player.easy.random_theme.eq(3))
                    return { 'background-color': "#4545ff" }
            },
        },
        24: {
            title: "Desert",
            display() {
                return ""
            },
            canClick() { return false },
            unlocked() { return hasUpgrade('easy', 15) },
            style() {
                if (player.easy.no_dmg_running && player.easy.random_theme.eq(4))
                    return { 'background-color': "#ffd191" }
            },
        },
        25: {
            title: "Snow",
            display() {
                return ""
            },
            canClick() { return false },
            unlocked() { return hasUpgrade('easy', 15) },
            style() {
                if (player.easy.no_dmg_running && player.easy.random_theme.eq(5))
                    return { 'background-color': "#7dbaff" }
            },
        },
        31: {
            title: "Athletic",
            display() {
                return ""
            },
            canClick() { return false },
            unlocked() { return hasUpgrade('easy', 15) },
            style() {
                if (player.easy.no_dmg_running && player.easy.random_theme.eq(6))
                    return { 'background-color': "#748bff" }
            },
        },
        32: {
            title: "Jungle",
            display() {
                return ""
            },
            canClick() { return false },
            unlocked() { return hasUpgrade('easy', 15) },
            style() {
                if (player.easy.no_dmg_running && player.easy.random_theme.eq(7))
                    return { 'background-color': "#156137" }
            },
        },
        33: {
            title: "Ghost House",
            display() {
                return ""
            },
            canClick() { return false },
            unlocked() { return hasUpgrade('easy', 15) },
            style() {
                if (player.easy.no_dmg_running && player.easy.random_theme.eq(8))
                    return { 'background-color': "#3e2f44" }
            },
        },
        34: {
            title: "Airship",
            display() {
                return ""
            },
            canClick() { return false },
            unlocked() { return hasUpgrade('easy', 15) },
            style() {
                if (player.easy.no_dmg_running && player.easy.random_theme.eq(9))
                    return { 'background-color': "#ce8e23" }
            },
        },
        35: {
            title: "Castle",
            display() {
                return ""
            },
            canClick() { return false },
            unlocked() { return hasUpgrade('easy', 15) },
            style() {
                if (player.easy.no_dmg_running && player.easy.random_theme.eq(10))
                    return { 'background-color': "#432b29" }
            },
        },
        41: {
            title: "SMB1",
            display() {
                return ""
            },
            canClick() { return false },
            unlocked() { return hasUpgrade('easy', 15) },
            style() {
                if (player.easy.no_dmg_running && player.easy.random_style.eq(1))
                    return { 'background-color': "#e55807" }
            },
        },
        42: {
            title: "SMB3",
            display() {
                return ""
            },
            canClick() { return false },
            unlocked() { return hasUpgrade('easy', 15) },
            style() {
                if (player.easy.no_dmg_running && player.easy.random_style.eq(2))
                    return { 'background-color': "#ff9d1e" }
            },
        },
        43: {
            title: "SMW",
            display() {
                return ""
            },
            canClick() { return false },
            unlocked() { return hasUpgrade('easy', 15) },
            style() {
                if (player.easy.no_dmg_running && player.easy.random_style.eq(3))
                    return { 'background-color': "#88ffff" }
            },
        },
        44: {
            title: "NSMBU",
            display() {
                return ""
            },
            canClick() { return false },
            unlocked() { return hasUpgrade('easy', 15) },
            style() {
                if (player.easy.no_dmg_running && player.easy.random_style.eq(4))
                    return { 'background-color': "#ffdd00" }
            },
        },
        45: {
            title: "SM3DW",
            display() {
                return ""
            },
            canClick() { return false },
            unlocked() { return hasUpgrade('easy', 15) },
            style() {
                if (player.easy.no_dmg_running && player.easy.random_style.eq(5))
                    return { 'background-color': "#059eff" }
            },
        },
        51: {
            title: "Flag Goal",
            display() {
                return ""
            },
            canClick() { return player.easy.no_dmg_running },
            onClick() {
                let protect = decimalZero
                if (hasMilestone(this.layer, 9)) protect = player.easy.no_dmg.div(2).floor()
                if (hasUpgrade('toad', 64)) protect = player.easy.no_dmg
                if (player.easy.random_theme.gte(1) && player.easy.random_theme.lte(9) && (player.easy.random_style.eq(1) || player.easy.random_style.eq(4)) || player.easy.random_style.eq(5))
                    return player.easy.no_dmg = player.easy.no_dmg.add(player.easy.no_dmg_mult), easyEndlessRandom()
                else return player.easy.no_dmg = protect, easyEndlessRandom()
            },
            unlocked() { return hasUpgrade('easy', 15) },
            style() {
                return { 'background-color': "#ffdb27" }
            },
        },
        52: {
            title: `Square Goal`,
            display() {
                return ""
            },
            canClick() { return player.easy.no_dmg_running },
            onClick() {
                let protect = decimalZero
                if (hasMilestone(this.layer, 9)) protect = player.easy.no_dmg.div(2).floor()
                if (hasUpgrade('toad', 64)) protect = player.easy.no_dmg
                if (player.easy.random_theme.gte(1) && player.easy.random_theme.lte(9) && player.easy.random_style.eq(2))
                    return player.easy.no_dmg = player.easy.no_dmg.add(player.easy.no_dmg_mult), easyEndlessRandom()
                else return player.easy.no_dmg = protect, easyEndlessRandom()
            },
            unlocked() { return hasUpgrade('easy', 15) },
            style() {
                return {
                    'background-color': "#070707",
                    'color': 'white',
                }
            },
        },
        53: {
            title: "Pole Goal",
            display() {
                return ""
            },
            canClick() { return player.easy.no_dmg_running },
            onClick() {
                let protect = decimalZero
                if (hasMilestone(this.layer, 9)) protect = player.easy.no_dmg.div(2).floor()
                if (hasUpgrade('toad', 64)) protect = player.easy.no_dmg
                if (player.easy.random_theme.gte(1) && player.easy.random_theme.lte(9) && player.easy.random_style.eq(3))
                    return player.easy.no_dmg = player.easy.no_dmg.add(player.easy.no_dmg_mult), easyEndlessRandom()
                else return player.easy.no_dmg = protect, easyEndlessRandom()
            },
            unlocked() { return hasUpgrade('easy', 15) },
            style() {
                return { 'background-color': "#4a4f95" }
            },
        },
        54: {
            title: "Axe Goal",
            display() {
                return ""
            },
            canClick() { return player.easy.no_dmg_running },
            onClick() {
                let protect = decimalZero
                if (hasMilestone(this.layer, 9)) protect = player.easy.no_dmg.div(2).floor()
                if (hasUpgrade('toad', 64)) protect = player.easy.no_dmg
                if (player.easy.random_theme.eq(10) && player.easy.random_style.gte(1) && player.easy.random_style.lte(4))
                    return player.easy.no_dmg = player.easy.no_dmg.add(player.easy.no_dmg_mult), easyEndlessRandom()
                else return player.easy.no_dmg = protect, easyEndlessRandom()
            },
            unlocked() { return hasUpgrade('easy', 15) },
            style() {
                return { 'background-color': "#a97d41" }
            },
        },
    },
    buyables: {
        11: {
            title: "Iczeta challenging",
            cost(x) { return new Decimal(10).pow(Decimal.pow(x, 1.35)) },
            display() {
                let free = new Decimal(0)
                if (hasUpgrade('normal', 13)) free = free.add(upgradeEffect('normal', 13))
                if (hasUpgrade('easy', 44)) free = free.add(upgradeEffect('easy', 44))
                let freedis = ""
                if (hasUpgrade('normal', 13) || hasUpgrade('easy', 44)) freedis = "+" + formatWhole(free)
                let display = ` Multiply Free Clears by lg(FC)^0.5x per every level. <br>
                base: ${format(player.easy.free_c.max(10).log(10).root(2))}<br>
                level: ${formatWhole(player[this.layer].buyables[this.id])}${freedis}<br>
                Effect: ${format(this.effect())}x<br>
                Cost: ${format(this.cost())} Free Clears`
                return display
            },
            canAfford() { return player[this.layer].free_c.gte(this.cost()) },
            buyMax() { return setBuyableAmount('easy', 11, player.easy.free_c.max(10).log(10).root(1.35).floor().add(1)) },
            canBuyMax() { return false },
            buy() {
                player[this.layer].free_c = player[this.layer].free_c.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effect(x) {
                let free = new Decimal(0)
                if (hasUpgrade('normal', 13)) free = free.add(upgradeEffect('normal', 13))
                if (hasUpgrade('easy', 44)) free = free.add(upgradeEffect('easy', 44))
                let base = player.easy.free_c.max(10).log(10).root(2)
                let effect = base.pow(x.add(free))
                return effect
            },
            unlocked() { return hasUpgrade('easy', 35) },

        },
        12: {
            title: "Ikyota challenging",
            cost(x) { return new Decimal(256).pow(Decimal.pow(x, 1.44)).times(1e20) },
            display() {
                let free = new Decimal(0)
                let freedis = ""
                if (false) freedis = "+" + formatWhole(free)
                let base = new Decimal(1.5)
                if (hasUpgrade('normal', 23)) base = base.add(0.25)
                let softcapped = ""
                let cap2 = new Decimal(1e180)
                let cap3 = decimalInfinity
                if (player.toad.supertier[1].gte(501761)) cap2 = new Decimal(1e200)
                if (buyableEffect('easy', 12).gte(1e100)) softcapped = " (softcapped)"
                if (buyableEffect('easy', 12).gte(cap2)) softcapped = " (softcapped^2)"
                if (buyableEffect('easy', 12).gte(cap3)) softcapped = " (hardcapped)"
                let display = ` Multiply Normal Endless clear gain by ${format(base)} per every level. <br>
                level: ${formatWhole(player[this.layer].buyables[this.id])}${freedis}<br>
                Effect: ${format(this.effect())}x${softcapped}<br>
                Cost: ${format(this.cost())} Free Clears`
                return display
            },
            canAfford() { return player[this.layer].free_c.gte(this.cost()) },
            buyMax() { return setBuyableAmount('easy', 12, player.easy.free_c.div(1e20).max(256).log(256).root(1.44).floor().add(1)) },
            canBuyMax() { return false },
            buy() {
                player[this.layer].free_c = player[this.layer].free_c.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effect(x) {
                let free = new Decimal(0)
                let base = new Decimal(1.5)
                if (hasUpgrade('normal', 23)) base = base.add(0.25)
                let cap2 = new Decimal(1e180)
                if (player.toad.supertier[1].gte(501761)) cap2 = new Decimal(1e200)
                let cap3 = decimalInfinity
                let effect = base.pow(x.add(free))
                if (effect.gte(1e100)) effect = effect.div(1e100).root(3).times(1e100)
                if (effect.gte(cap2)) effect = effect.div(cap2).root(effect.log(10).root(2)).times(cap2)
                if (effect.gte(cap3)) effect = cap3
                return effect
            },
            unlocked() { return hasUpgrade('easy', 43) },

        },
    },
    automate() {
        if (hasMilestone('expert', 2)) setBuyableAmount('easy', 11, player.easy.free_c.max(10).log(10).root(1.35).floor().add(1)),
            setBuyableAmount('easy', 12, player.easy.free_c.div(1e20).max(256).log(256).root(1.44).floor().add(1))
    },
    update(diff) {
        let tick = new Decimal(0.05)
        let multNDMG = new Decimal(1)
        if (hasUpgrade('easy', 31)) multNDMG = multNDMG.times(upgradeEffect('easy', 31))
        if (hasUpgrade('toad', 61)) multNDMG = multNDMG.times(upgradeEffect('toad', 61))
        multNDMG = multNDMG.floor()
        player.easy.no_dmg_mult = multNDMG
        if (hasMilestone('expert', 0)) player.easy.no_dmg = player.easy.no_dmg.add(player.easy.no_dmg_mult.times(diff))

        let gain = tmp.easy.resetGain.max(10).log(10).floor()
        if (hasUpgrade('easy', 33)) gain = gain.times(tmp.toad.buyables[103].effectII)
        if (hasUpgrade('easy', 35)) gain = gain.times(buyableEffect('easy', 11))
        if (hasUpgrade('normal', 11)) gain = gain.times(upgradeEffect('normal', 11))
        if (hasMilestone('normal', 5))
            player[this.layer].free_c = player[this.layer].free_c.add(gain.times(diff))
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You only can reset for this layer after getting ` + format("1e5250") + ` Toad`],
        ["display-text", () => `You have ` + formatWhole(player.points) + ` Cleared Courses`],
        ["display-text", () => `You have ` + formatWhole(player.toad.points) + ` Toad`],
        ["display-text", () => `Your record of Easy Endless Clears is ` + formatWhole(player.easy.best)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">There are 4 different difficulties of endless challenges. Easy endless is the first difficulty.<br>When you start a new run, you would have 5 lives.`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "No Damage Challenge": {
                unlocked() { return hasUpgrade('easy', 15) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return "You cleared <h2 style='color: #2dbba4; text-shadow: 0 0 10px #2dbba4'>" + formatWhole(player.easy.no_dmg) + " </h2> easy courses without taking damage, multiplying Easy Endless clears by <h2 style='color: #2dbba4; text-shadow: 0 0 10px #2dbba4'>" + format(clickableEffect('easy', 11)) + "x </h2>"
                    }
                    ],
                    ["clickables", [1]],
                    ["display-text", function () {
                        return "You will get a course with a random style and a random theme. Pick the corresponding goal of this random course to increase No Damage easy clears."
                    }
                    ],
                    ["display-text", function () {
                        return "You can gain " + formatWhole(player.easy.no_dmg_mult) + " No Damage easy clears per every correct pick, but if you picked incorrect goal, you will lose all your No Damage easy clears"
                    }
                    ],
                    "blank",
                    "blank",
                    ["display-text", function () {
                        return "------Themes------"
                    }
                    ],
                    ["clickables", [2]],
                    "blank",
                    ["clickables", [3]],
                    "blank",
                    ["display-text", function () {
                        return "------Styles------"
                    }
                    ],
                    ["clickables", [4]],
                    "blank",
                    ["display-text", function () {
                        return "------Goals------"
                    }
                    ],
                    ["clickables", [5]],
                    ["blank", "1000px"],
                    ["display-text", function () {
                        return "Oh if you don't know what goals are correct here's the hint.<br>____________________________________________________________________"
                    }
                    ],
                    ["display-text", function () {
                        return "In SMB1 and NSMBU style, the goal is a flag except castle theme<br>In SMB3 style, the goal is a square except castle theme<br>In SMW style, the goal is a pole except castle theme"
                    }
                    ],
                    ["display-text", function () {
                        return "In SM3DW style, the goal is a flag<br>In castle theme, the goal is an axe except SM3DW style"
                    }
                    ],
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #2dbba4, #165d52)',
                        'border-color': '#2dbba4',
                        'color': 'black',
                    }
                },
            },
            "Free Clears": {
                unlocked() { return hasUpgrade('easy', 31) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return "You have <h2 style='color: #2dbba4; text-shadow: 0 0 10px #2dbba4'>" + formatWhole(player.easy.free_c) + "</h2> Free Clears in Easy Endless, multiplying <h2 style='color: #2dbba4; text-shadow: 0 0 10px #2dbba4'>" + format(upgradeEffect('easy', 31)) + "x</h2> to No Damage easy clears gain"
                    }
                    ],
                    ["display-text", function () {
                        let gain = tmp.easy.resetGain.max(10).log(10).floor()
                        if (hasUpgrade('easy', 33)) gain = gain.times(tmp.toad.buyables[103].effectII)
                        if (hasUpgrade('easy', 35)) gain = gain.times(buyableEffect('easy', 11))
                        if (hasUpgrade('normal', 11)) gain = gain.times(upgradeEffect('normal', 11))
                        return "You can gain " + formatWhole(gain) + " Free Clears this Easy Endless reset"
                    }
                    ],
                    "blank",
                    "buyables",
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #2dbba4, #165d52)',
                        'border-color': '#2dbba4',
                        'color': 'black',
                    }
                },
            },
        },
    },
})
// 第二十五层：普通耐力挑战
addLayer("normal", {
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            oneshot: new Decimal(0),
            oneshot_mult: new Decimal(1),
            square_cooldown: new Decimal(0),
            square_changing: new Decimal(0),
            auto_mario: new Decimal(0),
            semi_auto: new Decimal(0),
            condition_course: new Decimal(0),
            OSCtabStyle: d(0),
        }
    },

    color: "#77A831",                       // The color for this layer, which affects many elements.
    resource: "Normal Endless Clears",            // The name of this layer's main prestige resource.
    row: 11,                                 // The row this layer is on (0 is the first row).
    position: 0,
    branches: ["easy"],
    symbol: "Nor",

    baseResource: "Easy Endless Clears",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.easy.points },  // A function to return the current amount of baseResource.

    requires: new Decimal("1e651"),              // The amount of the base needed to gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "custom",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).

    doReset(resettingLayer) {
        if (layers[resettingLayer].row > layers[this.layer].row) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('expert', 0)) {
                kept.push("milestones")
            }
            layerDataReset(this.layer, kept)
        }
    },
    getResetGain() {
        let mult = new Decimal(1) //gainMult
        if (player.toad.supertier[1].gte(69)) mult = mult.times(3)
        if (hasUpgrade('easy', 43)) mult = mult.times(buyableEffect('easy', 12))
        if (hasMilestone('normal', 1)) mult = mult.times(milestoneEffect('normal', 1))
        if (hasUpgrade('normal', 24)) mult = mult.times(upgradeEffect('normal', 24))
        if (hasMilestone('normal', 3)) mult = mult.times(clickableEffect('normal', 21))
        if (hasMilestone('expert', 0)) mult = mult.times(3)
        if (hasUpgrade('expert', 13)) mult = mult.times(expertBossMagicEffect('larry'))
        if (hasUpgrade('versus', 231)) mult = mult.times(upgradeEffect('versus', 231))
        if (hasUpgrade('versus', 234)) mult = mult.times('1e345')
        let gain = player.easy.points.max(1).div("1e641").max(1).log(1e10).times(mult).floor()
        return gain
    },
    getNextAt() {
        let base = new Decimal(1e10)
        let mult = new Decimal(1) //gainMult
        if (player.toad.supertier[1].gte(69)) mult = mult.times(3)
        if (hasUpgrade('easy', 43)) mult = mult.times(buyableEffect('easy', 12))
        if (hasMilestone('normal', 1)) mult = mult.times(milestoneEffect('normal', 1))
        if (hasUpgrade('normal', 24)) mult = mult.times(upgradeEffect('normal', 24))
        if (hasMilestone('normal', 3)) mult = mult.times(clickableEffect('normal', 21))
        if (hasMilestone('expert', 0)) mult = mult.times(3)
        if (hasUpgrade('expert', 13)) mult = mult.times(expertBossMagicEffect('larry'))
        if (hasUpgrade('versus', 231)) mult = mult.times(upgradeEffect('versus', 231))
        if (hasUpgrade('versus', 234)) mult = mult.times('1e345')
        base = base.root(mult)
        let gain = tmp.normal.resetGain
        return Decimal.pow(base, gain).times("1e651").div(base.pow(mult.sub(1)))
    },
    prestigeButtonText() {
        if (tmp.normal.getResetGain.lt(100) && player.normal.points.lt(1000))
            return "Difficulty up for <b>+" + formatWhole(tmp.normal.getResetGain) + "</b> Normal Endless Clears<br><br>Next at " + format(tmp.normal.getNextAt) + " Easy Endless Clears"
        else return "Difficulty up for <b>+" + formatWhole(tmp.normal.getResetGain) + "</b> Normal Endless Clears"
    },
    canReset() {
        return player.easy.points.gte("1e651")
    },
    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.

        return mult
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },
    effect() {
        let eff = Decimal.pow(10, player[this.layer].points.add(1).max(1).log(10).root(3)).pow(10)
        if (hasMilestone('easy', 15)) eff = eff.pow(milestoneEffect('easy', 15))
        if (hasUpgrade('normal', 34)) eff = eff.pow(upgradeEffect('normal', 34))
        if (hasMilestone('expert', 5)) eff = eff.pow(10)
        if (hasUpgrade('expert', 22)) eff = eff.pow(upgradeEffect('expert', 22))
        if (hasUpgrade('expert', 25)) eff = eff.pow(upgradeEffect('expert', 25))
        if (hasUpgrade('expert', 65)) eff = eff.pow(100)
        if (hasSEendlessUpgrade(12)) eff = eff.pow(upgradeEffect('s_expert', 12))
        if (hasUpgrade('super_acorn', 121)) eff = eff.pow(upgradeEffect('super_acorn', 121))
        if (hasUpgrade('coop', 14)) eff = eff.pow(upgradeEffect('coop', 14))
        return eff
        /*
        you should use this.layer instead of <layerID>
        Decimal.pow(num1, num2) is an easier way to do
        num1.pow(num2)
        */
    },
    effectDescription() {
        return `powering Cleared Courses gain by ${textStyle_h2("^" + format(tmp[this.layer].effect), '77a831')}`
        /*
        use format(num) whenever displaying a number
        */
    },
    onPrestige() {
        return player[this.layer].resetTime = 0
    },
    passiveGeneration() { return hasMilestone('expert', 8) },
    layerShown() { return hasAchievement('achievements', 174) },          // Returns a bool for if this layer's node should be visible in the tree.

    autoUpgrade() {
        return hasMilestone('expert', 9)
    },
    hotkeys: [
        { key: "n", description: "N: Reset for Normal Endless", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],
    upgrades: {
        11: {
            title: "Another journey",
            description: "Record of Normal Endless Clears boosts Free Clears gain.",
            cost: new Decimal(3),
            unlocked() { return true },
            effect() {
                let eff = player.normal.best.add(1.1).max(1.1).log(1.1).pow(2)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        12: {
            title: "A simple gap",
            description() {
                let time = new Decimal(player.normal.resetTime)
                if (hasUpgrade(this.layer, 14)) time = time.add(3600)
                if (hasUpgrade(this.layer, 15)) time = time.add(upgradeEffect(this.layer, 15))
                if (time.abs().lt(31556952000))
                    return "Normal Endless reset time multiplies Toad gain.<br>Time: " + formatTime(new Decimal(time))
                else return "Normal Endless reset time multiplies Toad gain.<br>Time: " + formatTimeLong(new Decimal(time))
            },
            cost: new Decimal(10),
            unlocked() { return hasUpgrade(this.layer, 11) },
            effect() {
                let time = new Decimal(player.normal.resetTime)
                if (hasUpgrade(this.layer, 14)) time = time.add(3600)
                if (hasUpgrade(this.layer, 15)) time = time.add(upgradeEffect(this.layer, 15))
                let eff = Decimal.pow("1e100000", time.root(3))
                if (time.lte(31556926080) && hasUpgrade(this.layer, 33)) eff = Decimal.pow("1e200000", time.max(1).root(3))
                if (time.gte(31556926080) && hasUpgrade(this.layer, 33)) eff = Decimal.pow("1e100000", time.max(1).root(3)).times("5.49087e316008111")
                if (hasUpgrade('coop', 32)) eff = eff.pow(25)
                return eff
            },
            time() {
                let time = new Decimal(player.normal.resetTime)
                if (hasUpgrade(this.layer, 14)) time = time.add(3600)
                if (hasUpgrade(this.layer, 15)) time = time.add(upgradeEffect(this.layer, 15))
                return time
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        13: {
            title: "A hidden block",
            description: "Normal Endless Clear provides free level of 'Iczeta challenging'.",
            cost: new Decimal(144),
            unlocked() { return hasUpgrade(this.layer, 12) },
            effect() {
                let eff = player.normal.points.max(1).log(2).floor()
                return eff
            },
            effectDisplay() { return "+" + formatWhole(upgradeEffect(this.layer, this.id)) },
        },
        14: {
            title: "Time skip",
            description: "Add 1 hour to 2nd Normal Endless upgrade effect.",
            cost: new Decimal(1528),
            unlocked() { return hasUpgrade(this.layer, 13) },
        },
        15: {
            title: "Go to the goal",
            description: "Unlock a new subtab.",
            cost: new Decimal(6677),
            unlocked() { return hasUpgrade(this.layer, 14) },
            effect() {
                let power = new Decimal(3)
                if (hasUpgrade(this.layer, 21)) power = power.div(2)
                let eff = player.normal.oneshot.add(1).max(1).root(power).times(3600)
                if (hasUpgrade(this.layer, 25)) eff = eff.times(clickableEffect('normal', 21))
                if (hasUpgrade('expert', 45)) eff = eff.times(3)
                if (hasMilestone('versus', 15)) eff = eff.pow(milestoneEffect('versus', 15))
                return eff
            },
        },
        21: {
            title: "Timing",
            description: "One Shot Clears effect is better.",
            currencyDisplayName: "One Shot Clears",
            currencyInternalName: "oneshot",
            currencyLayer: "normal",
            cost: new Decimal(10),
            unlocked() { return hasUpgrade(this.layer, 15) },
        },
        22: {
            title: "Life +3",
            description: "Normal Endless Clears boosts One Shot Clears gain.",
            cost: new Decimal(10000000),
            unlocked() { return hasUpgrade(this.layer, 21) },
            effect() {
                let eff = player.normal.points.max(10000).log(10000).pow(3.333)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        23: {
            title: "Courses with extra rewards",
            description: "+0.25 to 'Ikyota challenging' base.",
            cost: new Decimal(88888888),
            unlocked() { return hasUpgrade(this.layer, 22) },
        },
        24: {
            title: "A precision jump",
            description: "Normal Endless Clear boosts itself.",
            cost: new Decimal(1e9),
            unlocked() { return hasUpgrade(this.layer, 23) },
            effect() {
                let eff = player.normal.points.max(2).log(2).pow(1.5)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        25: {
            title: "1000 Clears to a costume",
            description: "Unlock a new subtab with three different kinds of resources.",
            cost: new Decimal(1e13),
            unlocked() { return hasUpgrade(this.layer, 24) },
            effect() {
                let eff = player.normal.semi_auto.max(1).root(1.8)
                return eff
            },
        },
        31: {
            title: "Balance speed and lives",
            description: "Boost OSC gain by your Normal Upg. bought.",
            cost: new Decimal(1e15),
            unlocked() { return hasUpgrade(this.layer, 25) },
            effect() {
                let eff = d(player.normal.upgrades.length).min(15)
                eff = new Decimal(eff)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        32: {
            title: "Hold Y + right",
            description: "Start to generate 1 Semi-auto Course every second.",
            cost: new Decimal(1e18),
            unlocked() { return hasUpgrade(this.layer, 31) },
            effect() {
                let gain = new Decimal(1)
                if (hasAchievement('achievements', 182)) gain = gain.times(layerEffect('expert'))
                if (player.toad.supertier[3].gte(2)) gain = gain.times(clickableEffect('normal', 22))
                return gain
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "/sec" },
        },
        33: {
            title: "Hold Y + ZR + right",
            description: "Boost 2nd Normal Endless upgrade effect before 1 millennium.",
            cost: new Decimal(1e22),
            unlocked() { return hasUpgrade(this.layer, 32) },
        },
        34: {
            title: "Watch out flaw courses",
            description: "Multiply OSC gain and power Normal Endless Clears effect by OoM^3s of Cleared Courses.",
            cost: new Decimal(2e24),
            unlocked() { return hasUpgrade(this.layer, 33) },
            effect() {
                let eff = player.points.max(1).log(10).max(1).log(10).max(10).log(10)
                return eff
            },
            effectDisplay() {
                return format(upgradeEffect(this.layer, this.id)) + "x,<br>^" + format(upgradeEffect(this.layer, this.id))
            },
        },
        35: {
            title: "Difficulty up up",
            description: "Unlock a new layer at row 13: Expert Endless.",
            cost: new Decimal(1e27),
            unlocked() { return hasUpgrade(this.layer, 34) || hasUpgrade(this.layer, 35) },
        },
        // Look in the upgrades docs to see what goes here!
    },
    milestones: {
        0: {
            requirementDescription: "1 Normal Endless Clear",
            effectDescription: "Keep Easy Endless milestones on row 12 reset and autobuy Peachette levels.",
            done() { return player.normal.points.gte(1) },
        },
        1: {
            requirementDescription: "100 One Shot Clears",
            effect() { return player.normal.oneshot.max(1) },
            effectDescription() { return "One Shot Clears boosts Normal Endless Clears gain.<br>Currently: " + format(milestoneEffect('normal', 1)) + "x" },
            done() { return player.normal.oneshot.gte(100) },
        },
        2: {
            requirementDescription() { return `${f(5e8)} Normal Endless Clears.` },
            effectDescription: "Keep Easy Endless upgrades on row 12 reset.",
            done() { return player.normal.points.gte(500000000) },
        },
        3: {
            requirementDescription: "1 month in 2nd Normal Endless upgrade",
            effectDescription: "Auto-Mario Courses also affact Normal Endless Clear.",
            done() { return tmp.normal.upgrades[12].time.gte(2592000) && hasUpgrade('normal', 12) },
        },
        4: {
            requirementDescription: "100 Auto-Mario Courses",
            effectDescription() { return "Unlock a buyable for Auto-Mario Courses." },
            done() { return player.normal.auto_mario.gte(100) },
        },
        5: {
            requirementDescription: "1 year in 2nd Normal Endless upgrade",
            effectDescription() { return "Passive gain 100% Easy Endless Clears and Free Clears every second." },
            done() { return tmp.normal.upgrades[12].time.gte(31536000) },
        },
        6: {
            requirementDescription() { return `Get ${f('ee3000000')} Cleared Courses.` },
            effectDescription() { return "Auto Toad pent up." },
            done() { return player.points.gte("e1e3000000") },
        },
    },
    clickables: {
        11: {
            title() {
                let c = player.normal.square_changing
                if (c.gte(1) && c.lte(3)) return "Mushroom"
                if (c.gte(4) && c.lte(6)) return "Flower"
                if (c.gte(7) && c.lte(9)) return "Star"
                if (c.gte(10) && c.lte(12)) return "1UP"
            },
            display() {
                return ""
            },
            canClick() { return player.normal.square_cooldown.eq(0) && (player.easy.random_theme.gte(1) && player.easy.random_theme.lte(9) && player.easy.random_style.eq(2)) },
            onClick() {
                player.normal.square_cooldown = new Decimal(5)
                let c = player.normal.square_changing
                if (c.gte(10) && c.lte(12)) player.normal.oneshot = player.normal.oneshot.add(player.normal.oneshot_mult)
            },
            unlocked() { return hasUpgrade('normal', 15) },
            style() {
                let style = ""
                let c = player.normal.square_changing
                if (c.gte(1) && c.lte(3))
                    style = {
                        'border-radius': "10%",
                        'border': "10px solid",
                        'border-color': "#ffffff",
                        'background': "radial-gradient(#c42533 0%, #070707)",
                    }
                if (c.gte(4) && c.lte(6))
                    style = {
                        'border-radius': "10%",
                        'border': "10px solid",
                        'border-color': "#ffffff",
                        'background': "radial-gradient(#ff8d00 0%, #070707)",
                    }
                if (c.gte(7) && c.lte(9))
                    style = {
                        'border-radius': "10%",
                        'border': "10px solid",
                        'border-color': "#ffffff",
                        'background': "radial-gradient(#ffb15a 0%, #070707)",
                    }
                if (c.gte(10) && c.lte(12))
                    style = {
                        'border-radius': "10%",
                        'border': "10px solid",
                        'border-color': "#ffffff",
                        'background': "radial-gradient(#5bbf2f 0%, #070707)",
                    }
                return style
            },
        },
        21: {
            title: "Rare for Normal Endless",
            display() {
                let cost = new Decimal(10)
                let gain = new Decimal(1)
                if (hasMilestone('normal', 4)) cost = cost.times(tmp.normal.buyables[11].loss),
                    gain = gain.times(buyableEffect('normal', 11))
                if (hasMilestone('expert', 1)) gain = gain.times(30)
                if (hasUpgrade('expert', 11)) gain = gain.times(20)
                if (hasUpgrade('expert', 24)) gain = gain.times(expertBossMagicEffect('wendy'))
                return "Hold to spend " + formatWhole(cost) + " One Shot Clears per second to gain " + formatWhole(gain) + " Auto-Mario courses gain.<br>You should have at least " + formatWhole(cost) + " One Shot Clears to click."
            },
            canClick() {
                let cost = new Decimal(10)
                if (hasMilestone('normal', 4)) cost = cost.times(tmp.normal.buyables[11].loss)
                return player.normal.oneshot.gte(cost)
            },
            onHold() {
                let tick = new Decimal(0.05)
                let cost = new Decimal(10)
                let gain = new Decimal(1)
                if (hasMilestone('normal', 4)) cost = cost.times(tmp.normal.buyables[11].loss),

                    gain = gain.times(buyableEffect('normal', 11))
                if (hasMilestone('expert', 1)) gain = gain.times(30)
                if (hasUpgrade('expert', 11)) gain = gain.times(20)
                if (hasUpgrade('expert', 21)) gain = gain.times(upgradeEffect('expert', 21))
                if (hasUpgrade('expert', 24)) gain = gain.times(expertBossMagicEffect('wendy'))

                player.normal.oneshot = player.normal.oneshot.sub(cost.times(tick))
                player.normal.auto_mario = player.normal.auto_mario.add(gain.times(tick))
            },
            unlocked() { return hasUpgrade('normal', 25) },
            effect() {
                let root = new Decimal(3)
                return player.normal.auto_mario.max(1).root(root)
            },
            style() {
                let s = {
                    'width': "200px",
                    'min-height': '200px',
                    "border-radius": "5%",
                }
                if (this.canClick()) s = {
                    'width': "200px",
                    'min-height': '200px',
                    "border-radius": "5%",
                    'background': `linear-gradient(${formatWhole(player.normal.OSCtabStyle)}deg, #77a831, #3b5418)`,
                }
                return s
            },
        },
        22: {
            title: "Conditions means no CP",
            display() {
                let gain = new Decimal(1)
                let hardcap = ""
                if (tmp.normal.clickables[22].gainCond.gte("1e4000")) hardcap = "(hardcapped)"
                else hardcap = ""
                if (hasMilestone('normal', 4)) cost = cost.times(tmp.normal.buyables[11].loss),
                    gain = gain.times(buyableEffect('normal', 11))
                if (hasMilestone('expert', 1)) gain = gain.times(30)
                return `Reset Semi-auto Courses for Condition Courses.<br>
                        Condition Courses gain is based on Semi-auto Courses and Expert Endless Clears<br>
                        Requirement: ${formatWhole(tmp.normal.clickables[22].requires)} Semi-Auto Courses<br>
                        Condition Courses gain: ${formatWhole(tmp.normal.clickables[22].gainCond)} ${hardcap}`
            },
            canClick() {
                return player.normal.semi_auto.gt(tmp.normal.clickables[22].requires)
            },
            requires() {
                let exp = player.expert.points
                if (exp.gte(8)) exp = player.expert.points.sub(6).root(5).add(6)
                if (exp.gte(3000)) exp = exp.div(3000).root(2).times(3000)
                let cond = player.normal.condition_course
                let req = Decimal.pow(10, cond.max(0).root(exp))
                return req
            },
            gainCond() {
                let exp = player.expert.points
                if (exp.gte(8)) exp = player.expert.points.sub(6).root(5).add(6)
                if (exp.gte(3000)) exp = exp.div(3000).root(2).times(3000)
                let semi = player.normal.semi_auto
                let gain = semi.max(1).log(10).pow(exp)
                let hardcap = new Decimal("1e4000")
                if (hasUpgrade('expert', 53)) hardcap = hardcap.pow(upgradeEffect('expert', 53))
                if (gain.gte(hardcap)) gain = new Decimal(hardcap)

                return gain
            },
            onClick() {
                player.normal.condition_course = tmp.normal.clickables[22].gainCond
                player.normal.semi_auto = decimalZero
            },
            unlocked() { return player.toad.supertier[3].gte(2) },
            effect() {
                let softcap = new Decimal(1)
                if (player.normal.condition_course.gte(1000000)) softcap = player.normal.condition_course.div(100000).log(10).root(1.2)
                let eff = player.normal.condition_course.max(1).root(softcap)
                if (player.normal.condition_course.gte(1000000)) eff = player.normal.condition_course.div(1000000).root(softcap).times(1000000)
                return eff
            },
            style() {
                let s = {
                    'width': "200px",
                    'min-height': '200px',
                    "border-radius": "5%",
                }
                if (this.canClick()) s = {
                    'width': "200px",
                    'min-height': '200px',
                    "border-radius": "5%",
                    'background': `linear-gradient(${formatWhole(player.normal.OSCtabStyle)}deg, #77a831, #3b5418)`,
                }
                return s
            },
        },
    },
    buyables: {
        11: {
            title: "Icxena challenging",
            cost(x) { return new Decimal(3).pow(x) },
            display() {
                let baseGain = new Decimal(2)
                let baseCost = new Decimal(2.5)
                if (hasSEendlessUpgrade(44)) baseGain = baseGain.add(0.1)
                let display = ` Multiply Auto-Mario Courses gain by ${format(baseGain)}x per every level. But loss ${format(baseCost)}x One Shot Clears per every level.<br>
                level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Auto-Mario gain: ${format(this.effect())}x<br>
                One Shot Clears loss: ${format(this.loss())}x<br>
                Cost: ${format(this.cost())} Auto-Mario Courses`
                return display
            },
            canAfford() { return player[this.layer].auto_mario.gte(this.cost()) },
            buyMax() { return setBuyableAmount('normal', 11, player.normal.auto_mario.max(1).log(3).floor()) },
            canBuyMax() { return false },
            buy() {
                player[this.layer].auto_mario = player[this.layer].auto_mario.sub(this.cost())
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            sellOneGain() {
                let x = getBuyableAmount('normal', 11)
                let gain = new Decimal(3).pow(x.sub(1))
                if (!hasSEendlessMilestone(6)) return gain
                else return new Decimal(0)
            },
            sellOne() {
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).sub(1))
                player[this.layer].auto_mario = player[this.layer].auto_mario.add(tmp.normal.buyables[11].sellOneGain)
            },
            canSellOne() {
                return getBuyableAmount(this.layer, this.id).gte(1)
            },
            effect(x) {
                let base = new Decimal(2)
                if (hasSEendlessUpgrade(44)) base = base.add(0.1)
                let effect = Decimal.pow(base, x)
                return effect
            },
            loss() {
                let x = getBuyableAmount('normal', 11)
                let base = new Decimal(2.5)
                let effect = Decimal.pow(base, x)
                return effect
            },
            unlocked() { return hasMilestone('normal', 4) },
        },
    },
    update(diff) {
        let tick = new Decimal(0.05)
        let OSmult = new Decimal(1)
        if (hasUpgrade('easy', 45)) OSmult = OSmult.times(5)
        if (hasUpgrade('normal', 22)) OSmult = OSmult.times(upgradeEffect('normal', 22))
        if (hasUpgrade('normal', 31)) OSmult = OSmult.times(upgradeEffect('normal', 31))
        if (hasUpgrade('normal', 32)) OSmult = OSmult.times(upgradeEffect('normal', 25))
        if (hasUpgrade('normal', 34)) OSmult = OSmult.times(upgradeEffect('normal', 34))
        if (hasMilestone('expert', 0)) OSmult = OSmult.times(3)
        if (hasUpgrade('expert', 12)) OSmult = OSmult.times(upgradeEffect('expert', 12))
        if (hasUpgrade('expert', 21)) OSmult = OSmult.times(upgradeEffect('expert', 21))
        if (hasUpgrade('versus', 25)) OSmult = OSmult.times(25)
        OSmult = OSmult.floor()
        player.normal.oneshot_mult = OSmult
        if (player.normal.oneshot_mult.lt(1)) player.normal.oneshot_mult = new Decimal(1)
        if (hasUpgrade('normal', 15) && (player.easy.random_theme.gte(1) && player.easy.random_theme.lte(9) && player.easy.random_style.eq(2))) player.normal.square_changing = player.normal.square_changing.add(1)
        if (player.normal.square_cooldown.gt(0)) player.normal.square_cooldown = player.normal.square_cooldown.sub(diff)
        if (player.normal.square_cooldown.lt(0)) player.normal.square_cooldown = decimalZero
        if (player.normal.square_changing.gt(12)) player.normal.square_changing = new Decimal(1)

        if (hasUpgrade('normal', 32)) player.normal.semi_auto = player.normal.semi_auto.add(upgradeEffect('normal', 32).times(diff))

        let cap = new Decimal(50)
        if (hasUpgrade('expert', 12)) cap = new Decimal(10)
        if ((player.easy.random_theme.gte(1) && player.easy.random_theme.lte(9) && player.easy.random_style.eq(2) && hasMilestone('expert', 4) && player.normal.oneshot.lte(player.normal.oneshot_mult.times(cap))) || (hasMilestone('expert', 4) && player.normal.oneshot.lte(player.normal.oneshot_mult.times(cap)) && ((player.toad.tierlayer.gte(10) && player.toad.highest_tierlayer.gte(20)) || player.toad.tierlayer.gte(11)))) player.normal.oneshot = player.normal.oneshot.add(player.normal.oneshot_mult.div(5).times(diff)).min(player.normal.oneshot_mult.times(cap))

        let gain = new Decimal(1)
        if (hasMilestone('normal', 4)) cost = cost.times(tmp.normal.buyables[11].loss),

            gain = gain.times(buyableEffect('normal', 11))
        if (hasMilestone('expert', 1)) gain = gain.times(30)
        if (hasUpgrade('expert', 11)) gain = gain.times(20)
        if (hasUpgrade('expert', 21)) gain = gain.times(upgradeEffect('expert', 21))
        if (hasUpgrade('expert', 24)) gain = gain.times(expertBossMagicEffect('wendy'))

        if (hasMilestone('expert', 7)) player.normal.auto_mario = player.normal.auto_mario.add(gain.times(diff))

        if (hasSEendlessMilestone(15)) player.normal.condition_course = tmp.normal.clickables[22].gainCond

        if (inExpertBossChallenge() && player.expert.bestCCinChallenge.lt(player.points)) player.expert.bestCCinChallenge = player.points

        player.normal.OSCtabStyle = player.normal.OSCtabStyle.add(2)
        if (player.normal.OSCtabStyle.gte(360)) player.normal.OSCtabStyle = d(0)
    },
    automate() {
        if (hasSEendlessMilestone(6) && player.normal.auto_mario.gte(Decimal.pow(3, getBuyableAmount('normal', 11))))
            setBuyableAmount('normal', 11, player.normal.auto_mario.max(1).log(3).floor().add(1))
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + formatWhole(player.easy.points) + ` Easy Endless Clears`],
        ["display-text", () => `Your record of Normal Endless Clears is ` + formatWhole(player.normal.best)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">There are 4 different difficulties of endless challenges. Normal endless is the second difficulty.<br>When you start a new run, you would have 5 lives. It's still a little hard for beginners.`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "One Shot Clears": {
                unlocked() { return hasUpgrade('normal', 15) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        let rew = formatTime(upgradeEffect('normal', 15))
                        if (upgradeEffect('normal', 15).abs().gte(31556952000)) rew = formatTimeLong(upgradeEffect('normal', 15))
                        if (hasUpgrade('normal', 15))
                            return "You have cleared <h2 style='color: #77a831; text-shadow: 0 0 10px #77a831'>" + formatWhole(player.normal.oneshot) + "</h2> Normal Endless courses with only one attempt (One shot clears), adding <h2 style='color: #77a831; text-shadow: 0 0 10px #77a831'>" + rew + " </h2> to 2nd Normal Endless upgrade."
                    }
                    ],
                    ["display-text", function () {
                        if (!(player.easy.random_theme.gte(1) && player.easy.random_theme.lte(9) && player.easy.random_style.eq(2)))
                            return "The SMB3 square goal is not rolling. To make the SMB3 square goal to start to roll, you need to go to 'No Damage Challenge' subtab in Easy Endless layer and make the goal is square goal."
                    }
                    ],
                    ["display-text", function () {
                        if (player.easy.random_theme.gte(1) && player.easy.random_theme.lte(9) && player.easy.random_style.eq(2))
                            return "The SMB3 square goal is rolling, click this goal while it turn to 1UP, gain " + formatWhole(player.normal.oneshot_mult) + " One Shot Clears."
                    }
                    ],
                    ["display-text", function () {
                        if ((player.toad.tierlayer.gte(10) && player.toad.highest_tierlayer.gte(20)) || player.toad.tierlayer.gte(11))
                            return "Because you reached Toad Dec 20, you can always gain " + format(player.normal.oneshot_mult.div(5)) + " One Shot Clears per second before the cap."
                    }
                    ],
                    "blank",
                    ["display-text", function () {
                        return "There is a 5s cooldown between two clicks."
                    }
                    ],
                    "blank",
                    ["clickables", [1]],
                    "blank",
                    ["display-text", function () {
                        return "Cooldown: " + formatTime(player.normal.square_cooldown)
                    }
                    ],
                ],
                buttonStyle() {
                    return {
                        'background': `linear-gradient(${formatWhole(player.normal.OSCtabStyle)}deg, #77a831, #3b5418)`,
                        'border-color': '#77a831',
                        'color': 'black',
                    }
                },
            },
            "Auto and Condition Courses": {
                unlocked() { return hasUpgrade('normal', 25) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        let rew = formatTime(upgradeEffect('normal', 15))
                        if (upgradeEffect('normal', 15).abs().gte(31556952000)) rew = formatTimeLong(upgradeEffect('normal', 15))
                        if (hasUpgrade('normal', 15))
                            return "You have cleared <h2 style='color: #77a831; text-shadow: 0 0 10px #77a831'>" + formatWhole(player.normal.oneshot) + "</h2> Normal Endless courses with only one attempt (One shot clears), adding <h2 style='color: #77a831; text-shadow: 0 0 10px #77a831'>" + rew + " </h2> to 2nd Normal Endless upgrade."
                    }
                    ],
                    ["display-text", function () {
                        return "You have cleared <h2 style='color: #77a831; text-shadow: 0 0 10px #77a831'>" + formatWhole(player.normal.auto_mario) + "</h2> Auto-Mario courses in Normal Endless, making One Shot Clears provides <h2 style='color: #77a831; text-shadow: 0 0 10px #77a831'>" + format(clickableEffect('normal', 21)) + "x</h2> of time to 2nd Normal Endless upgrade time"
                    }
                    ],
                    ["display-text", function () {
                        return "You have cleared <h2 style='color: #77a831; text-shadow: 0 0 10px #77a831'>" + formatWhole(player.normal.semi_auto) + "</h2> Semi-auto courses in Normal Endless, multiplying One Shot Clears gain by <h2 style='color: #77a831; text-shadow: 0 0 10px #77a831'>" + format(upgradeEffect('normal', 25)) + "x</h2>"
                    }
                    ],
                    ["display-text", function () {
                        let des = "You have cleared <h2 style='color: #77a831; text-shadow: 0 0 10px #77a831'>" + formatWhole(player.normal.condition_course) + "</h2> courses with clear conditions in Normal Endless, multiplying Semi-auto Courses gain by <h2 style='color: #77a831; text-shadow: 0 0 10px #77a831'>" + format(clickableEffect('normal', 22)) + "x</h2>"
                        if (player.normal.condition_course.gte(1000000)) des = des + " (softcapped)"
                        return des
                    }
                    ],
                    ["clickables", [2]],
                    "buyables",
                ],
                buttonStyle() {
                    return {
                        'background': `linear-gradient(90deg, #77a831, #3b5418)`,
                        'border-color': '#77a831',
                        'color': 'black',
                    }
                },
            },
        },
    },
})
// 第二十六层：困难耐力挑战
function hasExpertEndlessUpgrade(id) {
    return hasUpgrade('expert', id)
}
function expertBossMagicGeneration(boss) {
    return tmp.expert.magicGeneration[boss]
}
function expertBossMagicEffect(boss) {
    return tmp.expert.magicEffect[boss]
}
function expertBossMinigameMagicCatch() {
    if (inChallenge('expert', 11) && player.expert.inChallengeTime.toNumber() % 40 == 0 && player.toad.tierlayer.gte(8))
        return player.expert.minigameMagicPosition[0] = Math.ceil(Math.random() * 23),
            player.expert.minigameMagicPosition[1] = player.expert.minigameMagicPosition[0] + 1,
            player.expert.minigameMagicPosition[2] = player.expert.minigameMagicPosition[0] + 2
    if (inChallenge('expert', 12) && player.expert.inChallengeTime.toNumber() % 40 == 0 && hasUpgrade('expert', 32))
        return player.expert.minigameMagicPosition[0] = Math.ceil(Math.random() * 25),
            player.expert.minigameMagicPosition[1] = 26 - player.expert.minigameMagicPosition[0],
            player.expert.minigameMagicPosition[2] = 0
    if (inChallenge('expert', 21) && player.expert.inChallengeTime.toNumber() % 40 == 0 && hasUpgrade('expert', 34))
        return player.expert.minigameMagicPosition[0] = Math.ceil(Math.random() * 25),
            player.expert.minigameMagicPosition[1] = (6 - (Math.ceil(player.expert.minigameMagicPosition[0] / 5) * 2)) * 5 + player.expert.minigameMagicPosition[0],
            player.expert.minigameMagicPosition[2] = 0
    if (inChallenge('expert', 22) && player.expert.inChallengeTime.toNumber() % 30 == 0 && player.toad.tierlayer.gte(9))
        return player.expert.minigameMagicPosition[0] = Math.ceil(Math.random() * 13),
            player.expert.minigameMagicPosition[1] = player.expert.minigameMagicPosition[0] + 6,
            player.expert.minigameMagicPosition[2] = player.expert.minigameMagicPosition[0] + 12
    if (inChallenge('expert', 31) && player.expert.inChallengeTime.toNumber() % 15 == 0 && hasUpgrade('expert', 51)) {
        let ring = [1, 2, 3, 4, 5, 10, 15, 20, 25, 24, 23, 22, 21, 16, 11, 6]
        return player.expert.minigameMagicPosition[0] = ring[player.expert.inChallengeTime.div(15).floor().toNumber() % ring.length],
            player.expert.minigameMagicPosition[1] = 0,
            player.expert.minigameMagicPosition[2] = 0
    }
    if (inChallenge('expert', 32) && player.expert.inChallengeTime.toNumber() % 40 == 0 && hasUpgrade('expert', 61))
        return player.expert.minigameMagicPosition[0] = Math.ceil(Math.random() * 15),
            player.expert.minigameMagicPosition[1] = player.expert.minigameMagicPosition[0] + 5,
            player.expert.minigameMagicPosition[2] = player.expert.minigameMagicPosition[0] + 10
    if (inChallenge('expert', 41) && player.expert.inChallengeTime.toNumber() % 30 == 0 && hasSEendlessMilestone(2))
        return player.expert.minigameMagicPosition[0] = Math.ceil(Math.random() * 5) * 5 - 4,
            player.expert.minigameMagicPosition[1] = player.expert.minigameMagicPosition[0] + 2,
            player.expert.minigameMagicPosition[2] = player.expert.minigameMagicPosition[0] + 4
}
function expertMinigameID(x) {
    return Math.floor(x / 10) * 5 + x % 10 - 5
}
addLayer("expert", {
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            skill: new Decimal(0),
            flaw: new Decimal(0),
            boss_rush: new Decimal(0),
            lemmy: new Decimal(0),
            roy: new Decimal(0),
            morton: new Decimal(0),
            wendy: new Decimal(0),
            ludwig: new Decimal(0),
            iggy: new Decimal(0),
            larry: new Decimal(0),
            lemmy_b: new Decimal(0),
            roy_m: new Decimal(0),
            morton_m: new Decimal(0),
            wendy_m: new Decimal(0),
            ludwig_m: new Decimal(0),
            iggy_m: new Decimal(0),
            larry_m: new Decimal(0),
            wing: new Decimal(0),
            magic: new Decimal(0),
            magicBoost: new Decimal(100),
            minigameMagicPosition: [0, 0, 0],
            inChallengeTime: new Decimal(0),
            canGainBRCAndFlaw: false,
            bestCCinChallenge: d(0),
            simulateCCinChallenge: d(0),
        }
    },

    color: "#BE924F",                       // The color for this layer, which affects many elements.
    resource: "Expert Endless Clears",            // The name of this layer's main prestige resource.
    row: 12,                                 // The row this layer is on (0 is the first row).
    position: 0,
    branches: ['normal'],
    symbol: "Exp",

    baseResource: "Normal Endless Clears",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.normal.points },  // A function to return the current amount of baseResource.

    requires() {
        let base = new Decimal(1e28)
        if (hasUpgrade('expert', 35)) base = base.div(expertBossMagicEffect('iggy'))
        return new Decimal(base).times(player.expert.points.add(1).pow(16.78))
    },                                      // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "custom",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).

    canReset() {
        let base = new Decimal(1e28)
        if (hasUpgrade('expert', 35)) base = base.div(expertBossMagicEffect('iggy'))
        return player.normal.points.gte(new Decimal(base).times(player.expert.points.add(1).pow(16.78)))
    },
    getResetGain() {
        let mult = new Decimal(1) //gainMult
        let base = new Decimal(1e28)
        if (hasUpgrade('expert', 35)) base = base.div(expertBossMagicEffect('iggy'))
        let gain = player.normal.points.max(0).div(base).max(0).root(16.78).floor()
        if ((!tmp[this.layer].canBuyMax) || tmp[this.layer].baseAmount.lt(tmp[this.layer].requires)) return decimalOne
        else return gain.floor().sub(player[this.layer].points).add(1).max(1)
    },
    getNextAt() {
        let gain = tmp.expert.getResetGain
        let base = new Decimal(1e28)
        if (hasUpgrade('expert', 35)) base = base.div(expertBossMagicEffect('iggy'))
        let nextshow = new Decimal(0)
        if ((!tmp[this.layer].canBuyMax) || tmp[this.layer].baseAmount.lt(tmp[this.layer].requires)) nextshow = new Decimal(0)
        else nextshow = new Decimal(1)
        return new Decimal(base).times(gain.add(nextshow).add(player.expert.points).pow(16.78))
    },
    prestigeButtonText() {
        return "Difficulty up for <b>+" + formatWhole(tmp.expert.getResetGain) + "</b> Expert Endless Clears<br><br>" + format(player.normal.points) + "/" + format(tmp.expert.getNextAt) + " Normal Endless Clears"
    },
    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        return new Decimal(1)               // Factor in any bonuses multiplying gain here.
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },

    autoPrestige() { return hasMilestone('coop', 3) },
    resetsNothing() { return hasMilestone('coop', 3) },

    layerShown() { return hasAchievement('achievements', 182) },          // Returns a bool for if this layer's node should be visible in the tree.
    effect() {
        let exp = player.expert.points
        if (exp.gte(8)) exp = player.expert.points.sub(6).root(5).add(6)
        let eff = exp.add(1).max(1).pow(4.3747)
        return eff
        /*
        you should use this.layer instead of <layerID>
        Decimal.pow(num1, num2) is an easier way to do
        num1.pow(num2)
        */
    },
    effectDescription() {
        let des = `multiplying Semi-auto Courses gain by ${textStyle_h2(format(tmp[this.layer].effect) + "x", 'be924f')}`
        if (player.expert.points.gte(8)) des = des + " (softcapped)"
        return des
        /*
        use format(num) whenever displaying a number
        */
    },
    doReset() {
        return undefined
    },
    hotkeys: [
        { key: "E", description: "Shift+E: Reset for Expert Endless", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],
    upgrades: {
        11: {
            title: "Start with 15 lives",
            description: "20x Auto-Mario Courses gain.",
            cost: new Decimal(100),
            unlocked() { return true },
        },
        12: {
            title: "Kaizo lite",
            description: "Record of Expert Endless Clears boost OSC gain but the passive generation cap is decreased to 1000%.",
            cost: new Decimal(694),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.expert.best.add(2).max(2).log(2).pow(2)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        13: {
            title: "Boss here!",
            description: "Unlock Boss Battles.",
            cost: new Decimal(10000),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.expert.boss_rush.max(1).root(3.612)
                return eff
            },
        },
        14: {
            title: "Jumping Boss",
            description: "Larry boosts CC in Expert Endless Boss Challenges.",
            currencyDisplayName: "Larry",
            currencyInternalName: "larry",
            currencyLayer: "expert",
            cost: new Decimal(100),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.expert.larry.max(1).root(2.25)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        15: {
            title: "Ball juggles",
            description: "Unlock a new Boss Lemmy.",
            currencyDisplayName: "Larry",
            currencyInternalName: "larry",
            currencyLayer: "expert",
            cost: new Decimal(1000),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "Bouncy ball, but Lemmy",
            description: "Lemmy's ball boosts OSC and Auto-Mario Courses gain.",
            currencyDisplayName: "Lemmy",
            currencyInternalName: "lemmy",
            currencyLayer: "expert",
            cost: new Decimal(100),
            unlocked() { return hasUpgrade(this.layer, 15) },
            effect() {
                let eff = player.expert.lemmy_b.max(20).log(20).pow(2.44)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        22: {
            title: "Ball in the air",
            description: "Record of Expert Endless Clears power Normal Endless Clear effect.",
            cost: new Decimal(1e10),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.expert.best.max(10).log(10).pow(1.5)
                return eff
            },
            effectDisplay() { return "^" + format(upgradeEffect(this.layer, this.id)) },
        },
        23: {
            title: "Attack mode",
            description: "Larry's magic is stronger.",
            currencyDisplayName: "Larry",
            currencyInternalName: "larry",
            currencyLayer: "expert",
            cost: new Decimal(1e13),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        24: {
            title: "Ball juggles",
            description: "Unlock a new Boss Wendy.",
            cost: new Decimal(5e14),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        25: {
            title: "Reflecting magic",
            description: "Wendy's magic and Cleared Courses powers Normal Endless Clear effect.",
            cost: new Decimal(3e15),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.expert.wendy_m.max(10).log(10).pow(player.lgpoints.max(1).log(10).max(1).log(10).max(1).root(3))
                return eff
            },
            effectDisplay() { return "^" + format(upgradeEffect(this.layer, this.id)) },
        },
        31: {
            title: "Circle magic",
            description: "CC boosts itself in Boss challenges.",
            cost: new Decimal(5e15),
            unlocked() { return hasUpgrade(this.layer, 25) },
            effect() {
                let eff = player.points.max(1).root(5)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        32: {
            title: "Dynamic balls",
            description: "Unlock Lemmy's minigame.",
            cost: new Decimal(3e16),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        33: {
            title: "Too much!",
            description: "Extra Magic has a power effect to Boss gain.",
            cost: new Decimal(1e17),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.expert.magic.max(8).log(8).root(3)
                return eff
            },
        },
        34: {
            title: "Not so hard",
            description: "Unlock Wendy's minigame.",
            cost: new Decimal(3e17),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        35: {
            title: "Hard to catch",
            description: "Unlock Boss Iggy.",
            cost: new Decimal(1e19),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        41: {
            title: "For elites",
            description: "Unlock Super Expert Endless Challenge layer.",
            cost: new Decimal(6.5e24),
            unlocked() { return hasUpgrade(this.layer, 35) },
        },
        42: {
            title: "Heavy attack",
            description: "Unlock Boss Morton.",
            cost: new Decimal(2.5e26),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        43: {
            title: "Expert speedrunning",
            description: "Multiply Extra Magic gain based on SE Endless Clears.",
            cost: new Decimal(3e29),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.s_expert.points.max(0).add(2).log(1.8).pow(2.5)
                let base = new Decimal(100)
                if (hasUpgrade(this.layer, this.id)) base = base.times(eff)
                if (hasUpgrade(this.layer, 52)) base = base.times(expertBossMagicEffect('roy'))
                if (hasUpgrade('versus', 14)) base = base.times(upgradeEffect('versus', 14))
                player.expert.magicBoost = base
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        44: {
            title: "Movement curse",
            description: "Morton's magic powers Larry's magic effect.",
            cost: new Decimal(1.5e30),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.expert.morton_m.max(0).add(3).log(3).root(5)
                return eff
            },
            effectDisplay() { return "^" + format(upgradeEffect(this.layer, this.id)) },
        },
        45: {
            title: "Groundpounding boss",
            description: "Triple OSC effect.",
            cost: new Decimal(1e32),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        51: {
            title: "How's the fire moving?",
            description: "Unlock Morton's minigame.",
            cost: new Decimal(1e36),
            unlocked() { return hasUpgrade(this.layer, 45) },
        },
        52: {
            title: "Out of screen?!",
            description: "Unlock Boss Roy.",
            cost: new Decimal(1e38),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        53: {
            title: "Trampoline: blocked",
            description: "Roy's magic powers Condition Courses gain hardcap.",
            cost: new Decimal(2e39),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.expert.roy_m.max(0).add(10).log(10).pow(1.2)
                return eff
            },
            effectDisplay() { return "^" + format(upgradeEffect(this.layer, this.id)) },
        },
        54: {
            title: "Oldest koopaling",
            description: "Unlock Boss Ludwig.",
            cost: new Decimal(5e39),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        55: {
            title: "Boss floating jump.",
            description: "Ludwig powers 'SA-OPU5' effect.",
            currencyDisplayName: "Ludwig's Magic",
            currencyInternalName: "ludwig_m",
            currencyLayer: "expert",
            cost: new Decimal(10000000),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.expert.ludwig.max(0).add(10).log(10).root(1.2)
                return eff
            },
            effectDisplay() { return "^" + format(upgradeEffect(this.layer, this.id)) },
        },
        61: {
            title: "Pink magic",
            description: "Unlock Roy's minigame.",
            cost: new Decimal(1.75e40),
            unlocked() { return hasUpgrade(this.layer, 55) },
        },
        62: {
            title: "Stronger koopalings",
            description: "Unlock Wings.",
            cost: new Decimal(3e41),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        63: {
            title: "Fake attack",
            description: "SE Endless Clears boosts Wings gain.",
            tooltip: "Softcap starts at 1e15",
            cost: new Decimal(3e43),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.s_expert.points.add(1).max(1)
                let softcap = new Decimal(1e15)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        64: {
            title: "Not at all",
            description: "AP boosts Wing gain.",
            cost: new Decimal(4.6e46),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.achievements.points.max(1).log(10).max(1).log(10)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        65: {
            title: "Koopalings everywhere",
            description: "^100 Normal Endless Clears effect.",
            cost: new Decimal(2e52),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        71: {
            title: "31st Expert Endless upgrade",
            description: "Effect of Lemmy's ball is stronger.",
            cost: new Decimal(1.8e53),
            unlocked() { return hasUpgrade(this.layer, 65) },
        },
        72: {
            title: "Two different designs",
            description: "Unlock Boss Rush Courses and Flaw Courses.",
            cost: new Decimal(4e54),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        73: {
            title: "Bosses sometimes",
            description: "Square Roy's magic effect.",
            cost: new Decimal(5e61),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        74: {
            title: "We need more bosses",
            description: "Unlock a new Boss in Super Expert Endless layer.",
            cost: new Decimal(4.5e76),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        75: {
            title: "We need more bosses^2",
            description: "Unlock a new Boss in Super Expert Endless layer again.",
            cost: new Decimal(1e87),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        // Look in the upgrades docs to see what goes here!
    },
    milestones: {
        0: {
            requirementDescription: "1 Expert Endless Clear",
            effectDescription: "Keep Normal Endless milestones on row 13 reset, passive gain 100% No Damage Easy Clears and triple Normal Endless Clears and One Shot Clears gain.",
            done() { return player.expert.points.gte(1) },
        },
        1: {
            requirementDescription() { return `1 Expert Endless Clear and ${f(1e30)} Normal Endless Clears` },
            effectDescription: "30x Auto-Mario Courses gain.",
            done() { return player.expert.points.gte(1) && player.normal.points.gte(1e30) },
        },
        2: {
            requirementDescription: "2 Expert Endless Clears",
            effectDescription: "Autobuy two Easy Endless buyables and buy max.",
            done() { return player.expert.points.gte(2) },
        },
        3: {
            requirementDescription: "3 Expert Endless Clears",
            effectDescription: "Keep random themes and styles on row 13 reset.",
            done() { return player.expert.points.gte(3) },
        },
        4: {
            requirementDescription: "5 Expert Endless Clears",
            effectDescription() {
                let des = "Passive gain 20% One Shot Clears every second when the SMB3 square goal is rolling. (Stop at 5000% OSC gained)"
                if (hasUpgrade('expert', 12)) des = "Passive gain 20% One Shot Clears every second when the SMB3 square goal is rolling. (Stop at 1000% OSC gained)"
                return des
            },
            done() { return player.expert.points.gte(5) },
        },
        5: {
            requirementDescription: "7 Expert Endless Clears",
            effectDescription: "^10 Normal Endless Clear effect.",
            done() { return player.expert.points.gte(7) },
        },
        6: {
            requirementDescription: "8 Expert Endless Clears",
            effectDescription: "You can buy max Expert Endless Clears.",
            done() { return player.expert.points.gte(8) },
        },
        7: {
            requirementDescription: "Defeat 1 Larry",
            effectDescription: "Passive gain 100% Auto-Mario Courses every second and loss nothing.",
            done() { return player.expert.larry.gte(1) },
        },
        8: {
            requirementDescription() { return `${f(114114)} Expert Endless Clears` },
            effectDescription: "Passive gain 100% Normal Endless Clears every second and auto Toad hex up.",
            done() { return player.expert.points.gte(114114) },
        },
        9: {
            requirementDescription() { return `Get ${f(1000)} Extra Magic` },
            effectDescription: "Autobuy Normal Endless upgrades.",
            done() { return player.expert.magic.gte(1000) },
        },
        10: {
            requirementDescription() { return `${f(1e17)} Expert Endless Clears` },
            effectDescription: "Auto Toad hept up.",
            done() { return player.expert.points.gte(1e17) },
        },
    },
    challenges: {
        11: {
            name: "Larry",
            challengeDescription: "Disable all multipliers to Cleared Courses gain before Expert Endless Challenge layer, CC gain is now based on Expert Endless Clears.",
            goalDescription() { return `${f(700000)} Cleared Courses` },
            completionLimit: new Decimal("1e10000"),
            canComplete: function () {
                return player.points.gte(700000)
            },
            rewardDescription() {
                return "Meet a boss Larry, gain " + format(700000) + " Cleared Courses and complete this challenge to defeat it. "
            },
            rewardEffect() {
                let larryGain = decimalZero
                if (inChallenge(this.layer, 11)) larryGain = player.points.div(700000).max(1).times(3).log(3).pow(3)
                if (player.expert.lemmy_b.gte(1)) larryGain = larryGain.times(expertBossMagicEffect('lemmy'))
                if (hasUpgrade('expert', 33)) larryGain = larryGain.pow(upgradeEffect('expert', 33))
                larryGain = larryGain.times(player.expert.magic.max(1).pow(1.25))
                return larryGain
            },
            rewardDisplay() {
                return `Gain ${formatWhole(challengeEffect(this.layer, 11))} Larry on pressing "Complete" button<br>
                Formula: log<sub>3</sub>((CC/700000)+1)<sup>3</sup>`
            },
            onEnter() {
                player.points = new Decimal(1)
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.magic = new Decimal(0)
            },
            onExit() {
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.minigameMagicPosition = [0, 0, 0]
                player.expert.magic = new Decimal(0)
            },
            onComplete() {
                player.expert.larry = player.expert.larry.add(challengeEffect(this.layer, 11))
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.minigameMagicPosition = [0, 0, 0]
                player.expert.magic = new Decimal(0)
            },
            unlocked() { return hasUpgrade('expert', 13) },
            style: {
                'border-radius': '5%',
                'border-color': '#21f519',
                'width': '320px',
                'min-height': '320px',
            },
        },
        12: {
            name: "Lemmy",
            challengeDescription: "Disable all multipliers to Cleared Courses gain before Expert Endless Challenge layer, CC gain is now based on Expert Endless Clears.",
            goalDescription() { return `${f(1e11)} Cleared Courses` },
            completionLimit: new Decimal("1e10000"),
            canComplete: function () {
                return player.points.gte(1e11)
            },
            rewardDescription() {
                return "Meet a boss Lemmy, gain " + format(1e11) + " Cleared Courses and complete this challenge to defeat it. "
            },
            rewardEffect() {
                let lemmyGain = decimalZero
                if (inChallenge(this.layer, 12)) lemmyGain = player.points.div(1e11).max(1).times(3).log(3).pow(2.8)
                if (hasUpgrade('expert', 33)) lemmyGain = lemmyGain.pow(upgradeEffect('expert', 33))
                lemmyGain = lemmyGain.times(player.expert.magic.max(1).pow(1.25))
                return lemmyGain
            },
            rewardDisplay() {
                return `Gain ${formatWhole(challengeEffect(this.layer, 12))} Lemmy on pressing "Complete" button<br>
                Formula: log<sub>3</sub>((CC/1e11)+1)<sup>2.8</sup>`
            },
            onEnter() {
                player.points = new Decimal(1)
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.magic = new Decimal(0)
            },
            onExit() {
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.minigameMagicPosition = [0, 0, 0]
                player.expert.magic = new Decimal(0)
            },
            onComplete() {
                player.expert.lemmy = player.expert.lemmy.add(challengeEffect(this.layer, 12))
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.minigameMagicPosition = [0, 0, 0]
                player.expert.magic = new Decimal(0)
            },
            unlocked() { return hasUpgrade('expert', 15) },
            style: {
                'border-radius': '5%',
                'border-color': '#fac215',
                'width': '320px',
                'min-height': '320px',
            },
        },
        21: {
            name: "Wendy",
            challengeDescription: "Disable all multipliers to Cleared Courses gain before Expert Endless Challenge layer, CC gain is now based on Expert Endless Clears.",
            goalDescription() { return `${f(2.222e22)} Cleared Courses` },
            completionLimit: new Decimal("1e10000"),
            canComplete: function () {
                return player.points.gte(2.222e22)
            },
            rewardDescription() {
                return "Meet a boss Wendy, gain " + format(2.222e22) + " Cleared Courses and complete this challenge to defeat it. "
            },
            rewardEffect() {
                let wendyGain = decimalZero
                if (inChallenge(this.layer, 21)) wendyGain = player.points.div(2.222e22).max(1).times(4).log(4).pow(2.6)
                if (hasUpgrade('expert', 33)) wendyGain = wendyGain.pow(upgradeEffect('expert', 33))
                wendyGain = wendyGain.times(player.expert.magic.max(1).pow(1.25))
                return wendyGain
            },
            rewardDisplay() {
                return `Gain ${formatWhole(challengeEffect(this.layer, 21))} Wendy on pressing "Complete" button<br>
                Formula: log<sub>4</sub>((CC/2.222e22)+1)<sup>2.6</sup>`
            },
            onEnter() {
                player.points = new Decimal(1)
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.magic = new Decimal(0)
            },
            onExit() {
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.minigameMagicPosition = [0, 0, 0]
                player.expert.magic = new Decimal(0)
            },
            onComplete() {
                player.expert.wendy = player.expert.wendy.add(challengeEffect(this.layer, 21))
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.minigameMagicPosition = [0, 0, 0]
                player.expert.magic = new Decimal(0)
            },
            unlocked() { return hasUpgrade('expert', 24) },
            style: {
                'border-radius': '5%',
                'border-color': '#ff0066',
                'width': '320px',
                'min-height': '320px',
            },
        },
        22: {
            name: "Iggy",
            challengeDescription: "Disable all multipliers to Cleared Courses gain before Expert Endless Challenge layer, CC gain is now based on Expert Endless Clears.",
            goalDescription() { return `${f(5e37)} Cleared Courses` },
            completionLimit: new Decimal("1e10000"),
            canComplete: function () {
                return player.points.gte(5e37)
            },
            rewardDescription() {
                return "Meet a boss Iggy, gain " + format(5e37) + " Cleared Courses and complete this challenge to defeat it. "
            },
            rewardEffect() {
                let iggyGain = decimalZero
                if (inChallenge(this.layer, 22)) iggyGain = player.points.div(5e37).max(1).times(10).log(10).pow(3.15)
                if (hasUpgrade('expert', 33)) iggyGain = iggyGain.pow(upgradeEffect('expert', 33))
                iggyGain = iggyGain.times(player.expert.magic.max(1).pow(1.25))
                if (hasSEendlessMilestone(0)) iggyGain = iggyGain.times(10000)
                return iggyGain
            },
            rewardDisplay() {
                return `Gain ${formatWhole(challengeEffect(this.layer, 22))} Iggy on pressing "Complete" button<br>
                Formula: lg((CC/5e37)+1)<sup>3.15</sup>`
            },
            onEnter() {
                player.points = new Decimal(1)
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.magic = new Decimal(0)
            },
            onExit() {
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.minigameMagicPosition = [0, 0, 0]
                player.expert.magic = new Decimal(0)
            },
            onComplete() {
                player.expert.iggy = player.expert.iggy.add(challengeEffect(this.layer, 22))
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.minigameMagicPosition = [0, 0, 0]
                player.expert.magic = new Decimal(0)
            },
            unlocked() { return hasUpgrade('expert', 35) },
            style: {
                'border-radius': '5%',
                'border-color': '#003ad7',
                'width': '320px',
                'min-height': '320px',
            },
        },
        31: {
            name: "Morton",
            challengeDescription: "Disable all multipliers to Cleared Courses gain before Expert Endless Challenge layer, CC gain is now based on Expert Endless Clears.",
            goalDescription() { return `${f(5e47)} Cleared Courses` },
            completionLimit: new Decimal("1e10000"),
            canComplete: function () {
                return player.points.gte(5e47)
            },
            rewardDescription() {
                return "Meet a boss Morton, gain " + format(5e47) + " Cleared Courses and complete this challenge to defeat it. "
            },
            rewardEffect() {
                let mortonGain = decimalZero
                if (inChallenge(this.layer, 31)) mortonGain = player.points.div(5e47).max(1).times(5).log(5).pow(2.65)
                if (hasUpgrade('expert', 33)) mortonGain = mortonGain.pow(upgradeEffect('expert', 33))
                mortonGain = mortonGain.times(player.expert.magic.max(1).pow(1.25))
                return mortonGain
            },
            rewardDisplay() {
                return `Gain ${formatWhole(challengeEffect(this.layer, 31))} Morton on pressing "Complete" button<br>
                Formula: log<sub>5</sub>((CC/5e47)+1)<sup>2.65</sup>`
            },
            onEnter() {
                player.points = new Decimal(1)
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.magic = new Decimal(0)
            },
            onExit() {
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.minigameMagicPosition = [0, 0, 0]
                player.expert.magic = new Decimal(0)
            },
            onComplete() {
                player.expert.morton = player.expert.morton.add(challengeEffect(this.layer, 31))
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.minigameMagicPosition = [0, 0, 0]
                player.expert.magic = new Decimal(0)
            },
            unlocked() { return hasUpgrade('expert', 42) },
            style: {
                'border-radius': '5%',
                'border-color': '#606060',
                'width': '320px',
                'min-height': '320px',
            },
        },
        32: {
            name: "Roy",
            challengeDescription: "Disable all multipliers to Cleared Courses gain before Expert Endless Challenge layer, CC gain is now based on Expert Endless Clears.",
            goalDescription() { return `${f('1e350')} Cleared Courses` },
            completionLimit: new Decimal("1e10000"),
            canComplete: function () {
                return player.points.gte("1e350")
            },
            rewardDescription() {
                return "Meet a boss Roy, gain " + format("1e350") + " Cleared Courses and complete this challenge to defeat it. "
            },
            rewardEffect() {
                let royGain = decimalZero
                if (inChallenge(this.layer, 32)) royGain = player.points.div("1e350").max(1).times(4.6).log(4.6).pow(1.55)
                if (hasUpgrade('expert', 33)) royGain = royGain.pow(upgradeEffect('expert', 33))
                royGain = royGain.times(player.expert.magic.max(1).pow(1.25))
                return royGain
            },
            rewardDisplay() {
                return `Gain ${formatWhole(challengeEffect(this.layer, 32))} Roy on pressing "Complete" button<br>
                Formula: log<sub>4.6</sub>((CC/1e350)+1)<sup>1.55</sup>`
            },
            onEnter() {
                player.points = new Decimal(1)
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.magic = new Decimal(0)
            },
            onExit() {
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.minigameMagicPosition = [0, 0, 0]
                player.expert.magic = new Decimal(0)
            },
            onComplete() {
                player.expert.roy = player.expert.roy.add(challengeEffect(this.layer, 32))
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.minigameMagicPosition = [0, 0, 0]
                player.expert.magic = new Decimal(0)
            },
            unlocked() { return hasUpgrade('expert', 52) },
            style: {
                'border-radius': '5%',
                'border-color': '#ac009e',
                'width': '320px',
                'min-height': '320px',
            },
        },
        41: {
            name: "Ludwig",
            challengeDescription: "Disable all multipliers to Cleared Courses gain before Expert Endless Challenge layer, CC gain is now based on Expert Endless Clears.",
            goalDescription() { return `${f('1e388')} Cleared Courses` },
            completionLimit: new Decimal("1e10000"),
            canComplete: function () {
                return player.points.gte("1e380")
            },
            rewardDescription() {
                return "Meet a boss Ludwig, gain " + format("1e380") + " Cleared Courses and complete this challenge to defeat it. "
            },
            rewardEffect() {
                let ludwigGain = decimalZero
                if (inChallenge(this.layer, 41)) ludwigGain = player.points.div("1e380").max(1).times(5).log(5).pow(2)
                if (hasUpgrade('expert', 33)) ludwigGain = ludwigGain.pow(upgradeEffect('expert', 33))
                ludwigGain = ludwigGain.times(player.expert.magic.max(1).pow(1.25))
                return ludwigGain
            },
            rewardDisplay() {
                return `Gain ${formatWhole(challengeEffect(this.layer, 41))} Ludwig on pressing "Complete" button<br>
                Formula: log<sub>5</sub>((CC/1e380)+1)<sup>2</sup>`
            },
            onEnter() {
                player.points = new Decimal(1)
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.magic = new Decimal(0)
            },
            onExit() {
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.minigameMagicPosition = [0, 0, 0]
                player.expert.magic = new Decimal(0)
            },
            onComplete() {
                player.expert.ludwig = player.expert.ludwig.add(challengeEffect(this.layer, 41))
                player.expert.inChallengeTime = new Decimal(0)
                player.expert.minigameMagicPosition = [0, 0, 0]
                player.expert.magic = new Decimal(0)
            },
            unlocked() { return hasUpgrade('expert', 54) },
            style: {
                'border-radius': '5%',
                'border-color': '#07c6d9',
                'width': '320px',
                'min-height': '320px',
            },
        },
    },

    canBuyMax() { return hasMilestone('expert', 6) },
    magicMult() {
        let mult = new Decimal(1)
        let wing = player.expert.wing
        if (hasUpgrade('expert', 62)) mult = mult.times(Decimal.pow(10, wing.max(0).add(1).log(10).pow(0.9)))
        return mult
    },
    magicGeneration: {
        larry() {
            let mult = tmp.expert.magicMult
            let larry = player.expert.larry
            return larry.times(mult)
        },
        lemmy() {
            let mult = tmp.expert.magicMult
            let lemmy = player.expert.lemmy
            return lemmy.times(mult)
        },
        wendy() {
            let mult = tmp.expert.magicMult
            let wendy = player.expert.wendy
            return wendy.times(mult)
        },
        iggy() {
            let mult = tmp.expert.magicMult
            let iggy = player.expert.iggy
            return iggy.times(mult)
        },
        morton() {
            let mult = tmp.expert.magicMult
            let morton = player.expert.morton
            return morton.times(mult)
        },
        roy() {
            let mult = tmp.expert.magicMult
            let roy = player.expert.roy
            return roy.times(mult)
        },
        ludwig() {
            let mult = tmp.expert.magicMult
            let ludwig = player.expert.ludwig
            return ludwig.times(mult)
        },
        bossrush() {
            let mult = new Decimal(1)
            if (hasSEendlessUpgrade(13)) mult = mult.times(10)
            if (hasSEendlessUpgrade(14)) mult = mult.times(upgradeEffect('s_expert', 14))
            if (hasSEendlessUpgrade(22)) mult = mult.times(upgradeEffect('s_expert', 22))
            if (hasMilestone('versus', 4)) mult = mult.times(1000)
            if (hasUpgrade('themed', 14)) mult = mult.times(upgradeEffect('themed', 14))
            if (hasUpgrade('themed', 15)) mult = mult.times(1e20)
            if (player.expert.canGainBRCAndFlaw)
                return mult
            else return decimalZero
        },
        flaw() {
            let mult = new Decimal(1)
            if (hasSEendlessUpgrade(13)) mult = mult.times(2)
            if (hasMilestone('versus', 4)) mult = mult.times(10)
            if (hasMilestone('themed', 5)) mult = d(0)
            if (player.expert.canGainBRCAndFlaw)
                return mult
            else return decimalZero
        },
    },
    magicEffect: {
        larry() {
            let larry = player.expert.larry_m
            let eff = larry.max(1).pow(3)
            let r = new Decimal(1.8)
            if (hasUpgrade('expert', 23)) r = new Decimal(3)
            if (larry.gte(1000)) eff = eff.div(1e9).root(larry.max(10).log(10).root(r)).times(1e9)
            if (hasUpgrade('expert', 44)) eff = eff.pow(upgradeEffect('expert', 44))
            return eff
        },
        lemmy() {
            let lemmy = player.expert.lemmy_b
            let eff = lemmy.max(1).pow(0.75)
            let r = new Decimal(1.8)
            if (hasUpgrade('expert', 71)) r = new Decimal(3.6)
            if (lemmy.gte(10000)) eff = eff.div(1000).root(lemmy.max(10).log(10).root(r)).times(1000)
            return eff
        },
        wendy() {
            let wendy = player.expert.wendy_m
            let f1 = wendy.max(1).pow(2)
            let eff = Decimal.pow(10, f1.max(1).log(10).add(1).pow(0.6))
            return eff
        },
        iggy() {
            let iggy = player.expert.iggy_m
            let beforeSC = Decimal.pow(1.1, iggy.max(0))
            let SC = new Decimal(1e50)
            let afterSC = beforeSC.div(SC).log(2).add(1).pow(5).times(SC)
            if (hasUpgrade('coop', 43)) afterSC = afterSC.pow(1.25)
            let eff = new Decimal(0)
            if (beforeSC.gte(SC)) eff = afterSC
            else eff = beforeSC
            return eff
        },
        morton() {
            let morton = player.expert.morton_m
            let eff = morton.max(0).add(1).pow(7)
            if (hasUpgrade('coop', 42)) eff = eff.pow(100)
            return eff
        },
        roy() {
            let roy = player.expert.roy_m
            let eff = roy.max(0).add(10).log(10).pow(2)
            if (hasUpgrade('expert', 73)) eff = eff.pow(2)
            if (hasUpgrade('s_expert', 32)) eff = eff.pow(upgradeEffect('s_expert', 32))
            return eff
        },
        ludwig() {
            let ludwig = player.expert.ludwig_m
            let eff = ludwig.max(0).add(1).log(100000).root(3).min(4)
            return eff
        },
        bossrush() {
            let br = player.expert.boss_rush
            let eff = br.max(1).pow(10)
            return eff
        },
        flaw() {
            let flaw = player.expert.flaw
            let eff = Decimal.pow(1.25, flaw.max(0))
            return eff
        },
    },
    clickables: {
        rows: 5,
        cols: 5,
        11: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        12: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        13: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        14: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        15: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        21: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        22: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        23: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        24: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        25: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        31: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        32: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        33: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        34: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        35: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        41: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        42: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        43: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if ((pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        44: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        45: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        51: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        52: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        53: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        54: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        55: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return true },
            onClick() {
                let pos = player.expert.minigameMagicPosition
                if (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id))
                    player.expert.magic = player.expert.magic.add(player.expert.magicBoost)
            },
            unlocked() { return true },
            style() {
                let pos = player.expert.minigameMagicPosition
                if (inChallenge('expert', 11) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "rgb(33,245,25)",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 12) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#fac215",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 21) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ff0066",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 22) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#003ad7",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 31) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#606060",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 32) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#ac009e",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else if (inChallenge('expert', 41) && (pos[0] == expertMinigameID(this.id) || pos[1] == expertMinigameID(this.id) || pos[2] == expertMinigameID(this.id)))
                    return {
                        "background-color": "#07c6d9",
                        "border-radius": "100%", "min-height": "30px", "width": "30px"
                    }
                else return {
                    "background-color": "rgba(0,0,0,0)", "border-color": "rgba(0,0,0,0)",
                    "border-radius": "100%", "min-height": "30px", "width": "30px"
                }
            },
        },
        61: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "Reset your BRC and Flaw amount"
                return d
            },
            canClick() { return true },
            onClick() {
                player.expert.boss_rush = new Decimal(0),
                    player.expert.flaw = new Decimal(0)
            },
            unlocked() { return true },
            style() {
                return {
                    'border-radius': '5%',
                    'min-height': '50px',
                    'width': '150px',
                    'font-size': '15px'
                }
            },
        },
        62: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                if (player.expert.canGainBRCAndFlaw) d = "Disable BRC and Flaw gain"
                else d = "Enable BRC and Flaw gain"
                return d
            },
            canClick() { return true },
            onClick() {
                if (player.expert.canGainBRCAndFlaw) player.expert.canGainBRCAndFlaw = false
                else if (player.expert.canGainBRCAndFlaw == false) player.expert.canGainBRCAndFlaw = true
            },
            unlocked() { return true },
            style() {
                return {
                    'border-radius': '5%',
                    'min-height': '50px',
                    'width': '150px',
                    'font-size': '15px'
                }
            },
        },
    },
    update(diff) {
        let tick = new Decimal(0.05)
        let larry = player.expert.larry
        let lemmy = player.expert.lemmy
        let wendy = player.expert.wendy
        let iggy = player.expert.iggy
        let morton = player.expert.morton
        let roy = player.expert.roy
        let ludwig = player.expert.ludwig
        player.expert.heptboss_total = larry.add(lemmy).add(wendy).add(iggy).add(morton).add(roy).add(ludwig)
        player.expert.larry_m = player.expert.larry_m.add(tmp.expert.magicGeneration.larry.times(diff))
        player.expert.lemmy_b = player.expert.lemmy_b.add(tmp.expert.magicGeneration.lemmy.times(diff))
        player.expert.wendy_m = player.expert.wendy_m.add(tmp.expert.magicGeneration.wendy.times(diff))
        player.expert.iggy_m = player.expert.iggy_m.add(tmp.expert.magicGeneration.iggy.times(diff))
        player.expert.morton_m = player.expert.morton_m.add(tmp.expert.magicGeneration.morton.times(diff))
        player.expert.roy_m = player.expert.roy_m.add(tmp.expert.magicGeneration.roy.times(diff))
        player.expert.ludwig_m = player.expert.ludwig_m.add(tmp.expert.magicGeneration.ludwig.times(diff))

        if (inExpertBossChallenge()) player.expert.inChallengeTime = player.expert.inChallengeTime.add(1),
            expertBossMinigameMagicCatch()

        if (player.expert.magic.gte(1)) player.expert.magic = player.expert.magic.times(0.999)
        if (player.expert.magic.lt(1)) player.expert.magic = new Decimal(0)

        if (hasUpgrade('expert', 72)) player.expert.boss_rush = player.expert.boss_rush.add(expertBossMagicGeneration('bossrush').times(diff)),
            player.expert.flaw = player.expert.flaw.add(expertBossMagicGeneration('flaw').times(diff))
        if (player.expert.flaw.gte(100)) player.expert.flaw = d(0),
            player.expert.boss_rush = d(0)

        if ((hasSEendlessMilestone(8) && inChallenge('expert', 11))
            || (hasSEendlessMilestone(9) && inChallenge('expert', 12))
            || (hasSEendlessMilestone(10) && inChallenge('expert', 21))
            || (hasSEendlessMilestone(11) && inChallenge('expert', 22))
            || (hasSEendlessMilestone(12) && inChallenge('expert', 31))
            || (hasSEendlessMilestone(13) && inChallenge('expert', 32))
            || (hasSEendlessMilestone(14) && inChallenge('expert', 41))
            || (hasMilestone('versus', 5))) player.expert.magic = player.expert.magic.add(player.expert.magicBoost.div(2))

        if (hasMilestone('versus', 5)) {
            if (inExpertBossChallenge() && player.points.gt(player.expert.bestCCinChallenge)) player.expert.bestCCinChallenge = player.points

            let larryGain = player.expert.bestCCinChallenge.div(700000).max(1).times(3).log(3).pow(3)
            if (player.expert.lemmy_b.gte(1)) larryGain = larryGain.times(expertBossMagicEffect('lemmy'))
            if (hasUpgrade('expert', 33)) larryGain = larryGain.pow(upgradeEffect('expert', 33))
            larryGain = larryGain.times(player.expert.magic.max(1).pow(1.25))
            player.expert.larry = player.expert.larry.add(larryGain.div(10).times(diff))

            let lemmyGain = player.expert.bestCCinChallenge.div(1e11).max(1).times(3).log(3).pow(2.8)
            if (hasUpgrade('expert', 33)) lemmyGain = lemmyGain.pow(upgradeEffect('expert', 33))
            lemmyGain = lemmyGain.times(player.expert.magic.max(1).pow(1.25))
            player.expert.lemmy = player.expert.lemmy.add(lemmyGain.div(10).times(diff))

            let wendyGain = player.expert.bestCCinChallenge.div(2.222e22).max(1).times(4).log(4).pow(2.6)
            if (hasUpgrade('expert', 33)) wendyGain = wendyGain.pow(upgradeEffect('expert', 33))
            wendyGain = wendyGain.times(player.expert.magic.max(1).pow(1.25))
            player.expert.wendy = player.expert.wendy.add(wendyGain.div(10).times(diff))

            let iggyGain = player.expert.bestCCinChallenge.div(5e37).max(1).times(10).log(10).pow(3.15)
            if (hasUpgrade('expert', 33)) iggyGain = iggyGain.pow(upgradeEffect('expert', 33))
            iggyGain = iggyGain.times(player.expert.magic.max(1).pow(1.25))
            if (hasSEendlessMilestone(0)) iggyGain = iggyGain.times(10000)
            player.expert.iggy = player.expert.iggy.add(iggyGain.div(10).times(diff))

            let mortonGain = player.expert.bestCCinChallenge.div(5e47).max(1).times(5).log(5).pow(2.65)
            if (hasUpgrade('expert', 33)) mortonGain = mortonGain.pow(upgradeEffect('expert', 33))
            mortonGain = mortonGain.times(player.expert.magic.max(1).pow(1.25))
            player.expert.morton = player.expert.morton.add(mortonGain.div(10).times(diff))

            let royGain = player.expert.bestCCinChallenge.div("1e350").max(1).times(4.6).log(4.6).pow(1.55)
            if (hasUpgrade('expert', 33)) royGain = royGain.pow(upgradeEffect('expert', 33))
            royGain = royGain.times(player.expert.magic.max(1).pow(1.25))
            player.expert.roy = player.expert.roy.add(royGain.div(10).times(diff))

            let ludwigGain = player.expert.bestCCinChallenge.div("1e380").max(1).times(5).log(5).pow(2)
            if (hasUpgrade('expert', 33)) ludwigGain = ludwigGain.pow(upgradeEffect('expert', 33))
            ludwigGain = ludwigGain.times(player.expert.magic.max(1).pow(1.25))
            player.expert.ludwig = player.expert.ludwig.add(ludwigGain.div(10).times(diff))
        }

        if (hasMilestone('themed', 6)) player.expert.wing = player.expert.wing.add(tmp.s_expert.wingGain.times(diff))

        if (hasMilestone('versus', 15)) {
            let sim = new Decimal(0)
            sim = player.expert.points
            if (hasUpgrade('expert', 14)) sim = sim.times(upgradeEffect('expert', 14))
            if (hasUpgrade('expert', 31)) sim = sim.times(player.expert.simulateCCinChallenge.add(1).root(5))
            if (hasUpgrade('expert', 42)) sim = sim.times(expertBossMagicEffect('morton'))
            if (hasSEendlessMilestone(1)) sim = sim.pow(milestoneEffect('s_expert', 1))
            if (hasUpgrade('super_acorn', 112)) sim = sim.times(upgradeEffect('super_acorn', 112))
            player.expert.simulateCCinChallenge = player.expert.simulateCCinChallenge.add(sim.times(diff))
            if (player.expert.simulateCCinChallenge.gt(player.expert.bestCCinChallenge)) player.expert.bestCCinChallenge = player.expert.simulateCCinChallenge
        }
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You have ` + formatWhole(player.normal.points) + ` Normal Endless Clears`],
        ["display-text", () => `Your record of Expert Endless Clears is ` + formatWhole(player.expert.best)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">There are 4 different difficulties of endless challenges. Expert endless is the third difficulty.<br>When you start a new run, you would have 15 lives. It requires more skills for making lives to the max. More speedrun courses, kaizo courses and hot garbage courses appear in this difficulty. It also requires a bit of luck.`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "Koopaling Bosses": {
                unlocked() { return hasUpgrade('expert', 13) },
                content: [
                    ["blank", "15px"],
                    ["microtabs", "koopalings"],
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #be924f, #5f4927)',
                        'border-color': '#be924f',
                        'color': 'black',
                    }
                },
            },
        },
        koopalings: {
            "Battles": {
                unlocked() { return hasUpgrade('expert', 13) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        if (hasUpgrade('expert', 62))
                            return `Your best amount Cleared Courses in Expert Boss challenges is ${formatWhole(player.expert.bestCCinChallenge)}`
                    }
                    ],
                    ["display-text", function () {
                        if (hasUpgrade('expert', 62))
                            return "You have <h2 style='color: #ffffff; text-shadow: 0 0 10px #ffffff'>" + formatWhole(player.expert.wing) + "</h2> Wings, multiplying all 7 koopalings' magic (balls) production by <h2 style='color: #ffffff; text-shadow: 0 0 10px #ffffff'>" + format(tmp.expert.magicMult) + "x</h2>"
                    }
                    ],
                    ["display-text", function () {
                        if (hasUpgrade('expert', 62))
                            return "To get Wings, you should difficulty max for gaining Super Expert Endless Clears in a Boss Challenge<br>You can now gain " + formatWhole(tmp.s_expert.wingGain) + " Wings this time (Based on Expert Endless Clears)"
                    }
                    ],
                    ["display-text", function () {
                        return "You defeated <h2 style='color: rgb(33,245,25); text-shadow: 0 0 10px rgb(33,245,25)'>" + formatWhole(player.expert.larry) + "</h2> Larry, generating <h2 style='color: rgb(33,245,25); text-shadow: 0 0 10px rgb(33,245,25)'>" + format(expertBossMagicGeneration("larry")) + "</h2> Larry's magic every second"
                    }
                    ],
                    ["display-text", function () {
                        return "You defeated <h2 style='color: #fac215; text-shadow: 0 0 10px #fac215'>" + formatWhole(player.expert.lemmy) + "</h2> Lemmy, generating <h2 style='color: #fac215; text-shadow: 0 0 10px #fac215'>" + format(expertBossMagicGeneration("lemmy")) + "</h2> Lemmy's balls every second"
                    }
                    ],
                    ["display-text", function () {
                        return "You defeated <h2 style='color: #ff0066; text-shadow: 0 0 10px #ff0066'>" + formatWhole(player.expert.wendy) + "</h2> Wendy, generating <h2 style='color: #ff0066; text-shadow: 0 0 10px #ff0066'>" + format(expertBossMagicGeneration("wendy")) + "</h2> Wendy's magic every second"
                    }
                    ],
                    ["display-text", function () {
                        return "You defeated <h2 style='color: #003ad7; text-shadow: 0 0 10px #003ad7'>" + formatWhole(player.expert.iggy) + "</h2> Iggy, generating <h2 style='color: #003ad7; text-shadow: 0 0 10px #003ad7'>" + format(expertBossMagicGeneration("iggy")) + "</h2> Iggy's magic every second"
                    }
                    ],
                    ["display-text", function () {
                        return "You defeated <h2 style='color: #606060; text-shadow: 0 0 10px #606060'>" + formatWhole(player.expert.morton) + "</h2> Morton, generating <h2 style='color: #606060; text-shadow: 0 0 10px #606060'>" + format(expertBossMagicGeneration("morton")) + "</h2> Morton's magic every second"
                    }
                    ],
                    ["display-text", function () {
                        return "You defeated <h2 style='color: #ac009e; text-shadow: 0 0 10px #ac009e'>" + formatWhole(player.expert.roy) + "</h2> Roy, generating <h2 style='color: #ac009e; text-shadow: 0 0 10px #ac009e'>" + format(expertBossMagicGeneration("roy")) + "</h2> Roy's magic every second"
                    }
                    ],
                    ["display-text", function () {
                        return "You defeated <h2 style='color: #07c6d9; text-shadow: 0 0 10px #07c6d9'>" + formatWhole(player.expert.ludwig) + "</h2> Ludwig, generating <h2 style='color: #07c6d9; text-shadow: 0 0 10px #07c6d9'>" + format(expertBossMagicGeneration("ludwig")) + "</h2> Ludwig's magic every second"
                    }
                    ],
                    "challenges",
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #be924f, #5f4927)',
                        'border-color': '#be924f',
                        'color': 'black',
                    }
                },
            },
            "Rewards": {
                unlocked() { return hasUpgrade('expert', 13) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return "You have <h2 style='color: rgb(33,245,25); text-shadow: 0 0 10px rgb(33,245,25)'>" + formatWhole(player.expert.larry_m) + "</h2> Larry's magic, multiplying Normal Endless Clears gain by <h2 style='color: rgb(33,245,25); text-shadow: 0 0 10px rgb(33,245,25)'>" + format(expertBossMagicEffect("larry")) + "x</h2>"
                    }
                    ],
                    ["display-text", function () {
                        return "You have <h2 style='color: #fac215; text-shadow: 0 0 10px #fac215'>" + formatWhole(player.expert.lemmy_b) + "</h2> Lemmy's balls, multiplying Larry gain by <h2 style='color: #fac215; text-shadow: 0 0 10px #fac215'>" + format(expertBossMagicEffect("lemmy")) + "x</h2>"
                    }
                    ],
                    ["display-text", function () {
                        return "You have <h2 style='color: #ff0066; text-shadow: 0 0 10px #ff0066'>" + formatWhole(player.expert.wendy_m) + "</h2> Wendy's magic, multiplying Auto-Mario Courses gain by <h2 style='color: #ff0066; text-shadow: 0 0 10px #ff0066'>" + format(expertBossMagicEffect("wendy")) + "x</h2>"
                    }
                    ],
                    ["display-text", function () {
                        let t = "You have <h2 style='color: #003ad7; text-shadow: 0 0 10px #003ad7'>" + formatWhole(player.expert.iggy_m) + "</h2> Iggy's magic, dividing Expert Endless Clear cost by <h2 style='color: #003ad7; text-shadow: 0 0 10px #003ad7'>/" + format(expertBossMagicEffect("iggy")) + "</h2>"
                        if (expertBossMagicEffect('iggy').gte(1e50)) t = t + " (softcapped)"
                        return t
                    }
                    ],
                    ["display-text", function () {
                        return "You have <h2 style='color: #606060; text-shadow: 0 0 10px #606060'>" + formatWhole(player.expert.morton_m) + "</h2> Morton's magic, multiplying Cleared Courses gain in Expert Endless Boss challenges by <h2 style='color: #606060; text-shadow: 0 0 10px #606060'>" + format(expertBossMagicEffect("morton")) + "x</h2>"
                    }
                    ],
                    ["display-text", function () {
                        return "You have <h2 style='color: #ac009e; text-shadow: 0 0 10px #ac009e'>" + formatWhole(player.expert.roy_m) + "</h2> Roy's magic, multiplying Extra Magic gain by <h2 style='color: #ac009e; text-shadow: 0 0 10px #ac009e'>" + format(expertBossMagicEffect("roy")) + "x</h2>"
                    }
                    ],
                    ["display-text", function () {
                        return "You have <h2 style='color: #07c6d9; text-shadow: 0 0 10px #07c6d9'>" + formatWhole(player.expert.ludwig_m) + "</h2> Ludwig's magic, unlocking <h2 style='color: #07c6d9; text-shadow: 0 0 10px #07c6d9'>" + formatWhole(expertBossMagicEffect("ludwig").floor()) + " </h2> more overpower milestone upgrade. Next unlock progress: <h2 style='color: #07c6d9; text-shadow: 0 0 10px #07c6d9'>" + formatPercent(expertBossMagicEffect("ludwig").toNumber() % 1) + "</h2> (Max 4 unlocks)"
                    }
                    ],
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #be924f, #5f4927)',
                        'border-color': '#be924f',
                        'color': 'black',
                    }
                },
            },
            "Minigames": {
                unlocked() { return hasAchievement('achievements', 185) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return "Catch Bosses' magic (or Lemmy's balls) to gain Extra magic, it can provide a boost to corresponding Boss gain in a boss challenge."
                    }
                    ],
                    ["display-text", function () {
                        let exp = ""
                        if (hasUpgrade('expert', 33)) exp = "powering corresponding Bosses gain in your current challenge by <h2 style='color: #be924f; text-shadow: 0 0 10px #be924f'>^" + format(upgradeEffect('expert', 33)) + "</h2> then"
                        else exp = ""
                        let boss = "corresponding Bosses gain in your current challenge"
                        if (hasUpgrade('expert', 33)) boss = "it gain"
                        else boss = "corresponding Bosses gain in your current challenge"
                        let dis = "You have <h2 style='color: #be924f; text-shadow: 0 0 10px #be924f'>" + formatWhole(player.expert.magic) + "</h2> Extra Magic, " + exp + " multiplying " + boss + " by <h2 style='color: #be924f; text-shadow: 0 0 10px #be924f'>" + format(player.expert.magic.max(1).pow(1.25)) + "x</h2><br>You can only gain Extra Magic in Boss challenges in Expert Endless layer."
                        return dis
                    }
                    ],
                    ["display-text", function () {
                        return `You gain ${formatWhole(player.expert.magicBoost)} Extra Magic per every catch`
                    }
                    ],
                    ["display-text", function () {
                        return "You loss 0.1% Extra Magic every tick (1 tick = 0.05s)"
                    }
                    ],
                    "blank",
                    ["clickables", [1]],
                    "blank",
                    ["clickables", [2]],
                    "blank",
                    ["clickables", [3]],
                    "blank",
                    ["clickables", [4]],
                    "blank",
                    ["clickables", [5]],
                    "blank",
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #be924f, #5f4927)',
                        'border-color': '#be924f',
                        'color': 'black',
                    }
                },
            },
            "Boss Rush and Flaw": {
                unlocked() { return hasUpgrade('expert', 72) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return "You have cleared <h2 style='color: #be924f; text-shadow: 0 0 10px #be924f'>" + formatWhole(player.expert.boss_rush) + "</h2> Boss Rush Courses in Expert Endless (+" + format(expertBossMagicGeneration('bossrush')) + "/sec), multiplying Wing gain by <h2 style='color: #be924f; text-shadow: 0 0 10px #be924f'>" + format(expertBossMagicEffect('bossrush')) + "x</h2>"
                    }
                    ],
                    ["display-text", function () {
                        return "But you also have <h2 style='color: #be924f; text-shadow: 0 0 10px #be924f'>" + formatWhole(player.expert.flaw) + "</h2> Flaw (+" + format(expertBossMagicGeneration('flaw')) + "/sec), dividing Wing gain by <h2 style='color: #be924f; text-shadow: 0 0 10px #be924f'>/" + format(expertBossMagicEffect('flaw')) + "</h2>"
                    }
                    ],
                    "blank",
                    ["display-text", function () {
                        return "If your flaw is over 100, it'll reset your BRC and flaw mandatorily"
                    }
                    ],
                    "blank",
                    ["clickables", [6]],
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #be924f, #5f4927)',
                        'border-color': '#be924f',
                        'color': 'black',
                    }
                },
            },
        },
    },
})
// 第二十七层：超难耐力挑战
function hasSEendlessUpgrade(id) {
    return hasUpgrade('s_expert', id)
}
function hasSEendlessMilestone(id) {
    return hasMilestone('s_expert', id)
}
function switchAttackMode() {
    if (player.s_expert.AttackMode == 1) return player.s_expert.AttackMode = 0,
        player.s_expert.cooldownSwitching = d(30)
    if (player.s_expert.AttackMode == 0) return player.s_expert.AttackMode = 1,
        player.s_expert.cooldownSwitching = d(30) //0对应踩，1对应打火
}
addLayer("s_expert", {
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            cooldown: new Decimal(0),
            boom_boom: new Decimal(0),
            poom_poom: new Decimal(0),
            healthBoss: {
                boom_boom: [d(3), d(5)],
                poom_poom: [d(3), d(5)],
            }, //3段血，每段5个火球
            cooldownBoss: {
                boom_boom: new Decimal(3),
                poom_poom: new Decimal(4),
            },
            resets: new Decimal(0),
            bowser: new Decimal(0),
            super_skill: new Decimal(0),
            lava: new Decimal(0),
            lavacap: new Decimal(300),
            lavaSpendInput: new Decimal(0),
            lavaSpending: false,
            poison: new Decimal(0),
            poisoncap: new Decimal(300),
            AttackMode: 0,
            cooldownSwitching: d(30),
            shot_period: d(1),
            pow_block: d(0),
            pow_block_cap: d(60),
        }
    },

    color: "#6A4FAE",                       // The color for this layer, which affects many elements.
    resource: "Super Expert Endless Clears",            // The name of this layer's main prestige resource.
    row: 13,                                 // The row this layer is on (0 is the first row).
    position: 0,
    branches: ['expert'],
    symbol: "S.E.",

    baseResource: "Expert Endless Clears",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.expert.points },  // A function to return the current amount of baseResource.

    requires: new Decimal(1.5e25),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.2,                          // "normal" prestige gain is (currency^exponent).
    base: new Decimal(60),

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let mult = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        if (hasUpgrade('super_acorn', 113)) mult = mult.times(upgradeEffect('super_acorn', 113))
        if (hasSEendlessUpgrade(15) && player.s_expert.lavaSpending) mult = mult.times(upgradeEffect('s_expert', 15).max(1))
        if (hasMilestone('coop', 2)) mult = mult.times(5)
        if (hasUpgrade('coop', 13)) mult = mult.times(upgradeEffect('coop', 13))
        if (inChallenge('coop', 11)) mult = mult.div(Decimal.pow(1000, player.s_expert.resets.max(0)))
        if (hasUpgrade('versus', 232)) mult = mult.times(upgradeEffect('versus', 232))
        if (hasUpgrade('versus', 233)) mult = mult.times(1e40)
        return mult
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },

    canReset() {
        return (player.expert.points.gte(1.5e25) && player.s_expert.cooldown.eq(0))
    },
    onPrestige() {
        let cooldown = d(60)
        let resetsGain = d(0)
        if (inChallenge('coop', 11)) resetsGain = d(1)
        if (hasMilestone('coop', 1)) cooldown = d(10)
        if (inExpertBossChallenge() && hasUpgrade('expert', 62))
            return player.s_expert.cooldown = cooldown,
                player.expert.points = new Decimal(0),
                player.expert.best = new Decimal(0),
                player.expert.wing = player.expert.wing.add(tmp.s_expert.wingGain),
                player.s_expert.resets = player.s_expert.resets.add(resetsGain)
        else return player.s_expert.cooldown = cooldown,
            player.expert.points = new Decimal(0),
            player.expert.best = new Decimal(0),
            player.s_expert.resets = player.s_expert.resets.add(resetsGain)
    },
    resetDescription() {
        return "Difficulty max for "
    },
    doReset(resettingLayer) {
        if (layers[resettingLayer].row == 14) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('coop', 0)) {
                kept.push("milestones")
            }
            if (hasMilestone('versus', 3)) {
                kept.push("AttackMode")
            }
            if (hasMilestone('themed', 6)) {
                kept.push("lavaSpending")
            }
            kept.push("pow_block")
            layerDataReset(this.layer, kept)
        }
        else if (layers[resettingLayer].row >= 15) return undefined
    },
    autoUpgrade() {
        return hasMilestone('versus', 2)
    },

    passiveGeneration() {
        if (player.versus.skill.gte(3141592)) return 0.1
    },

    hotkeys: [
        { key: "S", description: "Shift+S: Reset for Super Expert Endless", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],
    layerShown() { return hasNormalAchievement(192) },          // Returns a bool for if this layer's node should be visible in the tree.

    upgrades: {
        11: {
            title: "Dangerous journey",
            description: "588538x Wing gain.",
            currencyDisplayName: "Wings",
            currencyInternalName: "wing",
            currencyLayer: "expert",
            cost: new Decimal(100000000),
            unlocked() { return hasUpgrade('expert', 62) },
        },
        12: {
            title: "Skip skip skip",
            description: "Record of SE Endless Clears powers Normal Endless Clears effect.",
            cost: new Decimal(1.5e9),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.s_expert.best.max(1).root(8)
                return eff
            },
            effectDisplay() { return "^" + format(upgradeEffect(this.layer, this.id)) },
        },
        13: {
            title: "Meet something...",
            description: "10x BRC gain but double Flaw gain.",
            currencyDisplayName: "Cleared Courses",
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee6.9e19"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        14: {
            title: "Tidal waves",
            description: "Flaw provides a weak effect to BRC gain.",
            cost: new Decimal(5e10),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.expert.flaw.max(1).root(2.25)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        15: {
            title: "I'm burning!",
            description: "Unlock lava.",
            cost: new Decimal(3e11),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let LSI = d(0)
                let lava = player.s_expert.lava
                let inp = player.s_expert.lavaSpendInput
                let rightside = LSI.max(1).times(10)
                if (!(isDNaN(inp) || isDInfinity(inp) || inp.lt(0) || inp.gt(lava.div(10))))
                    LSI = player.s_expert.lavaSpendInput
                let logbase = d(2)
                let powbase1 = d(2.5)
                let powbase1inc = d(2)
                if (hasSEendlessUpgrade(25)) logbase = logbase.sub(upgradeEffect('s_expert', 25))
                if (hasSEendlessUpgrade(33)) powbase1 = d(3)
                if (hasUpgrade('coop', 12)) powbase1 = powbase1.add(0.5)
                if (hasMilestone('versus', 0)) powbase1 = powbase1.add(0.35)
                if (hasUpgrade('coop', 23)) powbase1 = powbase1.add(buyableEffect('coop', 11))

                if (hasUpgrade('coop', 41)) powbase1inc = powbase1inc.add(0.5)

                if (inChallenge('coop', 11)) powbase1 = d(powbase1inc)

                if (hasUpgrade('versus', 261)) rightside = d(1)
                logbase = logbase.max(1.1)
                let eff = LSI.max(1).log(logbase).add(1).pow(powbase1).times(lava.div(rightside).max(1).pow(1))
                return eff
            },
        },
        21: {
            title: "Not so invincible",
            description: "Lava effect^5 miltiplies Wing gain. (Doesn't require spending lava)",
            cost: new Decimal(3e13),
            unlocked() { return hasUpgrade(this.layer, 15) },
            effect() {
                let eff = upgradeEffect('s_expert', 15).pow(5)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        22: {
            title: "1100 degree celsius",
            description: "Lava effect^0.7 miltiplies BRC gain. (Doesn't require spending lava)",
            cost: new Decimal(1e14),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = upgradeEffect('s_expert', 15).pow(0.7)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        23: {
            title: "Grape juice",
            description: "Unlock poison.",
            cost: new Decimal(6e16),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        24: {
            title: "Purple acid",
            description: "Unlock a new way to beat Boom Booms automatically.",
            currencyDisplayName: "Poison",
            currencyInternalName: "poison",
            currencyLayer: "s_expert",
            cost: new Decimal(33),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        25: {
            title: "Raising",
            description: "Poison makes Lava effect formula better. (hardcap at -0.9)",
            currencyDisplayName: "Poison",
            currencyInternalName: "poison",
            currencyLayer: "s_expert",
            cost: new Decimal(150),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.s_expert.poison.max(0).root(2).div(24).min(0.9)
                return eff
            },
            effectDisplay() { return "-" + format(upgradeEffect(this.layer, this.id)) + " to log base" },
        },
        31: {
            title: "Grape cheep cheeps",
            description: "Unlock a poison effect.",
            cost: new Decimal(3e20),
            unlocked() { return hasUpgrade(this.layer, 25) },
            effect() {
                let eff = player.s_expert.poison.max(2).ssqrt().pow(1.5)
                if (hasSEendlessUpgrade(45)) eff = eff.pow(2)
                if (hasMilestone('versus', 2)) eff = eff.pow(1.5)
                return eff
            },
        },
        32: {
            title: "Wing + huge + boss room",
            description: "Roy's magic effect is powered based on its magic.",
            cost: new Decimal(9.999e20),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.expert.roy_m.max(1).ssqrt().add(10).log(10)
                return eff
            },
            effectDisplay() { return "^" + format(upgradeEffect(this.layer, this.id)) },
        },
        33: {
            title: "Fire bubbles",
            description: "Lava effect formula is better. The left powerer is increased to 3.",
            cost: new Decimal(2e22),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        34: {
            title: "Poison ball",
            description: "Double lava gain, 4x Poison gain.",
            cost: new Decimal(1e24),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        35: {
            title: "Network play",
            description: "Unlock a new layer on row 15.",
            currencyDisplayName: "Lava",
            currencyInternalName: "lava",
            currencyLayer: "s_expert",
            cost: new Decimal(3500),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        41: {
            title: "Lava tsunami",
            description: "5x Lava cap.",
            currencyDisplayName: "Lava",
            currencyInternalName: "lava",
            currencyLayer: "s_expert",
            cost: new Decimal(8000),
            unlocked() { return hasUpgrade(this.layer, 35) },
        },
        42: {
            title: "Glitched 1UPs",
            description: "OoM^3s of CC multiplies Mario gain.",
            cost: new Decimal(3e27),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.points.max("ee10").log(10).log(10).log(10)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        43: {
            title: "Midair box jumps",
            description: "Normal Endless Clears^10,000 powers Super Hammer hardcaps.",
            cost: new Decimal(3e27),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.normal.points.max(1).pow(10000)
                return eff
            },
            effectDisplay() { return "^" + format(upgradeEffect(this.layer, this.id)) },
        },
        44: {
            title: "The true endless grinder",
            description: "+0.1 to 'Icxena challenging' Auto-Mario gain base.",
            cost: new Decimal(1e34),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        45: {
            title: "Endless champion",
            description: "Square 1st Poison effect, 1st Co-op upgrade also affacts Boss gain in shooting mode.",
            cost: new Decimal(2e36),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        // Look in the upgrades docs to see what goes here!
    },
    milestones: {
        0: {
            requirementDescription: "1 Super Expert Endless Clear",
            effectDescription() { return `${f(10000)}x Iggy gain. (After Extra Magic effect)` },
            done() { return player.s_expert.points.gte(1) },
        },
        1: {
            requirementDescription: "400 Super Expert Endless Clears",
            effect() {
                let mil = new Decimal(player.s_expert.milestones.length)
                let eff = mil.times(0.1).add(1)
                return eff
            },
            effectDescription() {
                return `CC in Expert Boss challenges powered based on your Super Expert Endless milestones you have.<br>
            Currently: ^${format(milestoneEffect('s_expert', 1))}`
            },
            done() { return player.s_expert.points.gte(400) },
        },
        2: {
            requirementDescription() { return `${f(5e50)} Expert Endless Clears and ${f(5e5)} Super Expert Endless Clears` },
            effectDescription: "Unlock Ludwig's minigame",
            done() { return player.expert.points.gte(5e50) && player.s_expert.points.gte(500000) },
        },
        3: {
            requirementDescription() { return `${f(4e7)} Super Expert Endless Clears` },
            effectDescription() { return "In early SMM1 100 Mario Challenges, there was no Super Expert difficulty.<br>This milestone still affacts 2nd SE Endless milestone effect." },
            done() { return player.s_expert.points.gte(4e7) },
        },
        4: {
            requirementDescription() { return `${f(6e7)} Super Expert Endless Clears` },
            effectDescription() { return "Nothing, but this milestone still affacts 2nd SE Endless milestone effect." },
            done() { return player.s_expert.points.gte(6e7) },
        },
        5: {
            requirementDescription() { return `${f(8e7)} Super Expert Endless Clears` },
            effectDescription() { return "Nothing, but this milestone still affacts 2nd SE Endless milestone effect." },
            done() { return player.s_expert.points.gte(8e7) },
        },
        6: {
            requirementDescription() { return `${f(1e8)} Super Expert Endless Clears` },
            effectDescription() { return "Autobuy 'Icxena challenging' but selling it will gain nothing." },
            done() { return player.s_expert.points.gte(1e8) },
        },
        7: {
            requirementDescription: "Get 300 Lava",
            effectDescription() { return "Double Lava gain." },
            done() { return player.s_expert.points.gte(1e8) },
            unlocked() { return hasUpgrade(this.layer, 15) },
        },
        8: {
            requirementDescription() { return `${f(5e15)} Super Expert Endless Clears` },
            effectDescription() { return "Auto click for Extra Magic 10 times per second in Challenge Larry." },
            done() { return player.s_expert.points.gte(5e15) },
            unlocked() { return hasSEendlessMilestone(7) },
        },
        9: {
            requirementDescription() { return `${f(1.5e16)} Super Expert Endless Clears` },
            effectDescription() { return "Auto click for Extra Magic 10 times per second in Challenge Lemmy." },
            done() { return player.s_expert.points.gte(1.5e16) },
            unlocked() { return hasSEendlessMilestone(7) },
        },
        10: {
            requirementDescription() { return `${f(5e16)} Super Expert Endless Clears` },
            effectDescription() { return "Auto click for Extra Magic 10 times per second in Challenge Wendy." },
            done() { return player.s_expert.points.gte(5e16) },
            unlocked() { return hasSEendlessMilestone(7) },
        },
        11: {
            requirementDescription() { return `${f(1e17)} Super Expert Endless Clears` },
            effectDescription() { return "Auto click for Extra Magic 10 times per second in Challenge Iggy." },
            done() { return player.s_expert.points.gte(1e17) },
            unlocked() { return hasSEendlessMilestone(7) },
        },
        12: {
            requirementDescription() { return `${f(1.5e17)} Super Expert Endless Clears` },
            effectDescription() { return "Auto click for Extra Magic 10 times per second in Challenge Morton." },
            done() { return player.s_expert.points.gte(1.5e17) },
            unlocked() { return hasSEendlessMilestone(7) },
        },
        13: {
            requirementDescription() { return `${f(2e17)} Super Expert Endless Clears` },
            effectDescription() { return "Auto click for Extra Magic 10 times per second in Challenge Roy." },
            done() { return player.s_expert.points.gte(2e17) },
            unlocked() { return hasSEendlessMilestone(7) },
        },
        14: {
            requirementDescription() { return `${f(4e17)} Super Expert Endless Clears` },
            effectDescription() { return "Auto click for Extra Magic 10 times per second in Challenge Ludwig." },
            done() { return player.s_expert.points.gte(4e17) },
            unlocked() { return hasSEendlessMilestone(7) },
        },
        15: {
            requirementDescription() { return `${f(1e21)} Super Expert Endless Clears` },
            effectDescription() { return "Gain Condition Courses automatically." },
            done() { return player.s_expert.points.gte(1e21) },
            unlocked() { return hasSEendlessMilestone(7) },
        },
    },
    clickables: {
        11: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                if (player.s_expert.lavaSpending) d = "Disable Lava Spending and multiplier"
                else d = "Enable Lava Spending and multiplier"
                return d
            },
            canClick() { return true },
            onClick() {
                if (player.s_expert.lavaSpending) player.s_expert.lavaSpending = false
                else if (player.s_expert.lavaSpending == false) player.s_expert.lavaSpending = true
            },
            unlocked() { return hasSEendlessUpgrade(15) },
            style() {
                return {
                    'border-radius': '5%',
                    'min-height': '50px',
                    'width': '150px',
                    'font-size': '15px'
                }
            },
        },
        21: {
            title() {
                let t = "Stomp!"
                return t
            },
            display() {
                let d = "The classic attack"
                return d
            },
            canClick() {
                return (player.s_expert.cooldownBoss.boom_boom.lte(0) && player.s_expert.AttackMode == 0 && player.subtabs.s_expert.bosses == "Boom Boom")
                    || (player.s_expert.cooldownBoss.poom_poom.lte(0) && player.s_expert.AttackMode == 0 && player.subtabs.s_expert.bosses == "Poom Poom")
            },
            onClick() {
                if (player.s_expert.healthBoss.boom_boom[0].gt(0) && player.subtabs.s_expert.bosses == "Boom Boom") player.s_expert.healthBoss.boom_boom[0] = player.s_expert.healthBoss.boom_boom[0].sub(1),
                    player.s_expert.cooldownBoss.boom_boom = d(3)
                if (player.s_expert.healthBoss.boom_boom[0].eq(0) && player.subtabs.s_expert.bosses == "Boom Boom") player.s_expert.boom_boom = player.s_expert.boom_boom.add(tmp.s_expert.multBoomBoom)
                player.s_expert.healthBoss.boom_boom[1] = d(5)

                if (player.s_expert.healthBoss.poom_poom[0].gt(0) && player.subtabs.s_expert.bosses == "Poom Poom") player.s_expert.healthBoss.poom_poom[0] = player.s_expert.healthBoss.poom_poom[0].sub(1),
                    player.s_expert.cooldownBoss.poom_poom = d(6)
                if (player.s_expert.healthBoss.poom_poom[0].eq(0) && player.subtabs.s_expert.bosses == "Poom Poom") player.s_expert.poom_poom = player.s_expert.poom_poom.add(tmp.s_expert.multPoomPoom)
                player.s_expert.healthBoss.poom_poom[1] = d(5)
            },
            unlocked() { return hasSEendlessUpgrade(15) },
            style() {
                return {
                    'border-radius': '5%',
                    'min-height': '90px',
                    'width': '90px',
                }
            },
        },
        22: {
            title() {
                let t = "Shoot!"
                return t
            },
            display() {
                let d = "Fireball, bouncy balls..."
                return d
            },
            canClick() { return player.s_expert.AttackMode == 1 },
            onClick() {
            },
            unlocked() { return hasSEendlessUpgrade(24) },
            style() {
                return {
                    'border-radius': '5%',
                    'min-height': '90px',
                    'width': '90px',
                }
            },
        },
        31: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = ""
                if (player.s_expert.AttackMode == 0) d = "Current Mode: Stomp<br>Click to change attack mode"
                else if (player.s_expert.AttackMode == 1) d = "Current Mode: Shoot<br>Click to change attack mode"
                return d
            },
            canClick() { return player.s_expert.cooldownSwitching.lte(0) },
            onClick() {
                switchAttackMode()
            },
            unlocked() { return hasSEendlessUpgrade(24) },
            style() {
                return {
                    'border-radius': '5%',
                    'min-height': '50px',
                    'width': '240px',
                    'font-size': '15px'
                }
            },
        },
        41: {
            title() {
                let t = "Throw a Pow Block"
                return t
            },
            display() {
                let d = ""
                return d
            },
            canClick() { return player.s_expert.pow_block.gte(1) },
            onClick() {
                player.s_expert.pow_block = player.s_expert.pow_block.sub(1),
                    player.s_expert.boom_boom = player.s_expert.boom_boom.add(tmp.s_expert.multBoomBoom),
                    player.s_expert.poom_poom = player.s_expert.poom_poom.add(tmp.s_expert.multPoomPoom)
            },
            unlocked() { return player.versus.skill.gte(2.024e10) },
            style() {
                return {
                    'background': 'linear-gradient(90deg, #7c83f6 0%, #1a1b64 20%, #1a1b64 80%, #7c83f6 100%)',
                    'border-radius': '5%',
                    'min-height': '120px',
                    'width': '120px',
                    'color': 'white',
                }
            },
        },
    },
    multBoomBoom() {
        let m = d(1)
        if (hasSEendlessUpgrade(31)) m = m.times(upgradeEffect('s_expert', 31))
        if (hasMilestone('coop', 0)) m = m.times(10)
        if ((hasUpgrade('coop', 11) && player.s_expert.AttackMode == 0) || (hasUpgrade('coop', 11) && hasSEendlessUpgrade(45))) m = m.times(upgradeEffect('coop', 11))
        if (hasUpgrade('versus', 12)) m = m.times(upgradeEffect('versus', 12))
        if (hasUpgrade('versus', 211)) m = m.times(upgradeEffect('versus', 211))
        if (hasUpgrade('coop', 44)) m = m.times(upgradeEffect('coop', 44))
        if (player.versus.skill.gte(2.024e10)) m = m.pow(tmp.s_expert.powBlockEff)
        return m
    },
    multPoomPoom() {
        let m = d(1)
        if (hasSEendlessUpgrade(31)) m = m.times(upgradeEffect('s_expert', 31))
        if (hasMilestone('coop', 0)) m = m.times(10)
        if ((hasUpgrade('coop', 11) && player.s_expert.AttackMode == 0) || (hasUpgrade('coop', 11) && hasSEendlessUpgrade(45))) m = m.times(upgradeEffect('coop', 11))
        if (hasUpgrade('versus', 12)) m = m.times(upgradeEffect('versus', 12))
        if (hasUpgrade('versus', 211)) m = m.times(upgradeEffect('versus', 211))
        if (hasUpgrade('coop', 44)) m = m.times(upgradeEffect('coop', 44))
        if (player.versus.skill.gte(2.024e10)) m = m.pow(tmp.s_expert.powBlockEff)
        return m
    },
    multPowBlock() {
        let m = d(1)
        if (hasMilestone('versus', 9)) m = m.times(milestoneEffect('versus', 9))
        if (player.versus.skill.gte(1.25e13)) m = m.times(5)
        if (hasUpgrade('speedrun', 12)) m = m.times(layerEffect('speedrun'))
        return m
    },
    wingGain() {
        let w = player.expert.points.max(10).log(10).pow(2)
        if (hasUpgrade('expert', 63)) w = w.times(upgradeEffect('expert', 63))
        if (hasSEendlessUpgrade(11)) w = w.times(588538)
        if (hasUpgrade('expert', 64)) w = w.times(upgradeEffect('expert', 64))
        if (hasUpgrade('expert', 72)) w = w.times(expertBossMagicEffect('bossrush'))
        if (hasUpgrade('expert', 72)) w = w.div(expertBossMagicEffect('flaw'))
        if (hasSEendlessUpgrade(21)) w = w.times(upgradeEffect('s_expert', 21))
        if (hasUpgrade('super_acorn', 122)) w = w.times(upgradeEffect('super_acorn', 122))
        return w
    },
    lavaGain() {
        let l = new Decimal(0)
        if (player.easy.random_theme.eq(10) || ((player.easy.random_theme.eq(10) || player.easy.random_theme.eq(7)) && hasMilestone('coop', 4))) l = new Decimal(1)
        if (hasSEendlessMilestone(7)) l = l.times(2)
        if (hasExpertEndlessUpgrade(74)) l = l.times(tmp.s_expert.effectBoomBoom)
        if (hasSEendlessUpgrade(34)) l = l.times(2)
        if (hasMilestone('coop', 0)) l = l.times(10)
        if (hasNormalAchievement(212)) l = l.times(5)
        if (hasUpgrade('versus', 221)) l = l.times(upgradeEffect('versus', 221))
        return l
    },
    poisonGain() {
        let l = new Decimal(0)
        if (player.easy.random_theme.eq(7) || ((player.easy.random_theme.eq(10) || player.easy.random_theme.eq(7)) && hasMilestone('coop', 4))) l = new Decimal(1)
        if (hasExpertEndlessUpgrade(75)) l = l.times(tmp.s_expert.effectPoomPoom)
        if (hasSEendlessUpgrade(34)) l = l.times(4)
        if (hasMilestone('coop', 0)) l = l.times(10)
        if (hasUpgrade('versus', 15)) l = l.times(upgradeEffect('versus', 15))
        if (hasUpgrade('versus', 222)) l = l.times(upgradeEffect('versus', 222))
        return l
    },
    effectBoomBoom() {
        let eff = d(0)
        if (hasExpertEndlessUpgrade(74)) eff = d(1)
        eff = eff.times(player.s_expert.boom_boom.max(0).add(1).root(2.88))
        return eff
    },
    effectPoomPoom() {
        let eff = d(0)
        if (hasExpertEndlessUpgrade(75)) eff = d(1)
        eff = eff.times(player.s_expert.poom_poom.max(0).add(1).root(3.76))
        return eff
    },
    update(diff) {
        let tick = new Decimal(0.05)
        let cap = d(300)
        let capP = d(300)

        if (player.s_expert.cooldown.gt(0)) player.s_expert.cooldown = player.s_expert.cooldown.sub(diff).max(0)
        if (player.s_expert.cooldown.lte(0)) player.s_expert.cooldown = new Decimal(0)

        if ((player.easy.random_theme.eq(10) && hasSEendlessUpgrade(15) && player.s_expert.lava.lt(player.s_expert.lavacap))
            || ((player.easy.random_theme.eq(10) || player.easy.random_theme.eq(7)) && hasSEendlessUpgrade(15) && player.s_expert.lava.lt(player.s_expert.lavacap) && hasMilestone('coop', 4))) player.s_expert.lava = player.s_expert.lava.add(tmp.s_expert.lavaGain.times(diff))
        if ((player.easy.random_theme.eq(7) && hasSEendlessUpgrade(23) && player.s_expert.poison.lt(player.s_expert.poisoncap))
            || ((player.easy.random_theme.eq(10) || player.easy.random_theme.eq(7)) && hasSEendlessUpgrade(23) && player.s_expert.poison.lt(player.s_expert.poisoncap) && hasMilestone('coop', 4))) player.s_expert.poison = player.s_expert.poison.add(tmp.s_expert.poisonGain.times(diff))

        if (hasExpertEndlessUpgrade(74)) cap = cap.times(tmp.s_expert.effectBoomBoom)
        if (hasSEendlessUpgrade(41)) cap = cap.times(5)
        if (hasUpgrade('versus', 221)) cap = cap.times(upgradeEffect('versus', 221))
        player.s_expert.lavacap = cap
        if (hasExpertEndlessUpgrade(75)) capP = capP.times(tmp.s_expert.effectPoomPoom)
        if (hasUpgrade('versus', 15)) capP = capP.times(upgradeEffect('versus', 15))
        if (hasUpgrade('versus', 222)) capP = capP.times(upgradeEffect('versus', 222))
        player.s_expert.poisoncap = capP

        if (player.s_expert.lava.gte(player.s_expert.lavacap)) player.s_expert.lava = player.s_expert.lavacap
        if (player.s_expert.poison.gte(player.s_expert.poisoncap)) player.s_expert.poison = player.s_expert.poisoncap

        if (player.s_expert.lavaSpendInput.lte(player.s_expert.lava.div(10)) && player.s_expert.lavaSpendInput.gt(0) && player.s_expert.lavaSpending) player.s_expert.lava = player.s_expert.lava.sub(player.s_expert.lavaSpendInput.max(0).times(diff))
        //使得输入框能输入decimal
        if (player.s_expert.lavaSpendInput.mag == undefined) player.s_expert.lavaSpendInput = new Decimal(player.s_expert.lavaSpendInput)
        if (isDInfinity(player.s_expert.lavaSpendInput) || isDNaN(player.s_expert.lavaSpendInput)) player.s_expert.lavaSpendInput = new Decimal(0)
        if (player.s_expert.lavaSpendInput.lt(0) && hasSecretAchievement(23)) player.s_expert.lavaSpendInput = d(0)
        if (player.s_expert.lavaSpendInput.gt(player.s_expert.lava.div(10))) player.s_expert.lavaSpendInput = player.s_expert.lava.div(10)

        if (player.versus.skill.gte(1.25e13) && hasUpgrade('versus', 261)) player.s_expert.lavaSpendInput = player.s_expert.lava.div(10)
        //奔奔碰碰BOSS逻辑
        if (player.s_expert.AttackMode == 1 && player.s_expert.shot_period.eq(40) && player.s_expert.cooldownBoss.boom_boom.lte(0) && hasExpertEndlessUpgrade(74)) player.s_expert.healthBoss.boom_boom[1] = player.s_expert.healthBoss.boom_boom[1].sub(1)
        if (player.s_expert.AttackMode == 1 && player.s_expert.shot_period.eq(40) && player.s_expert.cooldownBoss.poom_poom.lte(0) && hasExpertEndlessUpgrade(75)) player.s_expert.healthBoss.poom_poom[1] = player.s_expert.healthBoss.poom_poom[1].sub(1)

        if (player.s_expert.healthBoss.boom_boom[1].lte(0) && player.s_expert.healthBoss.boom_boom[0].gt(0)) player.s_expert.healthBoss.boom_boom[0] = player.s_expert.healthBoss.boom_boom[0].sub(1),
            player.s_expert.healthBoss.boom_boom[1] = d(5),
            player.s_expert.cooldownBoss.boom_boom = d(3)

        if (player.s_expert.healthBoss.poom_poom[1].lte(0) && player.s_expert.healthBoss.poom_poom[0].gt(0)) player.s_expert.healthBoss.poom_poom[0] = player.s_expert.healthBoss.poom_poom[0].sub(1),
            player.s_expert.healthBoss.poom_poom[1] = d(5),
            player.s_expert.cooldownBoss.poom_poom = d(6)

        if (player.s_expert.AttackMode == 1 && player.s_expert.healthBoss.boom_boom[0].lte(0)) player.s_expert.boom_boom = player.s_expert.boom_boom.add(tmp.s_expert.multBoomBoom)
        if (player.s_expert.AttackMode == 1 && player.s_expert.healthBoss.poom_poom[0].lte(0)) player.s_expert.poom_poom = player.s_expert.poom_poom.add(tmp.s_expert.multPoomPoom)

        if (player.s_expert.healthBoss.boom_boom[0].lte(0)) player.s_expert.healthBoss.boom_boom[0] = d(3)
        if (player.s_expert.cooldownBoss.boom_boom.gt(0)) player.s_expert.cooldownBoss.boom_boom = player.s_expert.cooldownBoss.boom_boom.sub(diff).max(0)
        if (player.s_expert.cooldownBoss.boom_boom.lte(0)) player.s_expert.cooldownBoss.boom_boom = d(0)

        if (player.s_expert.healthBoss.poom_poom[0].lte(0)) player.s_expert.healthBoss.poom_poom[0] = d(3)
        if (player.s_expert.cooldownBoss.poom_poom.gt(0)) player.s_expert.cooldownBoss.poom_poom = player.s_expert.cooldownBoss.poom_poom.sub(diff).max(0)
        if (player.s_expert.cooldownBoss.poom_poom.lte(0)) player.s_expert.cooldownBoss.poom_poom = d(0)

        if (player.s_expert.cooldownSwitching.gt(0)) player.s_expert.cooldownSwitching = player.s_expert.cooldownSwitching.sub(diff).max(0)
        if (player.s_expert.cooldownSwitching.lte(0)) player.s_expert.cooldownSwitching = d(0)

        if (player.s_expert.AttackMode == 1) player.s_expert.shot_period = player.s_expert.shot_period.add(1)
        else player.s_expert.shot_period = d(1)
        if (player.s_expert.shot_period.gt(40)) player.s_expert.shot_period = d(1)

        if (hasNormalAchievement(204)) {
            if (player.s_expert.boom_boom.lt(tmp.s_expert.multBoomBoom)) player.s_expert.boom_boom = tmp.s_expert.multBoomBoom
            if (player.s_expert.poom_poom.lt(tmp.s_expert.multPoomPoom)) player.s_expert.poom_poom = tmp.s_expert.multPoomPoom
        }
        //pow砖块
        let pbk = player.s_expert.pow_block
        let pbkc = d(60) //start
        if (hasMilestone('versus', 9)) pbkc = pbkc.times(milestoneEffect('versus', 9))
        if (player.versus.skill.gte(1.25e13)) pbkc = pbkc.times(5)
        if (hasUpgrade('speedrun', 12)) pbkc = pbkc.times(layerEffect('speedrun'))
        player.s_expert.pow_block_cap = pbkc
        if (pbk.gt(pbkc)) {
            player.s_expert.pow_block = pbkc
        }
        if (player.versus.skill.gte(2.024e10) && pbk.lt(pbkc)) player.s_expert.pow_block = player.s_expert.pow_block.add(tmp.s_expert.multPowBlock.times(diff))
        
        if (player.s_expert.lava.lt(0)) player.s_expert.lava = d(0)
    },
    bars: {
        healthBoomBoom: {
            direction: RIGHT,
            width: 420,
            height: 50,
            display() { return `Boom Boom's health: ${formatWhole(player.s_expert.healthBoss.boom_boom[0])}/3 stacks, ${formatWhole(player.s_expert.healthBoss.boom_boom[1])}/5 ❤` },
            progress() { return player.s_expert.healthBoss.boom_boom[0].sub(1).times(5).add(player.s_expert.healthBoss.boom_boom[1]).div(15) },
            unlocked() { return hasSEendlessUpgrade(22) },
            fillStyle() { return { "background-color": "#00ff00" } },
            baseStyle() { return { "background-color": "#ff0000" } },
            textStyle() { return { "color": "#000000" } }
        },
        healthPoomPoom: {
            direction: RIGHT,
            width: 420,
            height: 50,
            display() { return `Poom Poom's health: ${formatWhole(player.s_expert.healthBoss.poom_poom[0])}/3 stacks, ${formatWhole(player.s_expert.healthBoss.poom_poom[1])}/5 ❤` },
            progress() { return player.s_expert.healthBoss.poom_poom[0].sub(1).times(5).add(player.s_expert.healthBoss.poom_poom[1]).div(15) },
            unlocked() { return hasExpertEndlessUpgrade(75) },
            fillStyle() { return { "background-color": "#00ff00" } },
            baseStyle() { return { "background-color": "#ff0000" } },
            textStyle() { return { "color": "#000000" } }
        },
    },
    powBlockEff() {
        let pbk = player.s_expert.pow_block
        let eff = d(1)
        eff = eff.add(pbk.max(0).add(4).ssqrt().sub(2).div(6))
        if (hasUpgrade('versus', 43)) eff = eff.pow(2.5)
        if (eff.gte(22)) eff = eff.div(22).pow(0.12).times(22)
        return eff
    },
    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => "There is a 1 minute cooldown for gaining Super Expert Endless Clears."],
        ["display-text", function () {
            let cooldown = d(60)
            if (hasMilestone('coop', 1)) cooldown = d(10)
            return `Cooldown: ${format(player.s_expert.cooldown, 1)}/${format(cooldown, 1)}s.`
        }],
        ["display-text", () => `Row 14 doesn't reset row 13 but resets Expert Endless Clear amount.`],
        ["display-text", () => `You have ` + formatWhole(player.expert.points) + ` Expert Endless Clears`],
        ["display-text", () => `Your record of Super Expert Endless Clears is ` + formatWhole(player.s_expert.best)],
        ["display-text", function () {
            if (inChallenge('coop', 11))
                return `<br>You are in challenge "Bowser Jr." Super Expert Endless Clear gain is divided by /${format(Decimal.pow(1000, player.s_expert.resets.max(0)))}`
        }],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">There are 4 different difficulties of endless challenges. Super Expert endless is the fourth difficulty.<br>When you start a new run, you would have 30 lives. It's nearly impossible to playing it infinitely, but it's still possible to make the lives to max. <br>Many courses here has an insane difficulty. It requires your many advanced skills and more luck. <br>Having a gold Supert Endless medal is a symbol of master.`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "Lava": {
                unlocked() { return hasSEendlessUpgrade(15) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return `You have ${textStyle_h2(format(player.s_expert.lava) + "/" + format(player.s_expert.lavacap), 'ffbf16')} Lava (+${format(tmp.s_expert.lavaGain)}/sec)<br>
                        You can gain Lava when No Damage Challenge tab in Easy Endless has a random theme of castle<br>
                        Lava cap is at ${format(player.s_expert.lavacap)}`
                    }],
                    "blank",
                    ["display-text", function () {
                        let logbase = d(2)
                        let powbase1 = d(2.5)
                        let powbase1inc = d(2)
                        if (hasSEendlessUpgrade(25)) logbase = logbase.sub(upgradeEffect('s_expert', 25))
                        if (hasSEendlessUpgrade(33)) powbase1 = d(3)
                        if (hasUpgrade('coop', 12)) powbase1 = powbase1.add(0.5)
                        if (hasMilestone('versus', 0)) powbase1 = powbase1.add(0.35)
                        if (hasUpgrade('coop', 23)) powbase1 = powbase1.add(buyableEffect('coop', 11))

                        if (hasUpgrade('coop', 41)) powbase1inc = powbase1inc.add(0.5)
                        if (inChallenge('coop', 11)) powbase1 = d(powbase1inc) //挑战削弱

                        let rightside = "(y/10x)"
                        if (hasUpgrade('versus', 261)) rightside = "y"
                        return `Spending Lava to boost 2nd SE Endless milestone effect. The speed depends on your input<br>
                        It can't be greater than your Lava amount/10 or below 0<br>
                        You must have 10s of Lava that can spend or gain no reward<br>
                        Currently: spending ${format(player.s_expert.lavaSpendInput)} Lava/sec<br>
                        Formula: (log<sub>${format(logbase)}</sub>(x)+1)<sup>${format(powbase1)}</sup>·${rightside}<br> (x is the input, y is amount of Lava)<br>
                        You have a multiplier to Super Expert Endless Clears gain from Lava of ${textStyle_h2(format(upgradeEffect('s_expert', 15)) + "x", 'ffbf16')}`
                    }],
                    ["text-input", "lavaSpendInput", {
                        "color": "var(--color)",
                        "width": "300px",
                        "text-align": "left",
                        "font-size": "20px",
                        "border": "2px solid #ffffff",
                        "background": "var(--background)",
                    }],
                    "blank",
                    ["clickables", [1]],
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #ffbf16, #d25524)',
                        'border-color': '#ffbf16',
                        'color': 'black',
                    }
                },
            },
            "Poison": {
                unlocked() { return hasSEendlessUpgrade(23) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return `You have ${textStyle_h2(format(player.s_expert.poison) + "/" + format(player.s_expert.poisoncap), 'fc2bf0')} Poison (+${format(tmp.s_expert.poisonGain)}/sec)<br>
                        You can gain Poison when No Damage Challenge tab in Easy Endless has a random theme of jungle (Fact: SM3DW style in SMM2 doesn't have its own night mode)<br>
                        Poison cap is at ${format(player.s_expert.poisoncap)}`
                    }],
                    "blank",
                    ["display-text", function () {
                        if (hasSEendlessUpgrade(31))
                            return `Your poison multiplies Boom Boom and Poom Poom gain by ${textStyle_h2(format(upgradeEffect('s_expert', 31)) + "x", 'fc2bf0')}`
                    }],
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #fc2bf0, #6f1ea0)',
                        'border-color': '#fc2bd0',
                        'color': 'black',
                    }
                },
            },
            "More Bosses": {
                unlocked() { return hasExpertEndlessUpgrade(74) },
                content: [
                    ["blank", "15px"],
                    ["microtabs", "bosses"],
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #6a4fae, #372757)',
                        'border-color': '#6a4fae',
                        'color': 'white',
                    }
                },
            },
        },
        bosses: {
            "Boom Boom": {
                unlocked() { return hasExpertEndlessUpgrade(74) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return `You have defeated ${textStyle_h2(formatWhole(player.s_expert.boom_boom), '6a4fae')} Boom Booms`
                    }],
                    ["display-text", function () {
                        return `Fight against with Boom Booms, you should stomp on it 3 times to defeat it`
                    }],
                    "blank",
                    ["bar", "healthBoomBoom"],
                    "blank",
                    ["display-text", function () {
                        if (player.s_expert.cooldownBoss.boom_boom.gt(0))
                            return `Boom Boom is in defensive stance, you can't stomp on it or get a damage<br>
                        Cooldown: ${format(player.s_expert.cooldownBoss.boom_boom, 1)}/3.0s`
                        else return `Boom Boom is in combat stance, stomping on it to hit for -1 stack!<br>
                        FIGHT!`
                    }],
                    ["clickables", [2]],
                    "blank",
                    ["clickables", [3]],
                    "blank",
                    ["display-text", function () {
                        if (hasSEendlessUpgrade(24)) return `Changing attack mode has a cooldown of 30 seconds<br>
                        Cooldown: ${format(player.s_expert.cooldownSwitching, 1)}/30.0s<br><br>
                        Shooting mode shoots fireball automatically, -1 ❤ per 2 seconds. And when Boom Boom's ❤ goes to 0, -1 stack and gets 5 ❤ back with its defensive stance`
                    }],
                    ["display-text", function () {
                        return `You can beat ${format(tmp.s_expert.multBoomBoom)} Boom Booms once`
                    }],
                    ["display-text", function () {
                        return `Your Boom Boom multiplies Lava gain and cap by ${textStyle_h2(format(tmp.s_expert.effectBoomBoom) + 'x', '6a4fae')}`
                    }],
                    ["display-text", function () {
                        if (hasExpertEndlessUpgrade(75))
                            return `If you choose shooting mode you can both beat Boom Booms and Poom Pooms in the same time`
                    }],
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #6a4fae, #372757)',
                        'border-color': '#6a4fae',
                        'color': 'white',
                    }
                },
            },
            "Poom Poom": {
                unlocked() { return hasExpertEndlessUpgrade(75) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return `You have defeated ${textStyle_h2(formatWhole(player.s_expert.poom_poom), '6a4fae')} Poom Pooms`
                    }],
                    ["display-text", function () {
                        return `Fight against with Poom Pooms, you should stomp on it 3 times to defeat it`
                    }],
                    "blank",
                    ["bar", "healthPoomPoom"],
                    "blank",
                    ["display-text", function () {
                        if (player.s_expert.cooldownBoss.poom_poom.gt(0))
                            return `Poom Poom is hidden in the background, you can't stomp on it<br>
                        Cooldown: ${format(player.s_expert.cooldownBoss.poom_poom, 1)}/6.0s`
                        else return `Poom Poom is in combat stance, stomping on it to hit for -1 stack!<br>
                        FIGHT!`
                    }],
                    ["clickables", [2]],
                    "blank",
                    ["clickables", [3]],
                    "blank",
                    ["display-text", function () {
                        if (hasSEendlessUpgrade(24)) return `Changing attack mode has a cooldown of 30 seconds<br>
                        Cooldown: ${format(player.s_expert.cooldownSwitching, 1)}/30.0s<br><br>
                        Shooting mode shoots fireball automatically, -1 ❤ per 2 seconds. And when Poom Poom's ❤ goes to 0, -1 stack and gets 5 ❤ back with its skill of hidden in background`
                    }],
                    ["display-text", function () {
                        return `You can beat ${format(tmp.s_expert.multPoomPoom)} Poom Pooms once`
                    }],
                    ["display-text", function () {
                        return `Your Poom Poom multiplies Poison gain and cap by ${textStyle_h2(format(tmp.s_expert.effectPoomPoom) + 'x', '6a4fae')}`
                    }],
                    ["display-text", function () {
                        return `If you choose shooting mode you can both beat Boom Booms and Poom Pooms in the same time`
                    }],
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #6a4fae, #372757)',
                        'border-color': '#6a4fae',
                        'color': 'white',
                    }
                },
            },
            "Pow Block": {
                unlocked() { return player.versus.skill.gte(2.024e10) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return `You have ${textStyle_h2(formatWhole(player.s_expert.pow_block) + "/" + formatWhole(player.s_expert.pow_block_cap), '7c83f6')} Pow Blocks (+${formatWhole(tmp.s_expert.multPowBlock)}/sec) (Keep on reset)`
                    }],
                    ["display-text", function () {
                        let t = `Your Pow Block powers S.E. layer Bosses gain by ${textStyle_h2("^" + format(tmp.s_expert.powBlockEff), '7c83f6')}`
                        t += tmp.s_expert.powBlockEff.gte(22) ? " (softcapped)" : ""
                        return t
                    }],
                    ["display-text", function () {
                        return `Pow Block can defeat Bosses instantly and provide a boost to S.E. layer Bosses gain`
                    }],
                    "blank",
                    ["display-text", function () {
                        return `You have defeated ${textStyle_h2(formatWhole(player.s_expert.boom_boom), '6a4fae')} Boom Booms (+${format(tmp.s_expert.multBoomBoom)}/throw)`
                    }],
                    ["display-text", function () {
                        return `You have defeated ${textStyle_h2(formatWhole(player.s_expert.poom_poom), '6a4fae')} Poom Pooms (+${format(tmp.s_expert.multPoomPoom)}/throw)`
                    }],
                    ["clickables", [4]],
                ],
                buttonStyle() {
                    return {
                        'background': 'linear-gradient(90deg, #7c83f6 0%, #1a1b64 20%, #1a1b64 80%, #7c83f6 100%)',
                        'border-color': '#1a1a64',
                        'color': 'white',
                    }
                },
            },
        },
    },
})
// 第二十八层：多人过关 (Multiplayer Co-op) Res: Co-op Clears
addLayer("coop", {
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            check_point: d(0),
            cpt: d(0),
        }
    },

    color: "#FFCF03",                       // The color for this layer, which affects many elements.
    resource: "Multiplayer Co-op Clears",            // The name of this layer's main prestige resource.
    row: 14,                                 // The row this layer is on (0 is the first row).
    position: 0,
    symbol: "Coop",

    baseResource: "Mario",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.mario.points },  // A function to return the current amount of baseResource.

    requires: new Decimal(1e28),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.
    canReset() {
        return player.mario.points.gte(1e28) && player.expert.points.gte(1e102) && player.s_expert.points.gte(1e24)
    },

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.23137821315975915,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let m = new Decimal(1)               // Factor in any bonuses multiplying gain here.
        if (hasUpgrade('versus', 11)) m = m.times(upgradeEffect('versus', 11))
        if (hasUpgrade('coop', 21)) m = m.times(upgradeEffect('coop', 21))
        if (hasUpgrade('coop', 33)) m = m.times(upgradeEffect('coop', 33))
        if (hasUpgrade('versus', 24)) m = m.times(upgradeEffect('versus', 24))
        if (player.versus.lag.gte(1)) m = m.times(tmp.versus.lagEff)
        if (hasMilestone('coop', 5)) m = m.times(50)
        if (hasUpgrade('themed', 31)) m = m.times(40)
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },

    onPrestige() {
        if (hasUpgrade('coop', 22)) player.coop.check_point = player.coop.check_point.add(tmp.coop.cpGain)
        let respecUpgID = 200
        let experienceSpent = d(0)
        if (hasMilestone('versus', 11)) {
            respecUpgID = 280
            experienceSpent = d(154)
        }
        if (player.versus.respec) {
            player.versus.respec = false
            player.versus.upgrades.length
            for (let i = 0; i < player.versus.upgrades.length; i++) {
                if (+player.versus.upgrades[i] > respecUpgID) {
                    player.versus.upgrades.splice(i, 1);
                    i--;
                }
            }
            player.versus.experienceSpent = experienceSpent
            player.versus.experience = player.versus.experienceTotal
        }
    },

    doReset(resettingLayer) {
        if (layers[resettingLayer].row >= 15) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone('themed', 5)) {
                kept.push("milestones")
            }
            if (hasUpgrade('themed', 13)) {
                kept.push("upgrades")
            }
            if (hasUpgrade('themed', 22)) {
                kept.push("challenges")
            }
            layerDataReset(this.layer, kept)
        }
    },

    hotkeys: [
        { key: "o", description: "O: Reset for Multiplayer Co-op Clears", onPress() { if (canReset(this.layer)) doReset(this.layer) } },
    ],
    layerShown() { return hasNormalAchievement(203) },          // Returns a bool for if this layer's node should be visible in the tree.

    passiveGeneration() {
        return hasMilestone('themed', 1)
    },

    upgrades: {
        11: {
            title: "Cooperate",
            description: "Beat more Bosses by stomping based on best amount of Co-op Clears. (Hardcap at 1000x)",
            cost: new Decimal(7),
            unlocked() { return true },
            effect() {
                let eff = Decimal.pow(10, player.coop.best.times(3).add(1).max(1).log(10).root(0.75)).min(1000)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        12: {
            title: "Time up retry",
            description: "+0.5 to Lava effect left powerer. (to 3.5)",
            cost: new Decimal(20),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        13: {
            title: "Players are CPs",
            description: "Multiply Super Expert Clears gain based on Multiplayer Co-op Clears.",
            currencyDisplayName: "Cleared Courses",
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee3.6e27"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.coop.points.max(1).pow(1.5)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        14: {
            title: "We can clear this!",
            description: "1st Poison effect powers Normal Endless Clears effect but weaker.",
            currencyDisplayName: "Cleared Courses",
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee1.5e28"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = upgradeEffect('s_expert', 31).max(1).root(2)
                return eff
            },
            effectDisplay() { return "^" + format(upgradeEffect(this.layer, this.id)) },
        },
        15: {
            title: "Another mode",
            description: "Unlock Multiplayer Versus layer",
            cost: new Decimal(680),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "Co-op speedrunning",
            description: "Co-op Clear gain is boosted by itself",
            cost: new Decimal(10000),
            unlocked() { return hasUpgrade(this.layer, 15) },
            effect() {
                let eff = player.coop.points.max(0).add(10).log(10)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        22: {
            title: "3s Invincible",
            description: "Unlock Check Points.",
            cost: new Decimal(50000),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        23: {
            title: "Retry from the CP",
            description: "Unlock a new buyable.",
            currencyDisplayName: "Check Points",
            currencyInternalName: "check_point",
            currencyLayer: "coop",
            cost: new Decimal(20),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        24: {
            title: "Cooperate to stomp",
            description: "Unlock another Check Point buyable.",
            cost: new Decimal(1234567),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        25: {
            title: "Advanced coopeartion",
            description: "Unlock a challenge.",
            cost: new Decimal(2.111e9),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        31: {
            title: "T-jumps become easy",
            description() { return `${501761}x Mario gain.` },
            currencyDisplayName: "Cleared Courses",
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee3.4567e33"),
            unlocked() { return hasUpgrade(this.layer, 25) },
        },
        32: {
            title: "No landing is easy",
            description: "2nd Normal Endless upgrade effect is stronger.",
            currencyDisplayName: "Cleared Courses",
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee1e34"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        33: {
            title: "No damage is easy",
            description: "Mario<sup>0.05</sup> multiplies Co-op Clears gain.",
            currencyDisplayName: "Cleared Courses",
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee3.3666e36"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.mario.points.max(1).pow(0.05)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        34: {
            title: "Poison lake",
            description: "Unlock factor B to gain more Versus Rating.",
            currencyDisplayName: "Poison",
            currencyInternalName: "poison",
            currencyLayer: "s_expert",
            cost: new Decimal(10000000),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        35: {
            title: "Not so challenging",
            description: "+15 to Bowser Jr. completion limit.",
            currencyDisplayName: "Super Expert Endless Clears in challenge Bowser Jr.",
            currencyInternalName: "points",
            currencyLayer: "s_expert",
            canAfford() { return inChallenge('coop', 11) },
            cost: new Decimal(1.6e60),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        41: {
            title: "Bigger Bowser Jr.",
            description: "Lava effect left powerer is 2.5 in challenge Bowser Jr.",
            currencyDisplayName: "Super Expert Endless Clears in challenge Bowser Jr.",
            currencyInternalName: "points",
            currencyLayer: "s_expert",
            canAfford() { return inChallenge('coop', 11) },
            cost: new Decimal(5e62),
            unlocked() { return hasUpgrade(this.layer, 35) },
        },
        42: {
            title: "Co-op with friends",
            description: "Morton's magic is ^100 effective.",
            currencyDisplayName: "Cleared Courses",
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee3.1415e58"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        43: {
            title: "18th MP Co-op upgrade",
            description: "Iggy's magic is ^1.25 effective.",
            currencyDisplayName: "Cleared Courses",
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee1.5e60"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        44: {
            title: "Co-op God",
            description: "Versus Rating provides an effect to Bosses gain in S.E. layer.",
            currencyDisplayName: "Cleared Courses",
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee1e64"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = Decimal.pow(10, player.versus.points.div(200).max(0))
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        45: {
            title: "Play together!",
            description: `Square "Skill: Grab players" effect.`,
            currencyDisplayName: "Cleared Courses",
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee1.5e60"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        51: {
            title: "Simulate 2v2 battle",
            description: "ln(Lag)<sup>2</sup>boosts Lag itself.",
            cost: new Decimal(2e37),
            unlocked() { return hasUpgrade(this.layer, 45) },
            effect() {
                let eff = player.versus.lag.max(decimalNatral).ln().max(1).pow(2)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        52: {
            title: "Something is impossible",
            description: "Unlock 4th way to gain experience.",
            cost: new Decimal(5e39),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        53: {
            title: "Good for finding hidden blocks",
            description: "Double experience gain from VS rating.",
            cost: new Decimal(1e47),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        54: {
            title: "Accelerate before start",
            description: "lg(Check Point) multiplies Lag gain.",
            cost: new Decimal(1e54),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.coop.check_point.max(10).log(10).max(1)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        55: {
            title: "Perfect start",
            description: "Mult of experience gain from CC is doubled.",
            currencyDisplayName: "Cleared Courses",
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee1e91"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        // Look in the upgrades docs to see what goes here!
    },
    milestones: {
        0: {
            requirementDescription: "Get 1 Multiplayer Co-op Clear",
            effectDescription: "10x Lava, Poison, Boom Booms and Poom Pooms gain and keep Super Expert Endless milestones on row 15 reset.",
            done() { return player.coop.points.gte(1) },
        },
        1: {
            requirementDescription: "Get 2 Multiplayer Co-op Clears",
            effectDescription: "Super Expert Endless resets' cooldown is 10s instead of 60s.",
            done() { return player.coop.points.gte(2) },
        },
        2: {
            requirementDescription: "Get 3 Multiplayer Co-op Clears",
            effectDescription: "5x Super Expert Endless Clears gain.",
            done() { return player.coop.points.gte(3) },
        },
        3: {
            requirementDescription: "Get 5 Multiplayer Co-op Clears",
            effectDescription: "Auto prestige for Expert Endless Clears and it resets nothing.",
            done() { return player.coop.points.gte(5) },
        },
        4: {
            requirementDescription: "Get 7 Multiplayer Co-op Clears",
            effectDescription: "If the NDMG tab in Easy Endless layer theme is jungle or castle, both gain Lava and Poison at same time.",
            done() { return player.coop.points.gte(7) },
        },
        5: {
            requirementDescription() { return `${f(1e40)} Multiplayer Co-op Clears` },
            effectDescription: "50x Co-op Clears gain.",
            done() { return player.coop.points.gte(1e40) },
        },
    },
    buyables: {
        11: {
            title: "Shared Conditions",
            cost(x) { return new Decimal(4.88).pow(Decimal.pow(x, 1.025)) },
            display() {
                let free = new Decimal(0)
                if (hasUpgrade('versus', 21)) free = free.add(upgradeEffect('versus', 21))
                if (hasUpgrade('versus', 45)) free = free.add(90)
                let base = d(0.2)
                if (hasUpgrade('versus', 31)) base = base.add(0.05)
                let freedis = ""
                if (free.gt(0)) freedis = `+${formatWhole(free)}`
                let display = ` Increase Lava effect left powerer. <br>
                base: ${format(base)}<br>
                level: ${formatWhole(player[this.layer].buyables[this.id])}${freedis}<br>
                Effect: +${format(this.effect())}<br>
                Cost: ${format(this.cost())} Check Points`
                return display
            },
            canAfford() { return player[this.layer].check_point.gte(this.cost()) },
            buyMax() { return setBuyableAmount('coop', 11, player.coop.check_point.max(4.88).log(4.88).root(1.025).floor().add(1)) },
            canBuyMax() { return hasMilestone('themed', 4) },
            buy() {
                if (!this.canBuyMax()) player[this.layer].check_point = player[this.layer].check_point.sub(this.cost()),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effect(x) {
                let free = new Decimal(0)
                if (hasUpgrade('versus', 21)) free = free.add(upgradeEffect('versus', 21))
                if (hasUpgrade('versus', 45)) free = free.add(90)
                let base = d(0.2)
                if (hasUpgrade('versus', 31)) base = base.add(0.05)
                let softcap = d(5)
                let effect = base.times(x.add(free))
                return effect
            },
            unlocked() { return hasUpgrade('coop', 23) },
            auto() {
                if (hasMilestone('speedrun', 0) && !hasUpgrade('versus', 311) || hasMilestone('speedrun', 0) && hasUpgrade('versus', 311) && hasUpgrade('versus', 321)) this.buyMax()
            },
        },
        12: {
            title: "Visible Condition Progress",
            cost(x) { return new Decimal(10).pow(Decimal.pow(x, 1.01)) },
            display() {
                let free = new Decimal(0)
                if (hasUpgrade('versus', 23)) free = free.add(5)
                let base = d(3)
                if (hasUpgrade('versus', 32)) base = base.add(upgradeEffect('versus', 32))
                let freedis = ""
                if (free.gt(0)) freedis = `+${formatWhole(free)}`
                let softcapAmt = d(200)
                let softcap = ""
                if (getBuyableAmount('coop', 12).gte(softcapAmt)) softcap = " (softcapped)"
                let display = ` Multiply Check Point gain. <br>
                base: ${format(base)}<br>
                level: ${formatWhole(player[this.layer].buyables[this.id])}${freedis}<br>
                Effect: ${format(this.effect())}x${softcap}<br>
                Cost: ${format(this.cost())} Check Points`
                return display
            },
            canAfford() { return player[this.layer].check_point.gte(this.cost()) },
            buyMax() { return setBuyableAmount('coop', 12, player.coop.check_point.max(10).log(10).root(1.01).floor().add(1)) },
            canBuyMax() { return hasMilestone('themed', 4) },
            buy() {
                if (!this.canBuyMax()) player[this.layer].check_point = player[this.layer].check_point.sub(this.cost()),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effect(x) {
                let free = new Decimal(0)
                if (hasUpgrade('versus', 23)) free = free.add(5)
                let base = d(3)
                if (hasUpgrade('versus', 32)) base = base.add(upgradeEffect('versus', 32))
                let softcap = d(200)
                let effect = base.pow(x.add(free))
                if (x.gte(softcap)) effect = base.pow(d(200).add(free)).times(base.max(1).sqrt().pow(x.sub(200).max(0)))
                return effect
            },
            unlocked() { return hasUpgrade('coop', 24) },
            auto() {
                if (hasMilestone('speedrun', 0) && !hasUpgrade('versus', 311) || hasMilestone('speedrun', 0) && hasUpgrade('versus', 311) && hasUpgrade('versus', 321)) this.buyMax()
            },
        },
    },
    challenges: {
        11: {
            name: "Bowser Jr.",
            challengeDescription() {
                let base = d(2)
                if (hasUpgrade('coop', 41)) base = base.add(0.5)
                return `Lava effect left powerer is always ${format(base)}, divide SE Endless Clears gain based on your S.E. layer resets.`
            },
            goal() {
                let comps = d(player.coop.challenges[11])
                return Decimal.pow(1000, comps).times(1.6e45)
            },
            goalDescription() {
                return `Reach ${format(challengeGoal('coop', 11))} S.E. Endless Clears.<br>Goal Formula: 1000<sup>x</sup>·1.6e45
            <br>Completions: ${formatWhole(challengeCompletions('coop', 11))}/${formatWhole(this.completionLimit())}`
            },
            completionLimit() {
                let l = d(5)
                if (hasUpgrade('coop', 35)) l = l.add(15)
                if (hasUpgrade('themed', 11)) l = l.add(20)
                return l
            },
            canComplete: function () {
                return player.s_expert.points.gte(challengeGoal('coop', 11))
            },
            rewardDescription() {
                let base = d(10)
                if (hasUpgrade('versus', 223)) base = base.add(upgradeEffect('versus', 223))
                return `Multiply Check Point gain by ${format(base)} per each completion.`
            },
            rewardEffect() {
                let base = d(10)
                if (hasUpgrade('versus', 223)) base = base.add(upgradeEffect('versus', 223))
                let comps = d(player.coop.challenges[11])
                let eff = Decimal.pow(base, comps)
                return eff
            },
            rewardDisplay() {
                return `${format(challengeEffect(this.layer, 11))}x`
            },
            onComplete() {
                let bulk = 1
                let bulkR = 0
                if (hasMilestone('themed', 3)) bulk = 5,
                    bulkR = 4
                if (player.coop.challenges[11] + bulk <= this.completionLimit().toNumber())
                    return player.coop.challenges[11] = player.coop.challenges[11] + bulkR
                else return player.coop.challenges[11] = this.completionLimit().toNumber()
            },
            unlocked() { return hasUpgrade('coop', 25) },
            style() {
                if (inChallenge('coop', 11) && !tmp.coop.challenges[11].canComplete)
                    return {
                        'background-color': '#6a4fae',
                        'border-radius': '5%',
                    }
                else return { 'border-radius': '5%' }
            }
        }
    },
    cpGain() {
        let m = d(1)
        if (hasMilestone('versus', 1)) m = m.times(3)
        if (hasUpgrade('coop', 24)) m = m.times(buyableEffect('coop', 12))
        if (hasUpgrade('versus', 13)) m = m.times(upgradeEffect('versus', 13))
        if (hasUpgrade('coop', 15)) m = m.times(challengeEffect('coop', 11))
        if (hasUpgrade('versus', 35)) m = m.times(upgradeEffect('versus', 35))
        if (hasUpgrade('versus', 42)) m = m.times(upgradeEffect('versus', 42))
        if (hasMilestone('themed', 2)) m = m.times(10)
        if (hasUpgrade('versus', 281)) m = m.times(upgradeEffect('versus', 281))
        return m
    },

    update(diff) {
        let tick = d(0.05)
        if (hasMilestone('themed', 4)) player.coop.check_point = player.coop.check_point.add(tmp.coop.cpGain.times(diff))
    },

    tabFormat: [
        "main-display",
        "prestige-button",
        ["display-text", () => `You only can reset for this layer after getting ${format(1e102)} Expert Endless Clears and ${format(1e24)} SE Endless Clears`],
        ["display-text", () => `You have ` + formatWhole(player.mario.points) + ` Mario`],
        ["display-text", () => `You have ` + formatWhole(player.expert.points) + ` Expert Endless Clears`],
        ["display-text", () => `You have ` + formatWhole(player.s_expert.points) + ` Super Expert Endless Clears`],
        ["display-text", () => `Your best amount of Multiplayer Co-op Clears is ` + formatWhole(player.coop.best)],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Multiplayer Co-op is in Network Play. Meet other 3 players and cooperate to clear a course!`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Multiplayer Co-op layer resets Super Expert Endless layer, keeps Expert Endless layer.`],
                    "milestones",
                ]
            },
            "Check Point": {
                unlocked() { return hasUpgrade('coop', 22) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return `You have ${textStyle_h2(formatWhole(player.coop.check_point), '0a1416', 'ffffff')} Check Points`
                    }],
                    ["display-text", function () {
                        return `You can gain ${formatWhole(tmp.coop.cpGain)} Check Points this MP Co-op reset`
                    }],
                    "buyables",
                ],
                buttonStyle() {
                    return {
                        'background': `linear-gradient(90deg, #0a1416, #ffcf03)`,
                        'border-color': '#ffcf03',
                        'color': 'white',
                    }
                },
            },
            "Challenges": {
                unlocked() { return hasUpgrade('coop', 25) },
                content: [
                    ["blank", "15px"],
                    "challenges",
                ]
            },
        },
    },
})
// 第二十九层：多人对战 (Multiplayer Versus) Res: Versus Rating
function versusRank(rating) {
    rating = d(rating)
    if (rating.lt(1000) && rating.gte(0)) return "D"
    if (rating.lt(2000) && rating.gte(1000)) return "C"
    if (rating.lt(3000) && rating.gte(2000)) return "B"
    if (rating.lt(4000) && rating.gte(3000)) return "A"
    if (rating.lt(5000) && rating.gte(4000)) return "S"
    if (rating.lte(8000) && rating.gte(5000)) return "S<sup>+</sup>" //6000分红名 (Rating 6000: Pink S+)
}

function hasFirst3RowsResearch() {
    return hasUpgrade('versus', 211) && hasUpgrade('versus', 221) && hasUpgrade('versus', 222) && hasUpgrade('versus', 231) && hasUpgrade('versus', 232) && hasUpgrade('versus', 233) && hasUpgrade('versus', 234)
}

function generateExampleInput() {
    let lengthRange = [10, 10]
    if (hasUpgrade('speedrun', 33)) lengthRange = [7, 3]
    let inputLength = Math.ceil(Math.random() * lengthRange[0]) + lengthRange[1]
    let control_name = ["up", "left", "right", "down", "Y", "B", "Z"]
    let control_possibilities = [0, 0.07, 0.2, 0.4, 0.5, 0.6, 0.88, 1]

    let example = []
    for (let i = 0; i < inputLength; i++) {
        let random = Math.random()
        let chosen = 0
        if (random == 1) chosen = 6
        else while (control_possibilities[chosen + 1] <= random) {
            chosen += 1
        }
        example.push(control_name[chosen])
    }

    let extraTime = hasMilestone('versus', 13) ? 8 : 0
    let timeLimit = Math.random() * 12 + 8 + extraTime

    player.versus.example_input = example
    player.versus.control_input = []
    player.versus.batoko_time_limit = d(timeLimit)
    player.versus.batoko_time = d(0)
    player.versus.versus_queue = d(0)
}

addLayer("versus", {
    componentStyles: {
        "upgrade"() {
            if (player.subtabs.versus.stuff == 'Upgrades')
                return {
                    'border-radius': '10%',
                    'width': '150px',
                    'min-height': '150px',
                }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            luck: d(0),
            experienceTotal: d(0),
            experienceBest: d(0),
            experienceSpent: d(0),
            experience: d(0),
            respec: false,
            skill: d(0),
            skillLearning: false,
            skillLearningProgress: d(0),
            lag: d(0),
            bad_player: d(0),
            disconnected: d(0),
            batoko: d(0), //四人图，公平图
            course_you_get: "",
            example_input: [],
            control_input: [],
            versus_queue: d(0), //匹配时间（在这充当冷却）
            batoko_time: d(0),
            batoko_time_limit: d(20),
            control_history: [],
            history_notation: ['', '', '', '', ''],
            history_gain: [d(0), d(0), d(0), d(0), d(0)],
        }
    },

    color: "#FFCF03",                       // The color for this layer, which affects many elements.
    resource: "Versus Rating",            // The name of this layer's main prestige resource.
    row: 14,                                 // The row this layer is on (0 is the first row).
    position: 1,
    branches: ['coop'],
    symbol: "VS",
    tooltip() { return `Versus Rating: ${formatWhole(player.versus.points)}<br>Rank: ${versusRank(player.versus.points)}` },

    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: new Decimal(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "none",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        return new Decimal(1)               // Factor in any bonuses multiplying gain here.
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return new Decimal(1)
    },

    layerShown() { return hasNormalAchievement(205) },          // Returns a bool for if this layer's node should be visible in the tree.


    doReset() {
        return undefined
    },
    upgrades: {
        11: {
            title: "Meet the competition",
            description: "(Versus Rating+1)<sup>2</sup> multiplies MP Co-op Clears gain",
            cost: new Decimal(2),
            unlocked() { return true },
            effect() {
                let eff = player.versus.points.max(0).add(1).pow(2)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        12: {
            title: "4 results",
            description: "(Versus Rating+1)<sup>1.25</sup> multiplies Bosses in S.E. layer gain.",
            cost: new Decimal(60),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.versus.points.max(0).add(1).pow(1.25)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        13: {
            title: "One winner",
            description: "<sup>3</sup>√(Versus Rating+1) multiplies Check Point gain.",
            cost: new Decimal(120),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.versus.points.max(0).add(1).cbrt()
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        14: {
            title: "Let's start over!",
            description: "(Versus Rating PB+1)<sup>5</sup> multiplies Extra Magic gain.",
            cost: new Decimal(211),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.versus.best.max(0).add(1).pow(5)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        15: {
            title: "Don't disconnect",
            description: "(Versus Rating+1)<sup>0.6</sup> multiplies Poison gain and cap.",
            cost: new Decimal(213),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.versus.best.max(0).add(1).pow(0.6)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        21: {
            title: "Goombas on slopes",
            description: `Bowser Jr. completions provide free levels to "Shared Conditions".`,
            cost: new Decimal(217),
            unlocked() { return hasUpgrade(this.layer, 15) },
            effect() {
                let eff = d(challengeCompletions('coop', 11))
                return eff
            },
            effectDisplay() { return "+" + formatWhole(upgradeEffect(this.layer, this.id)) },
        },
        22: {
            title: "Research skills",
            description: `Unlock Researches.`,
            cost: new Decimal(257),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        23: {
            title: "You win!",
            description: `Add 5 free level to "Visible Condition Progress".`,
            cost: new Decimal(424),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        24: {
            title: "Win streak",
            description: `lg(Check Point)<sup>3</sup> multiplies MP Co-op Clears gain.`,
            cost: new Decimal(432),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.coop.check_point.max(10).log(10).pow(3)
                return eff
            },
            effectDisplay() { return formatWhole(upgradeEffect(this.layer, this.id)) + "x" },
        },
        25: {
            title: "A soft loss",
            description: `25x OSC gain.`,
            cost: new Decimal(472),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        31: {
            title: "On/off switches",
            description: `+0.05 "Shared Conditions" base.`,
            cost: new Decimal(860),
            unlocked() { return hasUpgrade(this.layer, 25) },
        },
        32: {
            title: "Storm",
            description() { return `"Visible Condition Progress" level slightly increase its base. (excluding free levels)` },
            cost: new Decimal(2150),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = getBuyableAmount('coop', 12).max(0).div(50)
                if (eff.gte(4)) eff = eff.sub(3).pow(0.55).add(3)
                return eff
            },
            effectDisplay() {
                let d = "+" + format(upgradeEffect(this.layer, this.id))
                if (upgradeEffect(this.layer, this.id).gte(4)) d = d + " (softcapped)"
                return d
            },
        },
        33: {
            title: "Donuts",
            description: `Hardcap of factor A is increased to 3000.`,
            currencyDisplayName: "Cleared Courses",
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee5e74"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        34: {
            title: "Horizontal trampoline",
            description: `Total experience amount multiplies Lag gain.`,
            currencyDisplayName: "Cleared Courses",
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee1e80"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.versus.experienceTotal.max(1)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        35: {
            title: "Vertical trampoline",
            description: `Gain an extra multiplier for Check Points.`,
            cost: new Decimal(2624),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = d(262400)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        41: {
            title: "1-second invincible",
            description: "lg(Check Point) multiplies skill tries gain.",
            cost: new Decimal(2636),
            unlocked() { return hasUpgrade(this.layer, 35) },
            effect() {
                let eff = player.coop.check_point.max(10).log(10).max(1)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        42: {
            title: "Check point softlocked",
            description: "Versus Rating PB past 3000 boosts Check Points gain.",
            currencyDisplayName: "Cleared Courses",
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee2e92"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.versus.best.max(3000).sub(2999).pow(3.65)
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        43: {
            title: "Flag goal please...",
            description: "Pow Blocks effect ^2.5.",
            currencyDisplayName: "Cleared Courses",
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee2.6e108"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        44: {
            title: "+40 per win",
            description: "Versus Rating boosts skill tries gain after Rank A.",
            currencyDisplayName: "Cleared Courses",
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee2.7e131"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.versus.points.max(3000).sub(2999).pow(d(2).add(player.versus.points.max(3000).sub(2999).div(100)))
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        45: {
            title: "Be able to match with 8000 rating players",
            description: "+90 to \"Shared Conditions\" free level.",
            currencyDisplayName: "Cleared Courses",
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee1e472"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.versus.points.max(3000).sub(2999).pow(d(2).add(player.versus.points.max(3000).sub(2999).div(100)))
                return eff
            },
            effectDisplay() { return format(upgradeEffect(this.layer, this.id)) + "x" },
        },
        // Look in the upgrades docs to see what goes here!
        // 研究 researches:
        211: {
            fullDisplay: "1-1",
            cost: new Decimal(0),
            canAfford() { return player.versus.experience.gte(1) },
            onPurchase() { return player.versus.experienceSpent = player.versus.experienceSpent.add(1) },
            effect() {
                let eff = player.versus.experienceTotal.max(0).add(1).pow(10)
                return eff
            },
            tooltip() {
                let t = `Total experience multiplies Two Bosses in S.E. layer.<br><br>
                        Cost: 1 experience<br><br>
                        Currently: ${format(this.effect())}x`
                return t
            },
            unlocked() { return hasUpgrade(this.layer, 22) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#ffcf03'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        221: {
            fullDisplay: "2-1",
            cost: new Decimal(0),
            branches: [211],
            canAfford() { return player.versus.experience.gte(2) },
            onPurchase() { return player.versus.experienceSpent = player.versus.experienceSpent.add(2) },
            effect() {
                let eff = player.s_expert.lava.max(decimalNatral).ln()
                return eff
            },
            tooltip() {
                let t = `ln(Lava) multiplies Lava gain and cap.<br><br>
                        Cost: 2 experience<br><br>
                        Currently: ${format(this.effect())}x`
                return t
            },
            unlocked() { return hasUpgrade(this.layer, 211) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#ffcf03'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        222: {
            fullDisplay: "2-2",
            cost: new Decimal(0),
            branches: [211],
            canAfford() { return player.versus.experience.gte(2) },
            onPurchase() { return player.versus.experienceSpent = player.versus.experienceSpent.add(2) },
            effect() {
                let eff = player.s_expert.poison.max(decimalNatral).ln()
                return eff
            },
            tooltip() {
                let t = `ln(Poison) multiplies Poison gain and cap.<br><br>
                        Cost: 2 experience<br><br>
                        Currently: ${format(this.effect())}x`
                return t
            },
            unlocked() { return hasUpgrade(this.layer, 211) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#ffcf03'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        223: {
            fullDisplay: "2-3",
            cost: new Decimal(0),
            branches: [211],
            canAfford() { return player.versus.experience.gte(5) },
            onPurchase() { return player.versus.experienceSpent = player.versus.experienceSpent.add(5) },
            effect() {
                let eff = player.toad.tierlayer.max(0).div(2)
                if (hasUpgrade('speedrun', 44)) eff = eff.pow(2).max(eff)
                return eff
            },
            tooltip() {
                let t = `Toad layers of tier increases "Bowser Jr." reward base.<br><br>
                        Cost: 5 experience<br><br>
                        Currently: +${format(this.effect())}`
                return t
            },
            unlocked() { return hasUpgrade(this.layer, 211) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#ffcf03'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        231: {
            fullDisplay: "3-1",
            cost: new Decimal(0),
            branches: [221],
            canAfford() { return player.versus.experience.gte(6) },
            onPurchase() { return player.versus.experienceSpent = player.versus.experienceSpent.add(6) },
            effect() {
                let eff = getBuyableAmount('easy', 12).max(1).pow(10)
                return eff
            },
            tooltip() {
                let t = `"Ikyota challenging" level provides an effect to Normal Endless Clears again.<br><br>
                        Cost: 6 experience<br><br>
                        Currently: ${format(this.effect())}x`
                return t
            },
            unlocked() { return hasUpgrade(this.layer, 221) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#ffcf03'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        232: {
            fullDisplay: "3-2",
            cost: new Decimal(0),
            branches: [222],
            canAfford() { return player.versus.experience.gte(6) },
            onPurchase() { return player.versus.experienceSpent = player.versus.experienceSpent.add(6) },
            effect() {
                let eff = getBuyableAmount('easy', 12).max(1).pow(0.9)
                return eff
            },
            tooltip() {
                let t = `"Ikyota challenging" level provides an effect to Super Expert Endless Clears again.<br><br>
                        Cost: 6 experience<br><br>
                        Currently: ${format(this.effect())}x`
                return t
            },
            unlocked() { return hasUpgrade(this.layer, 222) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#ffcf03'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        233: {
            fullDisplay: "3-3",
            cost: new Decimal(0),
            branches: [222],
            canAfford() { return player.versus.experience.gte(8) },
            onPurchase() { return player.versus.experienceSpent = player.versus.experienceSpent.add(8) },
            effect() {
                let eff = getBuyableAmount('easy', 12).max(1).pow(0.9)
                return eff
            },
            tooltip() {
                let t = `${f(1e40)}x Super Expert Endless Clears again.<br><br>
                        Cost: 8 experience<br>`
                return t
            },
            unlocked() { return hasUpgrade(this.layer, 222) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#ffcf03'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        234: {
            fullDisplay: "3-4",
            cost: new Decimal(0),
            branches: [223],
            canAfford() { return player.versus.experience.gte(5) },
            onPurchase() { return player.versus.experienceSpent = player.versus.experienceSpent.add(5) },
            effect() {
            },
            tooltip() {
                let t = `${f('1e345')}x Normal Endless Clears again.<br><br>
                        Cost: 5 experience<br>`
                return t
            },
            unlocked() { return hasUpgrade(this.layer, 223) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#ffcf03'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        241: {
            fullDisplay: "4-1",
            cost: new Decimal(0),
            branches: [231, 232, 233, 234],
            canAfford() { return player.versus.experience.gte(9) },
            onPurchase() { return player.versus.experienceSpent = player.versus.experienceSpent.add(9) },
            effect() {
            },
            tooltip() {
                let t = `Unlock factor D for Versus Rating.<br><br>
                        Cost: 9 experience<br>`
                return t
            },
            unlocked() { return hasUpgrade(this.layer, 231) && hasUpgrade(this.layer, 232) && hasUpgrade(this.layer, 233) && hasUpgrade(this.layer, 234) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#ffcf03'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        251: {
            fullDisplay: "5-1",
            cost: new Decimal(0),
            branches: [241],
            canAfford() { return player.versus.experience.gte(15) },
            onPurchase() { return player.versus.experienceSpent = player.versus.experienceSpent.add(15) },
            effect() {
            },
            tooltip() {
                let t = `Add ${f(5000)} to D.<br><br>
                        Cost: 15 experience<br>`
                return t
            },
            unlocked() { return hasUpgrade(this.layer, 241) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#ffcf03'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        252: {
            fullDisplay: "5-2",
            cost: new Decimal(0),
            branches: [241],
            canAfford() { return player.versus.experience.gte(12) },
            onPurchase() { return player.versus.experienceSpent = player.versus.experienceSpent.add(12) },
            effect() {
            },
            tooltip() {
                let t = `Add ${f(3000)} to D.<br><br>
                        Cost: 12 experience<br>`
                return t
            },
            unlocked() { return hasUpgrade(this.layer, 241) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#ffcf03'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        253: {
            fullDisplay: "5-3",
            cost: new Decimal(0),
            branches: [241],
            canAfford() { return player.versus.experience.gte(10) },
            onPurchase() { return player.versus.experienceSpent = player.versus.experienceSpent.add(10) },
            effect() {
            },
            tooltip() {
                let t = `Add ${f(2000)} to D.<br><br>
                        Cost: 10 experience<br>`
                return t
            },
            unlocked() { return hasUpgrade(this.layer, 241) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#ffcf03'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        261: {
            fullDisplay: "6-1",
            cost: new Decimal(0),
            branches: [251, 252, 253],
            canAfford() { return player.versus.experience.gte(9) },
            onPurchase() { return player.versus.experienceSpent = player.versus.experienceSpent.add(9) },
            effect() {
            },
            tooltip() {
                let t = `Lava effect formula right side is y instead of y/10x.<br><br>
                        Cost: 9 experience<br>`
                return t
            },
            unlocked() { return hasUpgrade(this.layer, 251) || hasUpgrade(this.layer, 252) || hasUpgrade(this.layer, 253) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#ffcf03'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        262: {
            fullDisplay: "6-2",
            cost: new Decimal(0),
            branches: [251, 252, 253],
            canAfford() { return player.versus.experience.gte(14) },
            onPurchase() { return player.versus.experienceSpent = player.versus.experienceSpent.add(14) },
            effect() {
                let eff = player.versus.experienceTotal.max(0).add(1).pow(1.25)
                return eff
            },
            tooltip() {
                let t = `Total experience boost lag competition played gain.<br><br>
                        Cost: 14 experience<br><br>
                        Currently: ${format(this.effect())}x`
                return t
            },
            unlocked() { return hasUpgrade(this.layer, 251) || hasUpgrade(this.layer, 252) || hasUpgrade(this.layer, 253) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#ffcf03'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        271: {
            fullDisplay: "7-1",
            cost: new Decimal(0),
            branches: [261, 262],
            canAfford() { return player.versus.experience.gte(50) && player.themed.points.gte(1e17) },
            onPurchase() {
                return player.versus.experienceSpent = player.versus.experienceSpent.add(50),
                    player.themed.points = player.themed.points.sub(1e17)
            },
            tooltip() {
                let tc = "???"
                if (tmp.themed.layerShown) tc = "Themed Clears"
                let t = `Add ${f(1000000)} to D.<br><br>
                        Cost: 50 experience and ${format(1e17)} ${tc}`
                return t
            },
            unlocked() { return hasUpgrade(this.layer, 261) || hasUpgrade(this.layer, 262) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#748bff'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        281: {
            fullDisplay: "8-1",
            cost: new Decimal(0),
            branches: [271],
            canAfford() { return player.versus.experience.gte(30) && player.themed.points.gte(5e37) },
            onPurchase() {
                return player.versus.experienceSpent = player.versus.experienceSpent.add(30),
                    player.themed.points = player.themed.points.sub(5e37)
            },
            effect() {
                let eff = d(2).pow(player.versus.best.max(3200).sub(3200))
                if (hasUpgrade('versus', 311)) eff = eff.pow(tmp.versus.upgrades[311].base)
                if (hasUpgrade('versus', 312)) eff = eff.pow(tmp.versus.upgrades[312].base)
                if (hasUpgrade('versus', 313)) eff = eff.pow(upgradeEffect('versus', 313))
                if (hasUpgrade('versus', 314)) eff = eff.pow(upgradeEffect('versus', 314))
                return eff
            },
            tooltip() {
                let t = `5x World 1-1 clears and Batoko Wins gain, Versus Rating PB past 3200 multiplies Check Points gain.<br><br>
                        Cost: 30 experience and ${format(5e37)} Themed Courses<br>
                        Currently: ${format(this.effect())}x`
                return t
            },
            unlocked() { return hasMilestone('versus', 12) && tmp.versus.researchRow1to7bought },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#748bff'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        282: {
            fullDisplay: "8-2",
            cost: new Decimal(0),
            branches: [271],
            canAfford() { return player.versus.experience.gte(140) && player.themed.points.gte(3e71) },
            onPurchase() {
                return player.versus.experienceSpent = player.versus.experienceSpent.add(140),
                    player.themed.points = player.themed.points.sub(3e71)
            },
            effect() {
                let eff = player.versus.batoko.times(100).add(1).pow(0.5)
                return eff
            },
            tooltip() {
                let t = `Batoko Wins multiply World 1-1 clears.<br><br>
                        Cost: 140 experience and ${format(3e71)} Themed Courses<br>
                        Currently: ${format(this.effect())}x`
                return t
            },
            unlocked() { return hasMilestone('versus', 12) && tmp.versus.researchRow1to7bought },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#748bff'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        283: {
            fullDisplay: "8-3",
            cost: new Decimal(0),
            branches: [271],
            canAfford() { return player.versus.experience.gte(161) && player.themed.points.gte(3e80) },
            onPurchase() {
                return player.versus.experienceSpent = player.versus.experienceSpent.add(161),
                    player.themed.points = player.themed.points.sub(3e80)
            },
            effect() {
                let eff = player.themed.w11.times(98320).add(1).pow(0.14)
                return eff
            },
            tooltip() {
                let t = `World 1-1 clears multiply Batoko Wins.<br><br>
                        Cost: 161 experience and ${format(3e80)} Themed Courses<br>
                        Currently: ${format(this.effect())}x`
                return t
            },
            unlocked() { return hasMilestone('versus', 12) && tmp.versus.researchRow1to7bought },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#748bff'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        291: {
            fullDisplay: "9-1",
            cost: new Decimal(0),
            branches: [281, 282, 283],
            canAfford() { return player.versus.experience.gte(255) && player.speedrun.points.gte(10000) },
            onPurchase() {
                return player.versus.experienceSpent = player.versus.experienceSpent.add(255),
                    player.speedrun.points = player.speedrun.points.sub(10000)
            },
            tooltip() {
                let t = `25x Speedrun Courses, World 1-1 clears and Batoko Wins gain.<br><br>
                        Cost: 255 experience and ${format(10000)} Speedrun Courses<br>`
                return t
            },
            unlocked() { return hasUpgrade('speedrun', 14) && (hasUpgrade('versus', 281) && hasUpgrade('versus', 282) && hasUpgrade('versus', 283)) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#6c3b14'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        301: {
            fullDisplay: "10-1",
            cost: new Decimal(0),
            branches: [291],
            canAfford() { return player.versus.experience.gte(195) && player.speedrun.points.gte(1e12) && !(hasUpgrade('versus', 302) || hasUpgrade('versus', 303) || hasUpgrade('versus', 304)) },
            onPurchase() {
                return player.versus.experienceSpent = player.versus.experienceSpent.add(195),
                    player.speedrun.points = player.speedrun.points.sub(1e12)
            },
            base() {
                let b = d(1500)
                if (hasUpgrade('versus', 331)) b = b.pow(2)
                return b
            },
            effect() {
                let t = d(player.speedrun.resetTime)
                let eff = this.base().pow(d(1).sub(t.div(20)).max(0))
                return eff
            },
            tooltip() {
                let t = `${textColor("[Active]", 'e60000')} Gain more Speedrun Courses based on how fast you reset for SR layer. (start at ${f(this.base())}x)<br><br>
                        Cost: 195 experience and ${format(1e12)} Speedrun Courses<br>
                        Currently: ${format(this.effect())}x`
                return t
            },
            unlocked() { return hasUpgrade('versus', 291) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#6c3b14'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#e60000',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        302: {
            fullDisplay: "10-2",
            cost: new Decimal(0),
            branches: [291],
            canAfford() { return player.versus.experience.gte(195) && player.speedrun.points.gte(1e12) && !(hasUpgrade('versus', 301) || hasUpgrade('versus', 303) || hasUpgrade('versus', 304)) },
            onPurchase() {
                return player.versus.experienceSpent = player.versus.experienceSpent.add(195),
                    player.speedrun.points = player.speedrun.points.sub(1e12)
            },
            base() {
                let b = d(50)
                if (hasUpgrade('versus', 331)) b = b.pow(2)
                return b
            },
            tooltip() {
                let t = `${textColor("[Passive]", '5e3386')} ${f(this.base())}x Speedrun Courses gain.<br><br>
                        Cost: 195 experience and ${format(1e12)} Speedrun Courses<br>`
                return t
            },
            unlocked() { return hasUpgrade('versus', 291) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#6c3b14'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#5e3386',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        303: {
            fullDisplay: "10-3",
            cost: new Decimal(0),
            branches: [291],
            canAfford() { return player.versus.experience.gte(195) && player.speedrun.points.gte(1e12) && !(hasUpgrade('versus', 302) || hasUpgrade('versus', 301) || hasUpgrade('versus', 304)) },
            onPurchase() {
                return player.versus.experienceSpent = player.versus.experienceSpent.add(195),
                    player.speedrun.points = player.speedrun.points.sub(1e12)
            },
            base() {
                let b = d(100000)
                if (hasUpgrade('versus', 331)) b = b.pow(2)
                return b
            },
            effect() {
                let t = d(player.speedrun.resetTime)
                let eff = this.base().pow(t.min(600).div(600))
                return eff
            },
            tooltip() {
                let t = `${textColor("[Idle]", '0080ff')} Gain more Speedrun Courses based on time spent in this SR reset (hardcap at ${f(this.base())}x in 10 minutes).<br><br>
                        Cost: 195 experience and ${format(1e12)} Speedrun Courses<br>
                        Currently: ${format(this.effect())}x`
                return t
            },
            unlocked() { return hasUpgrade('versus', 291) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#6c3b14'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#0080ff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        304: {
            fullDisplay: "10-4",
            cost: new Decimal(0),
            branches: [291],
            canAfford() { return player.versus.experience.gte(195) && player.speedrun.points.gte(1e12) && !(hasUpgrade('versus', 302) || hasUpgrade('versus', 303) || hasUpgrade('versus', 301)) },
            onPurchase() {
                return player.versus.experienceSpent = player.versus.experienceSpent.add(195),
                    player.speedrun.points = player.speedrun.points.sub(1e12)
            },
            base() {
                let b = d(10000)
                if (hasUpgrade('versus', 331)) b = b.pow(2).times(10)
                return b
            },
            effect() {
                let layer = 'speedrun'
                let eff = tmp[layer].baseAmount.div(tmp[layer].requires).pow(tmp[layer].exponent).times(tmp[layer].gainMult).pow(tmp[layer].gainExp).times(this.base())
                return eff
            },
            tooltip() {
                let t = `${textColor("[Technical]", 'c8ff00')} Gain ${f(this.base())}x of your reset gain for Speedrun Courses immediately on winning a Batoko competition.<br><br>
                        Cost: 195 experience and ${format(1e12)} Speedrun Courses<br>
                        Currently: ${format(this.effect())} Speedrun Courses gain on winning a Batoko competition`
                return t
            },
            unlocked() { return hasUpgrade('versus', 291) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#6c3b14'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#c8ff00',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        311: {
            fullDisplay: "11-1",
            cost: new Decimal(0),
            branches: [301],
            canAfford() { return player.versus.experience.gte(405) && player.speedrun.points.gte(1e24) && hasUpgrade('versus', 301) },
            onPurchase() {
                return player.versus.experienceSpent = player.versus.experienceSpent.add(405),
                    player.speedrun.points = player.speedrun.points.sub(1e24)
            },
            base() {
                let b = d(1.18)
                if (hasUpgrade('versus', 332)) b = b.add(0.12)
                return b
            },
            tooltip() {
                let t = `${textColor("[Active]", 'e60000')} Research 8-1 effect is raised to ^${f(this.base())}, but disable MP Co-op buyables autobuyers.<br><br>
                        Cost: 405 experience and ${format(1e24)} Speedrun Courses<br>`
                return t
            },
            unlocked() { return hasUpgrade('versus', 301) || hasUpgrade('versus', 302) || hasUpgrade('versus', 303) || hasUpgrade('versus', 304) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#6c3b14'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#e60000',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        312: {
            fullDisplay: "11-2",
            cost: new Decimal(0),
            branches: [302],
            canAfford() { return player.versus.experience.gte(405) && player.speedrun.points.gte(1e24) && hasUpgrade('versus', 302) },
            onPurchase() {
                return player.versus.experienceSpent = player.versus.experienceSpent.add(405),
                    player.speedrun.points = player.speedrun.points.sub(1e24)
            },
            base() {
                let b = d(1.12)
                if (hasUpgrade('versus', 332)) b = b.add(0.12)
                return b
            },
            tooltip() {
                let t = `${textColor("[Passive]", '5e3386')} Research 8-1 effect is raised to ^${f(this.base())}.<br><br>
                        Cost: 405 experience and ${format(1e24)} Speedrun Courses<br>`
                return t
            },
            unlocked() { return hasUpgrade('versus', 301) || hasUpgrade('versus', 302) || hasUpgrade('versus', 303) || hasUpgrade('versus', 304) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#6c3b14'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#5e3386',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        313: {
            fullDisplay: "11-3",
            cost: new Decimal(0),
            branches: [303],
            canAfford() { return player.versus.experience.gte(405) && player.speedrun.points.gte(1e24) && hasUpgrade('versus', 303) },
            onPurchase() {
                return player.versus.experienceSpent = player.versus.experienceSpent.add(405),
                    player.speedrun.points = player.speedrun.points.sub(1e24)
            },
            base() {
                let b = d(1.18)
                if (hasUpgrade('versus', 332)) b = b.add(0.12)
                return b
            },
            effect() {
                let t = d(player.coop.resetTime)
                let eff = this.base().sub(1).div(108).times(t).add(1).min(this.base())
                return eff
            },
            tooltip() {
                let t = `${textColor("[Idle]", '0080ff')} Research 8-1 effect is raised based on time spent on this Co-op reset. (hardcap at ^${f(this.base())})<br><br>
                        Cost: 405 experience and ${format(1e24)} Speedrun Courses<br>
                        Currently: ^${format(this.effect())}`
                return t
            },
            unlocked() { return hasUpgrade('versus', 301) || hasUpgrade('versus', 302) || hasUpgrade('versus', 303) || hasUpgrade('versus', 304) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#6c3b14'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#0080ff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        314: {
            fullDisplay: "11-4",
            cost: new Decimal(0),
            branches: [304],
            canAfford() { return player.versus.experience.gte(405) && player.speedrun.points.gte(1e24) && hasUpgrade('versus', 304) },
            onPurchase() {
                return player.versus.experienceSpent = player.versus.experienceSpent.add(405),
                    player.speedrun.points = player.speedrun.points.sub(1e24)
            },
            base() {
                let b = d(1.15)
                if (hasUpgrade('versus', 332)) b = b.add(0.12)
                return b
            },
            base2() {
                let b = d(0.5)
                if (hasUpgrade('versus', 332)) b = b.add(0.12)
                return b
            },
            effect() {
                if (player.versus.versus_queue.lt(10)) return d(this.base2())
                else return d(this.base())
            },
            tooltip() {
                let t = `${textColor("[Technical]", 'c8ff00')} Research 8-1 effect is raised. If you're in Batoko queue, the effect is ^${f(this.base2())}, If you're in the competition, the effect is ^${f(this.base())}<br><br>
                        Cost: 405 experience and ${format(1e24)} Speedrun Courses<br>
                        Currently: ^${format(this.effect())}`
                return t
            },
            unlocked() { return hasUpgrade('versus', 301) || hasUpgrade('versus', 302) || hasUpgrade('versus', 303) || hasUpgrade('versus', 304) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#6c3b14'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#c8ff00',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        321: {
            fullDisplay: "12-1",
            cost: new Decimal(0),
            branches: [311],
            canAfford() { return player.versus.experience.gte(1185) && player.speedrun.points.gte(1e60) && hasUpgrade('versus', 311) },
            onPurchase() {
                return player.versus.experienceSpent = player.versus.experienceSpent.add(1185),
                    player.speedrun.points = player.speedrun.points.sub(1e60)
            },
            tooltip() {
                let t = `${textColor("[Active]", 'e60000')} Re-enable MP Co-op buyables autobuyers.<br><br>
                        Cost: ${f(1185)} experience and ${format(1e60)} Speedrun Courses<br>`
                return t
            },
            unlocked() { return hasUpgrade('versus', 311) || hasUpgrade('versus', 312) || hasUpgrade('versus', 313) || hasUpgrade('versus', 314) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#6c3b14'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#e60000',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        322: {
            fullDisplay: "12-2",
            cost: new Decimal(0),
            branches: [312],
            canAfford() { return player.versus.experience.gte(1185) && player.speedrun.points.gte(1e60) && hasUpgrade('versus', 312) },
            onPurchase() {
                return player.versus.experienceSpent = player.versus.experienceSpent.add(1185),
                    player.speedrun.points = player.speedrun.points.sub(1e60)
            },
            tooltip() {
                let t = `${textColor("[Passive]", '5e3386')} ${f(2025)}x TA Course gain.<br><br>
                        Cost: ${f(1185)} experience and ${format(1e60)} Speedrun Courses<br>`
                return t
            },
            unlocked() { return hasUpgrade('versus', 311) || hasUpgrade('versus', 312) || hasUpgrade('versus', 313) || hasUpgrade('versus', 314) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#6c3b14'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#5e3386',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        323: {
            fullDisplay: "12-3",
            cost: new Decimal(0),
            branches: [313],
            canAfford() { return player.versus.experience.gte(1185) && player.speedrun.points.gte(1e60) && hasUpgrade('versus', 313) },
            onPurchase() {
                return player.versus.experienceSpent = player.versus.experienceSpent.add(1185),
                    player.speedrun.points = player.speedrun.points.sub(1e60)
            },
            effect() {
                let t = d(player.coop.resetTime)
                let eff = t.times(1.5).add(1).min(500)
                return eff
            },
            tooltip() {
                let t = `${textColor("[Idle]", '0080ff')} Multiply TA Courses gain based on time spent on this Co-op reset. (hardcap at 500x)<br><br>
                        Cost: ${f(1185)} experience and ${format(1e60)} Speedrun Courses<br>
                        Currently: ${format(this.effect())}x`
                return t
            },
            unlocked() { return hasUpgrade('versus', 311) || hasUpgrade('versus', 312) || hasUpgrade('versus', 313) || hasUpgrade('versus', 314) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#6c3b14'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#0080ff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        324: {
            fullDisplay: "12-4",
            cost: new Decimal(0),
            branches: [314],
            canAfford() { return player.versus.experience.gte(1185) && player.speedrun.points.gte(1e60) && hasUpgrade('versus', 314) },
            onPurchase() {
                return player.versus.experienceSpent = player.versus.experienceSpent.add(1185),
                    player.speedrun.points = player.speedrun.points.sub(1e60)
            },
            tooltip() {
                let t = `${textColor("[Technical]", 'c8ff00')} Passive gain 10% of Batoko Wins per second, 100x Batoko Wins gain<br><br>
                        Cost: ${f(1185)} experience and ${format(1e60)} Speedrun Courses<br>`
                return t
            },
            unlocked() { return hasUpgrade('versus', 311) || hasUpgrade('versus', 312) || hasUpgrade('versus', 313) || hasUpgrade('versus', 314) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#6c3b14'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#c8ff00',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        331: {
            fullDisplay: "13-1",
            cost: new Decimal(0),
            branches: [321, 322, 323, 324],
            canAfford() { return player.versus.experience.gte(1600) && player.speedrun.points.gte(1e86) && (hasUpgrade('versus', 321) || hasUpgrade('versus', 322) || hasUpgrade('versus', 323) || hasUpgrade('versus', 324)) },
            onPurchase() {
                return player.versus.experienceSpent = player.versus.experienceSpent.add(1600),
                    player.speedrun.points = player.speedrun.points.sub(1e86)
            },
            tooltip() {
                let t = `${textColor("[Unite]", 'd0d0a0')} Square row 10 researches effects (10-4 effect ^2 then x10)<br><br>
                        Cost: ${f(1600)} experience and ${format(1e86)} Speedrun Courses<br>`
                return t
            },
            unlocked() { return hasUpgrade('versus', 321) || hasUpgrade('versus', 322) || hasUpgrade('versus', 323) || hasUpgrade('versus', 324) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#6c3b14'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#d0d0a0',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        332: {
            fullDisplay: "13-2",
            cost: new Decimal(0),
            branches: [321, 322, 323, 324],
            canAfford() { return player.versus.experience.gte(1715) && player.speedrun.points.gte(1e93) && (hasUpgrade('versus', 321) || hasUpgrade('versus', 322) || hasUpgrade('versus', 323) || hasUpgrade('versus', 324)) },
            onPurchase() {
                return player.versus.experienceSpent = player.versus.experienceSpent.add(1715),
                    player.speedrun.points = player.speedrun.points.sub(1e93)
            },
            tooltip() {
                let t = `${textColor("[Unite]", 'd0d0a0')} +0.12 to row 11 researches effects<br><br>
                        Cost: ${f(1715)} experience and ${format(1e93)} Speedrun Courses<br>`
                return t
            },
            unlocked() { return hasUpgrade('versus', 321) || hasUpgrade('versus', 322) || hasUpgrade('versus', 323) || hasUpgrade('versus', 324) },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#6c3b14'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#d0d0a0',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
    },
    buyables: {
        11: {
            title: "",
            cost(x) {
                let c = (x.add(1)).times(200)
                if (x.gte(40)) c = d(Infinity)
                return c
            },
            purchaseLimit() { return d(40) },
            mult() {
                let m = d(1)
                if (hasUpgrade('coop', 53)) m = m.times(2)
                if (hasUpgrade('themed', 34)) m = m.times(upgradeEffect('themed', 34))
                if (hasUpgrade('speedrun', 24)) m = m.add(upgradeEffect('speedrun', 24))
                return m
            },
            gain() {
                let m = this.mult()
                let g = getBuyableAmount(this.layer, this.id).times(m)
                return g
            },
            display() {
                let display = ` Gain experience from VS Rating. <br>
                Bought: ${formatWhole(player[this.layer].buyables[this.id])}/40<br>
                Mult: ${format(tmp.versus.buyables[11].mult)}<br>
                Cost: ${formatWhole(this.cost())} VS Rating`
                return display
            },
            canAfford() { return player[this.layer].points.gte(this.cost()) },
            buy() {
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            unlocked() { return hasUpgrade('versus', 22) },
            style() {
                let s = {
                    'border-radius': '0%',
                    'max-height': '100px',
                    'border-color': '#ffffff',
                    'line-height': '80%',
                }
                return s
            },
            tooltip() {
                return `Gain from VS Rating: ${format(this.gain())} experience`
            },
        },
        12: {
            title: "",
            cost(x) {
                let c = Decimal.pow(100000, x.max(0)).times(1e16)
                return c
            },
            mult() {
                let m = d(1)
                return m
            },
            gain() {
                let m = this.mult()
                let g = getBuyableAmount(this.layer, this.id).times(m)
                return g
            },
            display() {
                let display = ` Gain experience from MP Co-op Clears. <br>
                Bought: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Mult: ${formatWhole(tmp.versus.buyables[12].mult)}<br>
                Cost: ${formatWhole(this.cost())} Coop Clears`
                return display
            },
            canAfford() { return player.coop.points.gte(this.cost()) },
            buy() {
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            unlocked() { return hasUpgrade('versus', 22) },
            style() {
                let s = {
                    'border-radius': '0%',
                    'max-height': '100px',
                    'border-color': '#ffffff',
                    'line-height': '80%',
                }
                return s
            },
            tooltip() {
                return `Gain from MP Co-op Clears: ${formatWhole(this.gain())} experience`
            },
        },
        13: {
            title: "",
            cost(x) {
                let c = Decimal.pow(10, Decimal.pow(10, Decimal.pow(1e15, x.max(0)).times(1e42)))
                return c
            },
            mult() {
                let m = d(1)
                if (hasUpgrade('coop', 55)) m = m.times(2)
                if (hasMilestone('versus', 11)) m = m.add(1)
                if (hasUpgrade('themed', 34)) m = m.times(upgradeEffect('themed', 34))
                return m
            },
            gain() {
                let m = this.mult()
                let g = getBuyableAmount(this.layer, this.id).times(m)
                return g
            },
            display() {
                let display = ` Gain experience from Cleared Courses. <br>
                Bought: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Mult: ${format(tmp.versus.buyables[13].mult)}<br>
                Cost: ${formatWhole(this.cost())} Cleared Courses`
                return display
            },
            canAfford() { return player.points.gte(this.cost()) },
            buy() {
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            unlocked() { return hasUpgrade('versus', 22) },
            style() {
                let s = {
                    'border-radius': '0%',
                    'max-height': '100px',
                    'border-color': '#ffffff',
                    'line-height': '80%',
                }
                return s
            },
            tooltip() {
                return `Gain from Cleared Courses: ${format(this.gain())} experience`
            },
        },
        14: {
            title: "",
            cost(x) {
                let c = Decimal.pow(3, x.max(0).add(1).pow(1.2))
                return c
            },
            mult() {
                let m = d(1)
                return m
            },
            gain() {
                let m = this.mult()
                let g = getBuyableAmount(this.layer, this.id).times(m)
                return g
            },
            display() {
                let display = ` Gain experience from your lag competition played. <br>
                Bought: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Mult: ${formatWhole(tmp.versus.buyables[14].mult)}<br>
                Cost: ${format(this.cost())} lag competition played`
                return display
            },
            canAfford() { return player.versus.lag.gte(this.cost()) },
            buy() {
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            unlocked() { return hasUpgrade('coop', 52) || tmp.themed.layerShown },
            style() {
                let s = {
                    'border-radius': '0%',
                    'max-height': '100px',
                    'border-color': '#ffffff',
                    'line-height': '80%',
                }
                return s
            },
            tooltip() {
                return `Gain from Lag competition played: ${formatWhole(this.gain())} experience`
            },
        },
    },
    clickables: {
        11: {
            display() {
                return "Respec Research on next MP Co-op reset"
            },
            unlocked() {
                return hasUpgrade("versus", 22)
            },
            canClick() {
                return true
            },
            onClick() {
                if (player.versus.respec) player.versus.respec = false
                else player.versus.respec = true
            },
            style() {
                let color = '#ffcf03'
                if (!player.versus.respec) color = '#bf8f8f'
                let s = {
                    'min-height': '30px',
                    'width': '480px',
                    'border-radius': '0%',
                    'font-size': "20px",
                    'background-color': color
                }
                return s
            },
        },
        21: {
            display() {
                return "Start to learn VS Skills!"
            },
            unlocked() {
                return player.toad.tierlayer.gte(13)
            },
            canClick() {
                return !player.versus.skillLearning
            },
            onClick() {
                return player.versus.skillLearning = true
            },
            style() {
                let s = {
                    'min-height': '30px',
                    'width': '240px',
                    'border-radius': '5%',
                    'font-size': "15px",
                }
                return s
            },
        },
        31: {
            display() {
                return "↑"
            },
            unlocked() {
                return player.toad.tierlayer.gte(21)
            },
            canClick() {
                return player.versus.versus_queue.gte(tmp.versus.queueTime)
            },
            onClick() {
                player.versus.control_input.push("up")
            },
            style() {
                let s = {
                    'min-height': '60px',
                    'width': '60px',
                    'border-radius': '100%',
                    'font-size': "20px",
                }
                return s
            },
        },
        41: {
            display() {
                return "←"
            },
            unlocked() {
                return player.toad.tierlayer.gte(21)
            },
            canClick() {
                return player.versus.versus_queue.gte(tmp.versus.queueTime)
            },
            onClick() {
                player.versus.control_input.push("left")
            },
            style() {
                let s = {
                    'min-height': '60px',
                    'width': '60px',
                    'border-radius': '100%',
                    'font-size': "20px",
                }
                return s
            },
        },
        42: {
            display() {
                return "→"
            },
            unlocked() {
                return player.toad.tierlayer.gte(21)
            },
            canClick() {
                return player.versus.versus_queue.gte(tmp.versus.queueTime)
            },
            onClick() {
                player.versus.control_input.push("right")
            },
            style() {
                let s = {
                    'min-height': '60px',
                    'width': '60px',
                    'border-radius': '100%',
                    'font-size': "20px",
                }
                return s
            },
        },
        51: {
            display() {
                return "↓"
            },
            unlocked() {
                return player.toad.tierlayer.gte(21)
            },
            canClick() {
                return player.versus.versus_queue.gte(tmp.versus.queueTime)
            },
            onClick() {
                player.versus.control_input.push("down")
            },
            style() {
                let s = {
                    'min-height': '60px',
                    'width': '60px',
                    'border-radius': '100%',
                    'font-size': "20px",
                }
                return s
            },
        },
        61: {
            display() {
                return "Y"
            },
            unlocked() {
                return player.toad.tierlayer.gte(21)
            },
            canClick() {
                return player.versus.versus_queue.gte(tmp.versus.queueTime)
            },
            onClick() {
                player.versus.control_input.push("Y")
            },
            style() {
                let s = {
                    'min-height': '60px',
                    'width': '60px',
                    'border-radius': '100%',
                    'font-size': "20px",
                }
                return s
            },
        },
        71: {
            display() {
                return "B"
            },
            unlocked() {
                return player.toad.tierlayer.gte(21)
            },
            canClick() {
                return player.versus.versus_queue.gte(tmp.versus.queueTime)
            },
            onClick() {
                player.versus.control_input.push("B")
            },
            style() {
                let s = {
                    'min-height': '60px',
                    'width': '60px',
                    'border-radius': '100%',
                    'font-size': "20px",
                }
                return s
            },
        },
        81: {
            display() {
                return "L"
            },
            unlocked() {
                return player.toad.tierlayer.gte(21)
            },
            canClick() {
                return player.versus.versus_queue.gte(tmp.versus.queueTime)
            },
            onClick() {
                player.versus.control_input.push("L")
            },
            style() {
                let s = {
                    'min-height': '36px',
                    'width': '64px',
                    'border-radius': '3px',
                    'font-size': "20px",
                    transform: "rotate(330deg)",
                }
                return s
            },
        },
        82: {
            display() {
                return "R"
            },
            unlocked() {
                return player.toad.tierlayer.gte(21)
            },
            canClick() {
                return player.versus.versus_queue.gte(tmp.versus.queueTime)
            },
            onClick() {
                player.versus.control_input.push("R")
            },
            style() {
                let s = {
                    'min-height': '36px',
                    'width': '64px',
                    'border-radius': '3px',
                    'font-size': "20px",
                    transform: "rotate(30deg)",
                }
                return s
            },
        },
    },
    milestones: {
        0: {
            requirementDescription: "Versus Rating: 1",
            effectDescription: "+0.35 to Lava effect left powerer (to 3.85).",
            done() { return player.versus.points.gte(1) },
        },
        1: {
            requirementDescription: "Versus Rating: 12",
            effectDescription: "Triple Check Point gain.",
            done() { return player.versus.points.gte(12) },
            unlocked() { return hasUpgrade('coop', 22) },
        },
        2: {
            requirementDescription: "First Win - Versus Rating: 210",
            effectDescription: "Autobuy S.E. layer upgrades and ^1.5 Poison effect.",
            done() { return player.versus.points.gte(210) },
            unlocked() { return hasUpgrade('coop', 22) },
        },
        3: {
            requirementDescription: "Versus Rating: 222",
            effectDescription: "Keep attack mode in S.E. layer on row 15 reset.",
            done() { return player.versus.points.gte(222) },
            unlocked() { return hasUpgrade('coop', 22) },
        },
        4: {
            requirementDescription: "Versus Rating: 444",
            effectDescription() { return `${f(1000)}x BRC gain but 10x Flaw gain.` },
            done() { return player.versus.points.gte(444) },
            unlocked() { return hasUpgrade('coop', 22) },
        },
        5: {
            requirementDescription: "Versus Rank C",
            effectDescription: "Unlock Best Cleared Courses in Expert Boss challenges and Passive generate 10% of Koopaling Bosses based on that.<br>Also, you auto click 10 times for Extra Magic outside of the challenges.",
            done() { return player.versus.points.gte(1000) },
            unlocked() { return hasUpgrade('coop', 22) },
        },
        6: {
            requirementDescription() { return `Played ${f(30000)} lag competitions` },
            effectDescription: "You can try to learn VS skill once in 3s instead of 10s.",
            done() { return player.versus.lag.gte(30000) },
            unlocked() { return player.toad.tierlayer.gte(15) && player.points.gte('ee3.25e79') || player.versus.lag.gt(0) },
        },
        7: {
            requirementDescription() { return `Played ${f(100000)} lag competitions` },
            effectDescription: "You can try to learn VS skill once in 1s instead of 3s.",
            done() { return player.versus.lag.gte(100000) },
            unlocked() { return player.toad.tierlayer.gte(15) && player.points.gte('ee3.25e79') || player.versus.lag.gt(0) },
        },
        8: {
            requirementDescription: "Purchased first 3 rows of research at same time",
            effectDescription() {
                return `All row 15 milestones you have multiplies skill tries and Lag gain.<br>Currently: ${format(milestoneEffect(this.layer, 8))}x`
            },
            done() { return hasFirst3RowsResearch() },
            unlocked() { return player.toad.tierlayer.gte(15) && player.points.gte('ee3.25e79') || player.versus.lag.gt(0) },
            effect() {
                let eff = d(player.coop.milestones.length + player.versus.milestones.length)
                return eff
            },
        },
        9: {
            requirementDescription: "Versus Rank A",
            effectDescription() {
                return `Versus Rating PB past 3000 boosts Pow Block gain and cap.<br>Currently: ${format(milestoneEffect(this.layer, 9))}x`
            },
            done() { return player.versus.points.gte(3000) },
            unlocked() { return player.versus.skill.gte(2.024e10) || player.s_expert.pow_block.gt(0) },
            effect() {
                let eff = player.versus.best.max(3000).sub(2999).pow(1.145)
                return eff
            },
        },
        10: {
            requirementDescription: "Versus Rating: 3017",
            effectDescription: "Unlock a new layer on row 16.",
            done() { return player.versus.points.gte(3017) },
            unlocked() { return player.versus.skill.gte(2.024e10) || player.s_expert.pow_block.gt(0) },
        },
        11: {
            requirementDescription: "Have all researches in row 1~7",
            effectDescription: "Mult of experience gain from CC is 3. Respeccing won't reset row 1~7 research.",
            done() { return tmp.versus.researchRow1to7bought },
            unlocked() { return player.versus.skill.gte(2.024e10) || player.s_expert.pow_block.gt(0) },
        },
        12: {
            requirementDescription: "Versus Rating: 3200",
            effectDescription() { return `${f(100000)}x Themed Courses gain. Unlock research row 8. ` },
            done() { return tmp.versus.researchRow1to7bought },
            unlocked() { return player.versus.skill.gte(2.024e10) || player.s_expert.pow_block.gt(0) },
        },
        13: {
            requirementDescription: "Versus Rank S",
            effectDescription() {
                return `Winning versus competition with a Batoko course is now easier. (Time limit range is longer)<br>Also, shorten your time in queue to 10 seconds. Unlock more milestones.`
            },
            done() { return player.versus.points.gte(4000) },
            unlocked() { return player.versus.skill.gte(2.024e10) || player.s_expert.pow_block.gt(0) },
        },
        14: {
            requirementDescription() { return `Get ${f(1e11)} Batoko Wins` },
            effectDescription() {
                return `Passive gain 100% skill tries and lag competition played per second.`
            },
            done() { return player.versus.batoko.gte(1e11) },
            unlocked() { return player.versus.skill.gte(2.024e10) || player.s_expert.pow_block.gt(0) },
        },
        15: {
            requirementDescription: "Versus Rank S<sup>+</sup>",
            effectDescription() {
                return `Versus Rating Past 5000 powers OSC effect, auto update best CC in expert endless challenges simulating in the challenges and 100x World 1-1 clears and Batoko Wins gain.<br>Currently: ^${f(this.effect())}`
            },
            effect() {
                let eff = player.versus.points.max(5000).sub(5000).div(100).add(1)
                return eff
            },
            done() { return player.versus.points.gte(5000) },
            unlocked() { return player.versus.skill.gte(2.024e10) || player.s_expert.pow_block.gt(0) },
        },
    },
    bars: {
        skillLearning: {
            direction: RIGHT,
            width: 420,
            height: 50,
            display() { return `Progress: ${formatPercent(player.versus.skillLearningProgress)}` },
            progress() { return player.versus.skillLearningProgress },
            unlocked() { return player.toad.tierlayer.gte(13) },
            fillStyle() { return { "background-color": "#ffcf03" } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
        },
    },
    ratingGain: {
        fromCC() {
            let rating = d(0)
            let cc = player.points
            let Ahc = d(2000)
            if (hasUpgrade('versus', 33)) Ahc = d(3000)
            if (cc.gte("ee1.5e29") && cc.lte("ee3.15e31")) rating = rating.add(cc.max("1e10").log(10).log(10).div(1.5e29).floor().min(210))
            else if (cc.gte("ee3.15e31")) rating = rating.add(cc.max("1e10").log(10).log(10).div(3.15e31).pow(0.1).add(209).floor().min(Ahc))

            return rating
        },
        fromM() {
            let rating = d(0)
            let mario = player.mario.points
            if (hasUpgrade('coop', 34)) {
                if (mario.gte(2e46)) rating = mario.max(2e46).div(2e45).sub(10).pow(0.3).floor().min(200)
            }
            return rating
        },
        fromSkill() {
            let rating = d(0)
            let skill = player.versus.skill
            if (player.versus.skill.gte(5)) rating = skill.max(1).root(2).floor().min(3000)
            return rating
        },
        fromExpRes() {
            let rating = d(0)
            let exp = player.versus.experienceTotal.max(0)
            let researchEff = d(0)
            if (hasUpgrade('versus', 251)) researchEff = researchEff.add(5000)
            if (hasUpgrade('versus', 252)) researchEff = researchEff.add(3000)
            if (hasUpgrade('versus', 253)) researchEff = researchEff.add(2000)
            if (hasUpgrade('versus', 271)) researchEff = researchEff.add(1000000)
            if (hasUpgrade('versus', 241)) rating = exp.times(20).add(researchEff)
            return rating
        },
        result() {
            let base = tmp.versus.ratingGain.fromCC.add(tmp.versus.ratingGain.fromM).add(tmp.versus.ratingGain.fromSkill).add(tmp.versus.ratingGain.fromExpRes).add(tmp.versus.batokoEff)
            let rating = base
            if (rating.gte(1000)) rating = base.sub(1000).div(3).add(1000).floor().min(2000)
            if (rating.gte(2000)) rating = base.sub(4000).pow(0.8).add(2000).floor().min(3000)
            if (rating.gte(3000)) rating = base.sub(10000).max(0).root(3).add(3000).floor().min(4000)
            if (rating.gte(4000)) rating = base.div(1000010000).log(10).pow(2).add(4000).floor().min(5000)
            if (rating.gte(5000)) rating = base.div(4.1954731360e40).log(10).root(2).add(5000).min(6000)
            return rating
        },
    },
    skillMult() {
        let m = d(1)
        if (player.versus.skill.gte(18)) m = m.times(skillReward(1))
        if (player.versus.skill.gte(225)) m = m.times(225)
        if (hasMilestone('versus', 8)) m = m.times(milestoneEffect('versus', 8))
        if (hasUpgrade('versus', 41)) m = m.times(upgradeEffect('versus', 41))
        if (hasUpgrade('versus', 44)) m = m.times(upgradeEffect('versus', 44))
        if (hasUpgrade('speedrun', 34)) m = m.times(1e20)
        return m
    },
    lagMult() {
        let m = d(1)
        if (hasUpgrade('coop', 51)) m = m.times(upgradeEffect('coop', 51))
        if (hasUpgrade('versus', 34)) m = m.times(upgradeEffect('versus', 34))
        if (hasMilestone('versus', 8)) m = m.times(milestoneEffect('versus', 8))
        if (hasUpgrade('coop', 54)) m = m.times(upgradeEffect('coop', 54))
        if (hasUpgrade('versus', 262)) m = m.times(upgradeEffect('versus', 262))
        if (hasMilestone('versus', 10)) m = m.times(layerEffect('themed'))
        if (hasMilestone('themed', 0)) m = m.times(2.46)
        return m
    },
    lagEff() {
        let eff = player.versus.lag.add(1).max(1).pow(2.024)
        return eff
    },
    disconnectedMult() {
        let m = d(1)
        return m
    },
    batokoMult() {
        let m = d(1)
        if (hasUpgrade('versus', 281)) m = m.times(5)
        if (hasUpgrade('themed', 33)) m = m.times(3)
        if (hasUpgrade('versus', 283)) m = m.times(upgradeEffect('versus', 283))
        if (hasUpgrade('speedrun', 11)) m = m.times(10)
        if (hasUpgrade('versus', 291)) m = m.times(25)
        if (hasUpgrade('speedrun', 15)) m = m.times(tmp.speedrun.TAeff)
        if (hasUpgrade('versus', 324)) m = m.times(100)
        if (hasMilestone('versus', 15)) m = m.times(100)
        m = m.floor()
        return m
    },
    batokoEff() {
        let eff = player.versus.batoko.times(300).max(0).pow(2.025).floor()
        return eff
    },

    researchRow1to7bought() {
        let res = [211, 221, 222, 223, 231, 232, 233, 234, 241, 251, 252, 253, 261, 262, 271]
        let bought = 0
        for (let i = 0; i < res.length; i++) {
            if (hasUpgrade('versus', res[i])) {
                bought += 1
            }
        }
        return bought >= res.length
    },

    skillReward: {
        0: {
            reward() { return "unlock C factor" }
        },
        1: {
            reward() {
                let eff = player.versus.points.max(1).root(2)
                if (hasUpgrade('coop', 45)) eff = eff.pow(2)
                return eff
            }
        },
        2: {
            reward() { return "225x skill learing tries" }
        },
        3: {
            reward() { return "Passive gain 10% Super Expert Endless Clears every second" }
        },
        4: {
            reward() { return "Unlock Pow Block subtab in S.E. layer More Bosses tab" }
        },
        5: {
            reward() { return "Your lava spend input is auto update as lava amount/10 after purchasing Reasaerch 6-1 and 5x Pow Block gain and cap" }
        },
        6: {
            reward() { return player.versus.skill.max(1).root(5) }
        },
        7: {
            reward() { return player.versus.skill.max(1).root(10) }
        },
    },

    queueTime() {
        let time = d(15)
        if (hasMilestone('versus', 13)) time = d(10)
        return time
    },

    update(diff) {
        let tick = d(0.05)

        if (tmp.versus.layerShown) player.versus.points = tmp.versus.ratingGain.result
        else player.versus.points = d(0)
        if (player.versus.points.gt(player.versus.best)) player.versus.best = player.versus.points

        if (hasUpgrade('versus', 11)) player.versus.experienceTotal = tmp.versus.buyables[11].gain.add(tmp.versus.buyables[12].gain).add(tmp.versus.buyables[13].gain).add(tmp.versus.buyables[14].gain).floor()
        player.versus.experience = player.versus.experienceTotal.max(player.versus.experienceBest).sub(player.versus.experienceSpent)

        if (player.versus.experienceBest.lt(player.versus.experienceTotal)) player.versus.experienceBest = player.versus.experienceTotal

        //skill
        let time = d(10)
        let queueTime = tmp.versus.queueTime
        if (hasMilestone('versus', 6)) time = d(3)
        if (hasMilestone('versus', 7)) time = d(1)
        if (player.versus.skillLearning) player.versus.skillLearningProgress = player.versus.skillLearningProgress.add(d(diff).div(time))
        if (player.versus.skillLearningProgress.gte(1)) {
            player.versus.skillLearningProgress = d(0)
            player.versus.skillLearning = false
            player.versus.skill = player.versus.skill.add(tmp.versus.skillMult)
            if (player.toad.tierlayer.gte(15) && player.points.gte('ee3.25e79') || player.versus.lag.gt(0)) player.versus.lag = player.versus.lag.add(tmp.versus.lagMult)
        }

        if (player.versus.versus_queue.lt(queueTime)) player.versus.versus_queue = player.versus.versus_queue.add(diff).min(queueTime)
        if (player.versus.batoko_time.lt(player.versus.batoko_time_limit) && player.versus.versus_queue.gte(queueTime)) player.versus.batoko_time = player.versus.batoko_time.add(diff).min(player.versus.batoko_time_limit)

        let example = player.versus.example_input
        let input = player.versus.control_input

        let correct = 0
        for (let i = 0; i < example.length; i++) {
            if (input[i] != example[i] && input[i] != undefined && example[i] != "Z" || (input[i] != "L" && input[i] != "R" && input[i] != undefined && example[i] == "Z")) generateExampleInput(),
                player.versus.control_history = ["You made a serious mistake, your opponent reached the goal!"].concat(player.versus.control_history.slice(0, 4)),
                player.versus.history_notation = [player.notation].concat(player.versus.history_notation.slice(0, 4)),
                player.versus.history_gain = [d(0)].concat(player.versus.history_gain.slice(0, 4))
            if (player.versus.control_input[i] == example[i] || ((input[i] == "L" || input[i] == "R") && example[i] == "Z")) correct += 1
        }
        if (correct >= example.length && correct > 0) {
            player.versus.batoko = player.versus.batoko.add(tmp.versus.batokoMult)
            player.versus.control_history = [`You win! +${fw(tmp.versus.batokoMult)} Batoko Wins`].concat(player.versus.control_history.slice(0, 4))
            player.versus.history_notation = [player.notation].concat(player.versus.history_notation.slice(0, 4))
            player.versus.history_gain = [tmp.versus.batokoMult].concat(player.versus.history_gain.slice(0, 4))
            generateExampleInput()
            if (hasUpgrade('versus', 304)) player.speedrun.points = player.speedrun.points.add(upgradeEffect('versus', 304))
        }
        if (example.length == 0) generateExampleInput()
        if (player.versus.batoko_time.gte(player.versus.batoko_time_limit)) {
            generateExampleInput()
            player.versus.control_history = [`You are too slow! Your opponent reached the goal!`].concat(player.versus.control_history.slice(0, 4))
            player.versus.history_notation = [player.notation].concat(player.versus.history_notation.slice(0, 4))
            player.versus.history_gain = [d(0)].concat(player.versus.history_gain.slice(0, 4))
        }

        if (hasMilestone('versus', 14)) player.versus.skill = player.versus.skill.add(tmp.versus.skillMult.times(diff)),
            player.versus.lag = player.versus.lag.add(tmp.versus.lagMult.times(diff))

        if (hasUpgrade('versus', 324)) player.versus.batoko = player.versus.batoko.add(tmp.versus.batokoMult.div(10).times(diff))
    },
    tabFormat: [
        ["display-text", function () {
            let ratingcolor = "ffffff"
            if (player.versus.points.gte(6000)) ratingcolor = "e9aca9"
            return `Your Versus Rating is ${textStyle_h2(formatWhole(player.versus.points), ratingcolor)}, earned Rank ${textStyle_h2(versusRank(player.versus.points), ratingcolor)}`
        }],
        "blank",
        ["display-text", () => `Multiplayer Versus layer doesn't do reset`],
        ["display-text", () => `You can keep your rating when buying VS upgrades those cost Versus Rating`],
        ["display-text", () => `Your Versus Rating PB is ${formatWhole(player.versus.best)}`],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Battle with other players in Multiplayer Versus! The first player reached the goal will win!`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "VS Rating Stats": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        let Ahc = d(2000)
                        if (hasUpgrade('versus', 33)) Ahc = d(3000)
                        if (player.points.lte("ee3.15e31")) return `A = floor(lg(lg(Cleared Courses))/1.5e29) = ${formatWhole(tmp.versus.ratingGain.fromCC)} (Softcap at 210)`
                        else if (player.points.gte("ee3.15e31")) return `A = floor((lg(lg(Cleared Courses))/3.15e31)<sup>0.1</sup>+209) = ${formatWhole(tmp.versus.ratingGain.fromCC)} (Softcap at 210, hardcap at ${formatWhole(Ahc)})`
                    }],
                    ["display-text", function () {
                        if (hasUpgrade('coop', 34)) return `B = floor(min((Mario/2e45-10)<sup>0.3</sup>, 200)) = ${formatWhole(tmp.versus.ratingGain.fromM)}`
                    }],
                    ["display-text", function () {
                        if (player.versus.skill.gte(5)) return `C = floor(min(√(Skill tries)), 3000) = ${formatWhole(tmp.versus.ratingGain.fromSkill)}`
                    }],
                    ["display-text", function () {
                        if (hasUpgrade('versus', 241)) return `D = Total experience·20+Research effect = ${formatWhole(tmp.versus.ratingGain.fromExpRes)}`
                    }],
                    ["display-text", function () {
                        if (player.toad.tierlayer.gte(21)) return `E = floor((Batoko Wins·300)<sup>2.025</sup>) = ${formatWhole(tmp.versus.batokoEff)}`
                    }],
                    "blank",
                    ["display-text", function () {
                        let B = ""
                        let C = ""
                        let D = ""
                        let E = ""
                        let F = ""
                        let G = ""
                        let H = ""
                        if (hasUpgrade('coop', 34)) B = "+B"
                        if (player.versus.skill.gte(5)) C = "+C"
                        if (hasUpgrade('versus', 241)) D = "+D"
                        if (player.toad.tierlayer.gte(21)) E = "+E"
                        let formula = "RB"
                        if (player.versus.points.gte(1000)) formula = "(RB-1000)/3+1000      (Softcapped because you reached rank C)"
                        if (player.versus.points.gte(2000)) formula = "(RB-4000)<sup>0.8</sup> + 2000      (Softcapped^2 because you reached rank B)"
                        if (player.versus.points.gte(3000)) formula = "<sup>3</sup>√(RB-10000) + 3000      (Softcapped^3 because you reached rank A)"
                        if (player.versus.points.gte(4000)) formula = "lg(RB/1,000,010,000)<sup>2</sup> + 4000      (Softcapped^4 because you reached rank S)"
                        if (player.versus.points.gte(5000)) formula = "lg(RB/4.1954731360e40)<sup>0.5</sup> + 5000      (Softcapped^5 because you reached rank S+)"
                        if (player.versus.points.gte(6000)) formula = "TBD      (Softcapped^6 because you reached rank Pink S+)"
                        return `Rating base (RB) formula = A${B}${C}${D}${E}${F}${G}${H}<br>
                        Rating: ${formula}`
                    }],
                    "blank",
                    ["display-text", function () {
                        return `Rating gain: ${formatWhole(player.versus.points)}
                        <br><br>Versus Rating always has a hardcap of 8000, it's also the maximum rating in SMM2 VS`
                    }],
                ],
            },
            "Researches": {
                unlocked() { return hasUpgrade('versus', 22) },
                content: [
                    ["blank", "15px"],
                    ["clickables", [1]],
                    ["display-text", function () {
                        return `You have ${textStyle_h2(formatWhole(player.versus.experience) + '/' + formatWhole(player.versus.experienceTotal.max(player.versus.experienceBest)), 'ffcf03')} experience`
                    }],
                    ["display-text", function () {
                        if (tmp.themed.layerShown) return `You keep your best total experience on reset for researches, but effects based on total experience are now based on current total experience<br>
                        Your current total experience is ${formatWhole(player.versus.experienceTotal)}`
                    }],
                    "blank",
                    "buyables",
                    "blank",
                    ["row", [
                        ["column", [
                            ["row", [["upgrade", 211], "blank"]],
                            "blank",
                            ["row", [["upgrade", 221], "blank", ["upgrade", 222], "blank", ["upgrade", 223], "blank"]],
                            "blank",
                            ["row", [["upgrade", 231], "blank", ["upgrade", 232], "blank", ["upgrade", 233], "blank", ["upgrade", 234], "blank"]],
                            "blank",
                            ["row", [["upgrade", 241], "blank"]],
                            "blank",
                            ["row", [["upgrade", 251], "blank", ["upgrade", 252], "blank", ["upgrade", 253], "blank",]],
                            "blank",
                            ["row", [["upgrade", 261], "blank", ["upgrade", 262], "blank"]],
                            "blank",
                            ["row", [["upgrade", 271], "blank"]],
                            "blank",
                            ["row", [["upgrade", 281], "blank", ["upgrade", 282], "blank", ["upgrade", 283], "blank"]],
                            "blank",
                            ["row", [["upgrade", 291], "blank"]],
                            "blank",
                            ["row", [["upgrade", 301], "blank", ["upgrade", 302], "blank", ["upgrade", 303], "blank", ["upgrade", 304], "blank"]],
                            "blank",
                            ["row", [["upgrade", 311], "blank", ["upgrade", 312], "blank", ["upgrade", 313], "blank", ["upgrade", 314], "blank"]],
                            "blank",
                            ["row", [["upgrade", 321], "blank", ["upgrade", 322], "blank", ["upgrade", 323], "blank", ["upgrade", 324], "blank"]],
                            "blank",
                            ["row", [["upgrade", 331], "blank", ["upgrade", 332], "blank"]],
                            "blank",
                        ]],
                        ["blank", ['30px', '30px']],
                        ["display-text", function () {
                            let rowtextsta = '<div style="opacity:.5">'
                            let rowtext = "Research row "
                            let rowtextfin = ' </div>'
                            let rrt = []
                            if (tmp.versus.upgrades[211].unlocked) rrt.push(rowtextsta + rowtext + '1')
                            if (tmp.versus.upgrades[221].unlocked || tmp.versus.upgrades[222].unlocked) rrt.push(rowtext + '2')
                            if (tmp.versus.upgrades[231].unlocked || tmp.versus.upgrades[232].unlocked || tmp.versus.upgrades[233].unlocked || tmp.versus.upgrades[234].unlocked) rrt.push(rowtext + '3')
                            if (tmp.versus.upgrades[241].unlocked) rrt.push(rowtext + '4')
                            if (tmp.versus.upgrades[251].unlocked || tmp.versus.upgrades[252].unlocked || tmp.versus.upgrades[253].unlocked) rrt.push(rowtext + '5')
                            if (tmp.versus.upgrades[261].unlocked || tmp.versus.upgrades[262].unlocked) rrt.push(rowtext + '6')
                            if (tmp.versus.upgrades[271].unlocked) rrt.push(rowtext + '7')
                            if (tmp.versus.upgrades[281].unlocked || tmp.versus.upgrades[282].unlocked || tmp.versus.upgrades[253].unlocked) rrt.push(rowtext + '8')
                            if (tmp.versus.upgrades[291].unlocked) rrt.push(rowtext + '9')
                            if (tmp.versus.upgrades[301].unlocked || tmp.versus.upgrades[302].unlocked || tmp.versus.upgrades[303].unlocked || tmp.versus.upgrades[304].unlocked) rrt.push(rowtext + '10')
                            if (tmp.versus.upgrades[311].unlocked || tmp.versus.upgrades[312].unlocked || tmp.versus.upgrades[313].unlocked || tmp.versus.upgrades[314].unlocked) rrt.push(rowtext + '11')
                            if (tmp.versus.upgrades[321].unlocked || tmp.versus.upgrades[322].unlocked || tmp.versus.upgrades[323].unlocked || tmp.versus.upgrades[324].unlocked) rrt.push(rowtext + '12')
                            if (tmp.versus.upgrades[331].unlocked || tmp.versus.upgrades[332].unlocked) rrt.push(rowtext + '13')
                            if (rrt.length < 1) return;
                            rrt[rrt.length - 1] += rowtextfin
                            return rrt.join('<br>')
                        }, { 'line-height': '77px' }]]
                    ],
                    "blank",
                    ["display-text", function () {
                        let t = ""
                        if (!(hasUpgrade('versus', 231) && hasUpgrade('versus', 232) && hasUpgrade('versus', 233) && hasUpgrade('versus', 234))) t = "You should buy everything at Research row 3 to unlock Reaearch row 4!"
                        else if (!(hasUpgrade('versus', 281) && hasUpgrade('versus', 282) && hasUpgrade('versus', 283)) && hasUpgrade('speedrun', 14)) t = "You should buy everything at Research row 8 to show Reaearch row 9!"
                        return t
                    }],
                    ["display-text", function () {
                        let t = ""
                        if (hasUpgrade('versus', 291)) t = "You can only choose one research route (Active/Passive/Idle/Technical) before you get something to unlock multi-route"
                        return t
                    }],
                    "blank",
                ],
                buttonStyle() {
                    return {
                        'background': `linear-gradient(90deg, #ffcf03, white)`,
                        'border-color': '#ffcf03',
                        'color': 'black',
                    }
                },
            },
            "VS Skills": {
                unlocked() { return player.toad.tierlayer.gte(13) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return `You tried to learn VS skills ${textStyle_h2(formatWhole(player.versus.skill), 'ffcf03')} times`
                    }],
                    ["bar", "skillLearning"],
                    "blank",
                    ["clickables", [2]],
                    "blank",
                    ["display-text", function () {
                        return `You can gain ${formatWhole(tmp.versus.skillMult)} times of try once`
                    }],
                    "blank",
                    ["h-line", "600px"],
                    "blank",
                    ["display-text", function () {
                        return `Skill: Fast starting<br>Requies ${textStyle_h2(formatWhole(5), 'ffcf03')} tries`
                    }],
                    ["display-text", function () {
                        if (player.versus.skill.gte(5)) return `reward: unlock factor C to gain Versus Rating`
                    }],
                    "blank",
                    ["h-line", function () {
                        if (player.versus.skill.gte(5)) return "600px"
                        else return "0px"
                    }],
                    "blank",
                    ["display-text", function () {
                        if (player.versus.skill.gte(5)) return `Skill: Grab players<br>Requies ${textStyle_h2(formatWhole(18), 'ffcf03')} tries`
                    }],
                    ["display-text", function () {
                        if (player.versus.skill.gte(18)) return `reward: Versus Rating boosts skill tries gain<br>
                        Currently: ${format(skillReward(1))}x`
                    }],
                    "blank",
                    ["h-line", function () {
                        if (player.versus.skill.gte(18)) return "600px"
                        else return "0px"
                    }],
                    "blank",
                    ["display-text", function () {
                        if (player.versus.skill.gte(18)) return `Skill: Stomp other players<br>Requies ${textStyle_h2(formatWhole(225), 'ffcf03')} tries`
                    }],
                    ["display-text", function () {
                        if (player.versus.skill.gte(225)) return `reward: 225x skill learning tries gain`
                    }],
                    "blank",
                    ["h-line", function () {
                        if (player.versus.skill.gte(225)) return "600px"
                        else return "0px"
                    }],
                    "blank",
                    ["display-text", function () {
                        if (player.versus.skill.gte(225)) return `Skill: Find the real way<br>Requies ${textStyle_h2(formatWhole(3141592), 'ffcf03')} tries`
                    }],
                    ["display-text", function () {
                        if (player.versus.skill.gte(3141592)) return `reward: Passive gain 10% Super Expert Endless Clears every second`
                    }],
                    "blank",
                    ["h-line", function () {
                        if (player.versus.skill.gte(3141592)) return "600px"
                        else return "0px"
                    }],
                    "blank",
                    ["display-text", function () {
                        if (player.versus.skill.gte(3141592)) return `Skill: Avoid piranhas from pipes (especially yellow and red pipes)<br>Requies ${textStyle_h2(formatWhole(2.024e10), 'ffcf03')} tries`
                    }],
                    ["display-text", function () {
                        if (player.versus.skill.gte(2.024e10)) return `reward: Unlock Pow Block subtab in S.E. layer More Bosses tab`
                    }],
                    "blank",
                    ["h-line", function () {
                        if (player.versus.skill.gte(2.024e10)) return "600px"
                        else return "0px"
                    }],
                    "blank",
                    ["display-text", function () {
                        if (player.versus.skill.gte(2.024e10)) return `Skill: Accelerate to max speed and keep it to the goal<br>Requies ${textStyle_h2(formatWhole(1.25e13), 'ffcf03')} tries`
                    }],
                    ["display-text", function () {
                        if (player.versus.skill.gte(1.25e13)) return `reward: Your lava spend input is auto update as lava amount/10 after purchasing Reasaerch 6-1 and 5x Pow Block gain and cap`
                    }],
                    "blank",
                    ["h-line", function () {
                        if (player.versus.skill.gte(1.25e13)) return "600px"
                        else return "0px"
                    }],
                    "blank",
                    ["display-text", function () {
                        if (player.versus.skill.gte(1.25e13)) return `Skill: Spin jump under other players<br>Requies ${textStyle_h2(formatWhole(1e17), 'ffcf03')} tries`
                    }],
                    ["display-text", function () {
                        if (player.versus.skill.gte(1e17)) return `reward: Skill tries^0.2 multiplies Themed Course gain<br>
                        Currently: ${format(skillReward(6))}x`
                    }],
                    "blank",
                    ["h-line", function () {
                        if (player.versus.skill.gte(1e17)) return "600px"
                        else return "0px"
                    }],
                    "blank",
                    ["display-text", function () {
                        if (player.versus.skill.gte(1e17)) return `Skill: Remember the popular VS courses for future competitions<br>Requies ${textStyle_h2(formatWhole(2.025e85), 'ffcf03')} tries`
                    }],
                    ["display-text", function () {
                        if (player.versus.skill.gte(2.025e85)) return `reward: Reward of ${f(1e17)} skill tries now also affact Speedrun Courses gain but weaker<br>
                        Currently: ${format(skillReward(7))}x`
                    }],
                    "blank",
                    ["h-line", function () {
                        if (player.versus.skill.gte(2.025e85)) return "600px"
                        else return "0px"
                    }],
                ],
                buttonStyle() {
                    return {
                        'background': `linear-gradient(90deg, #ffcf03, white)`,
                        'border-color': '#ffcf03',
                        'color': 'black',
                    }
                },
            },
            "Lag": {
                unlocked() { return player.toad.tierlayer.gte(15) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        if (player.points.lt('ee3.25e79') && player.versus.lag.lte(0))
                            return `Reach ${format('ee3.25e79')} Cleared Courses to start to play in lag competitions`
                        else return `You have played ${textStyle_h2(formatWhole(player.versus.lag), 'ffcf03')} versus competition in lag, Co-op Clears gain is multiplied by ${textStyle_h2(format(tmp.versus.lagEff) + "x", 'ffcf03')}<br>
                        You will meet ${formatWhole(tmp.versus.lagMult)} lag competitions when try to learn VS skills`
                    }],
                    "blank",
                    ["bar", "skillLearning"],
                    "blank",
                    ["clickables", [2]],
                    "blank",
                    ["display-text", function () { return '<i><div style="opacity:.5">Lag is annoying, but we must face it</i>' }]
                ],
                buttonStyle() {
                    return {
                        'background': `linear-gradient(90deg, #ffcf03, white)`,
                        'border-color': '#ffcf03',
                        'color': 'black',
                    }
                },
            },
            "Batoko": {
                unlocked() { return player.toad.tierlayer.gte(21) },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">The name of Batoko is from a Japanese word "バトルコース" (Battle Course) and the simplified name is "バトコ" (Batoko) <br> Most of Batoko courses have 4 routes to the goal, that's for 4 players with exactly the same tracks. They make MPVS fairer and help lots of players to get higher ratings.`],

                    "blank",
                    ["display-text", function () {
                        return `You have won ${textStyle_h2(formatWhole(player.versus.batoko), 'ffcf03')} versus competitions with a batoko course, adding ${textStyle_h2(formatWhole(tmp.versus.batokoEff), 'ffcf03')} to factor E`
                    }],
                    "blank",
                    ["row", [
                        ["clickable", 81],
                        ["blank", ["300px", "10px"]],
                        ["clickable", 82],
                    ]
                    ],
                    "blank",
                    ["row",
                        [
                            ["column", [
                                ["clickable", 31],
                                ["blank", "10px"],
                                ["row", [
                                    ["clickable", 41],
                                    ["blank", ["80px", "10px"]],
                                    ["clickable", 42],
                                ]
                                ],
                                ["blank", "10px"],
                                ["clickable", 51],
                            ]
                            ],
                            ["blank", ["60px", "60px"]],
                            ["column", [
                                ["clickable", 61],
                                ["blank", "10px"],
                                ["row",
                                    [
                                        ["blank", ["140px", "10px"]],
                                        ["clickable", 71],
                                    ]
                                ],
                            ]
                            ],
                        ]
                    ],
                    ["display-text", function () {
                        return `You can get ${textStyle_h2(formatWhole(tmp.versus.batokoMult), 'ffcf03')} batoko wins once with a correct input before your opponent reaches the goal`
                    }],
                    "blank",
                    ["display-text", function () {
                        return `Example input: ${player.versus.example_input.join(", ")}<br><br>
                        Your input: ${player.versus.control_input.join(", ")} (${formatWhole(player.versus.control_input.length)}/${formatWhole(player.versus.example_input.length)})<br><br>
                        ${player.versus.versus_queue.gte(tmp.versus.queueTime) ? `time spent: ${formatTime(player.versus.batoko_time)}/${formatTime(player.versus.batoko_time_limit)}` : `in queue: ${format(player.versus.versus_queue)}/${f(tmp.versus.queueTime)} seconds`}<br><br>
                        Your input history: ${player.versus.control_history.join("<br>")}<br><br>
                        Both L button and R button return a Z input`
                    }],
                ],
                buttonStyle() {
                    return {
                        'background': `linear-gradient(90deg, #ffcf03, white)`,
                        'border-color': '#ffcf03',
                        'color': 'black',
                    }
                },
            },
        },
    },
})
// 第三十层：标准风格关卡 (Themed Courses)
addLayer("themed", {
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            w11: d(0),
            w11time: d(0),
            control_input: [],
            w11cooldown: d(0),
            control_history: [],
            history_notation: ['', '', '', '', ''],
            history_gain: [d(0), d(0), d(0), d(0), d(0)],
        }
    },

    color: "#748BFF",                       // The color for this layer, which affects many elements.
    resource: "Themed Courses",            // The name of this layer's main prestige resource.
    row: 15,                                 // The row this layer is on (0 is the first row).
    symbol: "Th",
    position: 0,

    baseResource: "Super Expert Endless Clears",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.s_expert.points },  // A function to return the current amount of baseResource.

    requires: new Decimal("2e748"),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.0078,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let m = d(1)
        if (hasUpgrade('themed', 12)) m = m.times(upgradeEffect('themed', 12))
        if (hasUpgrade('themed', 13)) m = m.times(upgradeEffect('themed', 13))
        if (hasUpgrade('themed', 21)) m = m.times(upgradeEffect('themed', 21))
        if (hasUpgrade('themed', 22)) m = m.times(upgradeEffect('themed', 22))
        if (player.versus.skill.gte(1e17)) m = m.times(skillReward(6))
        if (hasUpgrade('themed', 24)) m = m.times(upgradeEffect('themed', 24))
        if (hasMilestone('versus', 12)) m = m.times(100000)
        return m               // Factor in any bonuses multiplying gain here.
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        let e = d(1)
        return e
    },

    effect() {
        let eff = player.themed.points.max(0).add(1).pow(1.5)
        if (hasMilestone('themed', 7)) eff = eff.pow(1.15)
        let softcap = d(1e60)
        return eff
    },

    onPrestige() {
        return player.s_expert.points = d(0)
    },

    layerShown() { return hasMilestone('versus', 10) },          // Returns a bool for if this layer's node should be visible in the tree.

    upgrades: {
        11: {
            title: "Make it your way",
            description: "+20 to Bowser Jr. max completion.",
            cost: new Decimal(7),
            unlocked() { return true },
        },
        12: {
            title: "Play it your way",
            description: "Themed Course boosts itself.",
            cost: new Decimal(100),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.themed.points.max(0).add(10).log(10).pow(3)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
        },
        13: {
            title: "Choose a style",
            description: "Keep MP Co-op upgrades on row 16 reset and boost Themed Course gain.",
            cost: new Decimal(300),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let base = d(1.25)
                let eff = base
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
        },
        14: {
            title: "Choose a theme",
            description: "Current total experience after 80 boosts BRC gain.",
            cost: new Decimal(3000),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = Decimal.pow(124.1317, player.versus.experienceTotal.max(80).sub(80))
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
        },
        15: {
            title: "Plan a route",
            description() { return `${f(1e20)}x BRC gain` },
            currencyDisplayName: "Cleared Courses",
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee1.25e157"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "Coin guidance",
            description: "OoM^3s of coin boosts Themed Courses gain",
            currencyDisplayName: "Coins",
            currencyInternalName: "points",
            currencyLayer: "coin",
            cost: new Decimal("ee5e160"),
            unlocked() { return hasUpgrade(this.layer, 15) },
            effect() {
                let eff = player.coin.points.max("ee10").log(10).log(10).log(10)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
        },
        22: {
            title: "Arrow guidance",
            description: "OoM^2s of arrow boosts Themed Courses gain and keep MP Co-op challenges on row 16 reset.",
            currencyDisplayName: "Arrows",
            currencyInternalName: "arrow",
            currencyLayer: "master_sword",
            cost: new Decimal("e7.667e66766766"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.master_sword.arrow.max(1e10).log(10).log(10)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
        },
        23: {
            title: "1-1",
            description: "Unlock World 1-1.",
            currencyDisplayName: "Cleared Courses",
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee5e184"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        24: {
            title: "1-1 but...",
            description: "World 1-1 clears boost Themed Courses gain.",
            currencyDisplayName: "Cleared Courses",
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee4e187"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.themed.w11.pow(player.themed.w11.max(2).ssqrt()).max(1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
        },
        25: {
            title: "1-1 speedrunner",
            description: "You gain more World 1-1 clears based on time spent in your correct input (shorter is better, 10s to 1x).",
            canAfford() { return player.themed.w11.gte(12) },
            onPurchase() {
                player.themed.w11 = player.themed.w11.sub(12)
            },
            currencyDisplayName() {
                return `Cleared Courses + ${fw(12)} World 1-1 clears`
            },
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee1.5e190"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = d(5).sub(player.themed.w11time.div(2)).max(1).pow(2).ceil()
                return eff
            },
            effectDisplay() {
                return `${formatWhole(upgradeEffect(this.layer, this.id))}x`
            },
        },
        31: {
            title: "Co-op in a themed course",
            description() { return `${fw(40)}x Co-op Clears gain.` },
            canAfford() { return player.themed.points.gte(1e30) },
            onPurchase() {
                player.themed.points = player.themed.points.sub(1e30)
            },
            currencyDisplayName() {
                return `Cleared Courses + ${f(1e30)} Themed Courses`
            },
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee2e195"),
            unlocked() { return hasUpgrade(this.layer, 25) },
        },
        32: {
            title: "Co-op in World 1-1",
            description() {
                let s1 = ""
                let s2 = ""
                let t = ""
                if (hasUpgrade('themed', 35)) s1 = "<s>",
                    s2 = "</s>",
                    t = "Total "
                return `${s1}Unspent${s2} ${t}experience multiplies World 1-1 clears gain.`
            },
            canAfford() { return player.themed.points.gte(1e46) },
            onPurchase() {
                player.themed.points = player.themed.points.sub(1e46)
            },
            currencyDisplayName() {
                return `Cleared Courses + ${f(1e30)} Themed Courses`
            },
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee1e275"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.versus.experience.times(2).max(1).pow(0.86)
                if (hasUpgrade('themed', 35)) eff = player.versus.experienceTotal.times(2).max(1).pow(0.86)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
        },
        33: {
            title: "Co-op in a batoko?",
            description() { return `Triple Batoko Wins gain.` },
            canAfford() { return player.themed.points.gte(1e61) },
            onPurchase() {
                player.themed.points = player.themed.points.sub(1e61)
            },
            currencyDisplayName() {
                return `Cleared Courses + ${f(1e61)} Themed Courses`
            },
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee1e291"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        34: {
            title: "The huge note block jump",
            description() { return `Your OoM^4s of CC multiply 1st and 3rd experience gain buyables' mult. (Experience gain is rounded down)` },
            canAfford() { return player.themed.points.gte(1e102) },
            onPurchase() {
                player.themed.points = player.themed.points.sub(1e102)
            },
            currencyDisplayName() {
                return `Cleared Courses + ${f(1e102)} Themed Courses`
            },
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee1e387"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.points.max("eee10").log(10).log(10).log(10).log(10)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
        },
        35: {
            title: "Efficient experience",
            description() { return `12th Themed Course upgrade now based on total experience.` },
            canAfford() { return player.themed.points.gte(1e116) },
            onPurchase() {
                player.themed.points = player.themed.points.sub(1e116)
            },
            currencyDisplayName() {
                return `Cleared Courses + ${f(1e116)} Themed Courses`
            },
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee1e466"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        //31: 
        //e2e195 cc + 1e30 TC
        // Look in the upgrades docs to see what goes here!
    },

    clickables: {
        11: {
            display() {
                return "↑"
            },
            unlocked() {
                return hasUpgrade("themed", 23)
            },
            canClick() {
                return player.themed.w11cooldown.lte(0)
            },
            onClick() {
                player.themed.control_input.push("up")
            },
            style() {
                let s = {
                    'min-height': '60px',
                    'width': '60px',
                    'border-radius': '100%',
                    'font-size': "20px",
                }
                return s
            },
        },
        21: {
            display() {
                return "←"
            },
            unlocked() {
                return hasUpgrade("themed", 23)
            },
            canClick() {
                return player.themed.w11cooldown.lte(0)
            },
            onClick() {
                player.themed.control_input.push("left")
            },
            style() {
                let s = {
                    'min-height': '60px',
                    'width': '60px',
                    'border-radius': '100%',
                    'font-size': "20px",
                }
                return s
            },
        },
        22: {
            display() {
                return "→"
            },
            unlocked() {
                return hasUpgrade("themed", 23)
            },
            canClick() {
                return player.themed.w11cooldown.lte(0)
            },
            onClick() {
                player.themed.control_input.push("right")
            },
            style() {
                let s = {
                    'min-height': '60px',
                    'width': '60px',
                    'border-radius': '100%',
                    'font-size': "20px",
                }
                return s
            },
        },
        31: {
            display() {
                return "↓"
            },
            unlocked() {
                return hasUpgrade("themed", 23)
            },
            canClick() {
                return player.themed.w11cooldown.lte(0)
            },
            onClick() {
                player.themed.control_input.push("down")
            },
            style() {
                let s = {
                    'min-height': '60px',
                    'width': '60px',
                    'border-radius': '100%',
                    'font-size': "20px",
                }
                return s
            },
        },
        41: {
            display() {
                return "Y"
            },
            unlocked() {
                return hasUpgrade("themed", 23)
            },
            canClick() {
                return player.themed.w11cooldown.lte(0)
            },
            onClick() {
                player.themed.control_input.push("Y")
            },
            style() {
                let s = {
                    'min-height': '60px',
                    'width': '60px',
                    'border-radius': '100%',
                    'font-size': "20px",
                }
                return s
            },
        },
        51: {
            display() {
                return "B"
            },
            unlocked() {
                return hasUpgrade("themed", 23)
            },
            canClick() {
                return player.themed.w11cooldown.lte(0)
            },
            onClick() {
                player.themed.control_input.push("B")
            },
            style() {
                let s = {
                    'min-height': '60px',
                    'width': '60px',
                    'border-radius': '100%',
                    'font-size': "20px",
                }
                return s
            },
        },
    },

    example_input: ["right", "B", "B", "B", "B", "down", "B", "B", "B", "B", "B", "B", "B", "B", "B"],

    w11Mult() {
        let m = d(1)
        if (hasUpgrade('themed', 25)) m = m.times(upgradeEffect('themed', 25))
        if (hasUpgrade('versus', 281)) m = m.times(5)
        if (hasUpgrade('themed', 32)) m = m.times(upgradeEffect('themed', 32))
        if (hasUpgrade('versus', 282)) m = m.times(upgradeEffect('versus', 282))
        if (hasUpgrade('speedrun', 11)) m = m.times(10)
        if (hasUpgrade('versus', 291)) m = m.times(25)
        if (hasUpgrade('speedrun', 15)) m = m.times(tmp.speedrun.TAeff)
        if (hasMilestone('versus', 15)) m = m.times(100)
        m = m.floor()
        return m
    },

    milestones: {
        0: {
            requirementDescription: "Upload 1 Themed Course",
            effectDescription: "Gain 2.46x more lag competitions played.",
            done() { return player.themed.points.gte(1) },
        },
        1: {
            requirementDescription: "Upload 2 Themed Courses",
            effectDescription: "Passive gain 100% of Multiplayer Co-op Clears gain per second.",
            done() { return player.themed.points.gte(2) },
        },
        2: {
            requirementDescription: "Upload 3 Themed Courses",
            effectDescription: "10x Check Points gain.",
            done() { return player.themed.points.gte(3) },
        },
        3: {
            requirementDescription: "Upload 6 Themed Courses",
            effectDescription: "You can gain 5 completions while you complete challenge Bowser Jr.",
            done() { return player.themed.points.gte(6) },
        },
        4: {
            requirementDescription: "Upload 20 Themed Courses",
            effectDescription: "Passive gain 100% Check Points per second and buy max MP Co-op buyables.",
            done() { return player.themed.points.gte(20) },
        },
        5: {
            requirementDescription: "Upload 30 Themed Courses",
            effectDescription: "You no longer gain any Flaw and keep MP Co-op milestones on row 16 reset.",
            done() { return player.themed.points.gte(30) },
        },
        6: {
            requirementDescription: "Upload 60 Themed Courses",
            effectDescription: "Passive gain 100% Wings per second and you can keep spending lava on reset.",
            done() { return player.themed.points.gte(60) },
        },
        7: {
            requirementDescription: "Clear World 1-1 first time",
            effectDescription: "Themed Courses' effect is raised to ^1.15",
            done() { return player.themed.w11.gte(1) },
        },
    },

    update(diff) {
        let example = tmp.themed.example_input
        let correct = 0
        for (let i = 0; i < example.length; i++) {
            if (player.themed.control_input[i] != example[i] && player.themed.control_input[i] != undefined) player.themed.control_input = [],
                player.themed.w11cooldown = d(10),
                player.themed.control_history = ["Your Mario died in World 1-1"].concat(player.themed.control_history.slice(0, 4)),
                player.themed.history_notation = [player.notation].concat(player.themed.history_notation.slice(0, 4)),
                player.themed.history_gain = [d(0)].concat(player.themed.history_gain.slice(0, 4))
            if (player.themed.control_input[i] == example[i]) correct += 1
        }
        if (correct == example.length) {
            player.themed.w11 = player.themed.w11.add(tmp.themed.w11Mult)
            player.themed.control_input = []
            player.themed.w11cooldown = d(10)
            player.themed.control_history = [`You reached the goal! +${fw(tmp.themed.w11Mult)} World 1-1 clears`].concat(player.themed.control_history.slice(0, 4))
            player.themed.history_notation = [player.notation].concat(player.themed.history_notation.slice(0, 4))
            player.themed.history_gain = [tmp.themed.w11Mult].concat(player.themed.history_gain.slice(0, 4))
            player.themed.w11time = d(0)
        }

        if (player.themed.w11cooldown.gt(0)) player.themed.w11cooldown = player.themed.w11cooldown.sub(diff).max(0)
        if (player.themed.w11cooldown.lte(0)) player.themed.w11time = player.themed.w11time.add(diff)

        if (hasMilestone('speedrun', 1)) player.themed.w11 = player.themed.w11.add(tmp.themed.w11Mult.div(10).times(diff))
    },

    tabFormat: [
        ["display-text", function () {
            let bef1e1000 = "You have uploaded"
            if (player.themed.points.gte("1e1000")) bef1e1000 = ""
            return `${bef1e1000} ${textStyle_h2(formatWhole(player.themed.points), '748bff')} Themed Courses, multipliying lag competitions played by ${textStyle_h2(format(layerEffect('themed')) + "x", '748bff')}`
        }],
        "blank",
        "prestige-button",
        ["display-text", () => `Themed Course layer only reset Multiplayer Co-op layer and S.E. Endless Clears amount.`],
        ["display-text", () => `You keep everything in Multiplayer Versus layer.`],
        ["display-text", () => `Your have ${formatWhole(player.s_expert.points)} Super Expert Endless Clears`],
        ["display-text", () => `Your best amount of Themed Courses is ${formatWhole(player.themed.best)}`],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Tag "Themed" is for Nintendo-like design courses. <br>Oh, too many SMB1 World 1-1 here...`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "World 1-1": {
                unlocked() { return hasUpgrade('themed', 23) },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return `You have cleared World 1-1 ${textStyle_h2(formatWhole(player.themed.w11), '748bff')} times`
                    }],
                    "blank",
                    ["row",
                        [
                            ["column", [
                                ["clickable", 11],
                                ["blank", "10px"],
                                ["row", [
                                    ["clickable", 21],
                                    ["blank", ["80px", "10px"]],
                                    ["clickable", 22],
                                ]
                                ],
                                ["blank", "10px"],
                                ["clickable", 31],
                            ]
                            ],
                            ["blank", ["60px", "60px"]],
                            ["column", [
                                ["clickable", 41],
                                ["blank", "10px"],
                                ["row",
                                    [
                                        ["blank", ["140px", "10px"]],
                                        ["clickable", 51],
                                    ]
                                ],
                            ]
                            ],
                        ]
                    ],
                    ["display-text", function () {
                        return `You can clear World 1-1 ${textStyle_h2(formatWhole(tmp.themed.w11Mult), '748bff')} times once with a correct input`
                    }],
                    "blank",
                    ["display-text", function () {
                        return `Expample input: ${tmp.themed.example_input.join(", ")}<br><br>
                        Your input: ${player.themed.control_input.join(", ")} (${formatWhole(player.themed.control_input.length)}/15)<br><br>
                        cooldown: ${format(player.themed.w11cooldown)} seconds<br><br>
                        time spent: ${formatTime(player.themed.w11time)} <br><br>
                        Your input history: ${player.themed.control_history.join("<br>")}`
                    }],
                ]
            },
        },
    },
})

// 第三十一层：跑酷关卡 (Speedrun/Parkour Courses)
addLayer("speedrun", {
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer.
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            TA: d(0),
            frame_boost: d(0),
            holdtime: d(0),
        }
    },
    color: "#6c3b14",                       // The color for this layer, which affects many elements.
    resource: "Speedrun Courses",            // The name of this layer's main prestige resource.
    row: 15,                                 // The row this layer is on (0 is the first row).
    symbol: "SR",
    position: 1,
    baseResource: "Super Expert Endless Clears",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.s_expert.points },  // A function to return the current amount of baseResource.
    requires: new Decimal("1e3326"),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.
    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.0035,                          // "normal" prestige gain is (currency^exponent).
    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let m = d(1)
        if (hasUpgrade('speedrun', 13)) m = m.times(upgradeEffect('speedrun', 13))
        if (hasUpgrade('versus', 291)) m = m.times(25)
        if (hasUpgrade('versus', 301)) m = m.times(upgradeEffect('versus', 301))
        if (hasUpgrade('versus', 302)) m = m.times(hasUpgrade('versus', 331) ? d(2500) : d(50))
        if (hasUpgrade('versus', 303)) m = m.times(upgradeEffect('versus', 303))
        if (player.versus.skill.gte(2.025e85)) m = m.times(skillReward(7))
        return m               // Factor in any bonuses multiplying gain here.
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        let e = d(1)
        return e
    },

    effect() {
        let eff = d(10).pow(player.speedrun.points.max(0).add(1).log(10).pow(1.1))
        return eff
    },

    layerShown() { return hasNormalAchievement(235) },          // Returns a bool for if this layer's node should be visible in the tree.

    branches: ["themed"],

    onPrestige() {
        return player.s_expert.points = d(0)
    },

    upgrades: {
        11: {
            title: "Time is chasing",
            description: "10x World 1-1 clears and Batoko Wins gain.",
            cost: new Decimal(9),
            unlocked() { return true },
        },
        12: {
            title: "Time is enough",
            description: "Unlock Speedrun Courses effect.",
            cost: new Decimal(45),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        13: {
            title: "Themed speedrun course",
            description() { return `Themed Courses multiplies Speedrun Courses gain. (start at ${f(1e145)} TCs)` },
            canAfford() { return player.speedrun.points.gte(1000) },
            onPurchase() {
                player.speedrun.points = player.speedrun.points.sub(1000)
            },
            currencyDisplayName() {
                return `Cleared Courses + ${f(1000)} Speedrun Courses`
            },
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee3e544"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.themed.points.max(1e145).div(1e145).root(18)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
        },
        14: {
            title: "Speedrun researches",
            description() { return `Unlock research row 9~12` },
            canAfford() { return player.speedrun.points.gte(15000) },
            onPurchase() {
                player.speedrun.points = player.speedrun.points.sub(15000)
            },
            currencyDisplayName() {
                return `Cleared Courses + ${f(15000)} Speedrun Courses`
            },
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee3e556"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        15: {
            title: "Time is not enough",
            description: "Unlock TA course.",
            cost: new Decimal(1e16),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "Beginners' difficulty",
            description: "+5 seconds to the theoretical time of your TA course.",
            cost: new Decimal(1e19),
            unlocked() { return hasUpgrade(this.layer, 15) },
        },
        22: {
            title: "Expert TA",
            description: "Add time to the theoretical time of your TA course based on TA Courses. (hardcap at +2.5 seconds)",
            cost: new Decimal(1e20),
            unlocked() { return hasUpgrade(this.layer, 15) },
            effect() {
                let eff = player.speedrun.TA.add(10).log(10).root(2).sub(1).min(2.5)
                return eff
            },
            effectDisplay() {
                return `+${formatTimeLong(upgradeEffect(this.layer, this.id))}`
            },
        },
        23: {
            title: "TA multiplier",
            description() { return `25x TA Course gain` },
            currencyDisplayName() {
                return `TA Courses`
            },
            currencyInternalName: "TA",
            currencyLayer: "speedrun",
            cost: new Decimal(500),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        24: {
            title: "Experience multiplier^2",
            description() { return `Increase the mult of experience gain from VS Rating based on its level.` },
            cost: new Decimal(1e23),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = d(1.5).pow(getBuyableAmount('versus', 11).sub(15).max(0))
                return eff
            },
            effectDisplay() {
                return `+${format(upgradeEffect(this.layer, this.id))}`
            },
        },
        25: {
            title: "39th tier layers any%",
            description() { return `Every Toad tier layers past Toad pentatriacont (35th, including) multiplies TA Courses gain by 3x.` },
            cost: new Decimal(2e27),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = d(3).pow(player.toad.tierlayer.max(35).sub(35))
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
        },
        31: {
            title: "TA go go go!",
            description() { 
                let r4 = ''
                let id = '15'
                if (hasUpgrade('speedrun', 43)) r4 = ' and 4',
                id = '20'
                return `Bought Speedrun Course upgrades in row 3${r4} (11th~${id}th) powers TA Course effect` },
            canAfford() { return player.speedrun.points.gte(1e28) },
            onPurchase() {
                player.speedrun.points = player.speedrun.points.sub(1e28)
            },
            currencyDisplayName() {
                return `Cleared Courses + ${f(1e28)} Speedrun Courses`
            },
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee1e919"),
            unlocked() { return hasUpgrade(this.layer, 25) },
            effect() {
                let maxrange = 36
                if (hasUpgrade('speedrun', 43)) maxrange = 46
                let upgs = d(countUniqueValues(player.speedrun.upgrades, 30, maxrange))
                let eff = d(1).add(upgs.div(4))
                return eff
            },
            effectDisplay() {
                return `^${format(upgradeEffect(this.layer, this.id))}`
            },
        },
        32: {
            title: "The perfect wall-kick",
            description() { 
                let r4 = ''
                let id = '15'
                if (hasUpgrade('speedrun', 43)) r4 = ' and 4',
                id = '20'
                return `Bought Speedrun Course upgrades in row 3${r4} (11th~${id}th) powers the theoretical time of your TA Course effect but weaker.` 
            },
            canAfford() { return player.speedrun.points.gte(3e30) },
            onPurchase() {
                player.speedrun.points = player.speedrun.points.sub(3e30)
            },
            currencyDisplayName() {
                return `Cleared Courses + ${f(3e30)} Speedrun Courses`
            },
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee2.45e940"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let maxrange = 36
                if (hasUpgrade('speedrun', 43)) maxrange = 46
                let upgs = d(countUniqueValues(player.speedrun.upgrades, 30, maxrange))
                let eff = d(1).add(upgs.div(8))
                return eff
            },
            effectDisplay() {
                return `^${format(upgradeEffect(this.layer, this.id))}`
            },
        },
        33: {
            title: "L-corner wall kick",
            description() { return `Win a Batoko VS competition is much easier (Decrease example input controls amount range).` },
            canAfford() { return player.speedrun.points.gte(3e33) },
            onPurchase() {
                player.speedrun.points = player.speedrun.points.sub(3e33)
            },
            currencyDisplayName() {
                return `Cleared Courses + ${f(3e33)} Speedrun Courses`
            },
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee2.74e974"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        34: {
            title: "Duck jump through a muncher",
            description() { return `${f(1e20)}x Skill tries gain.` },
            canAfford() { return player.speedrun.points.gte(1e37) },
            onPurchase() {
                player.speedrun.points = player.speedrun.points.sub(1e37)
            },
            currencyDisplayName() {
                return `Cleared Courses + ${f(1e37)} Speedrun Courses`
            },
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee1e1050"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        35: {
            title: "A precision ending",
            description() { return `+2.4 seconds to the theoretical time of your TA course.` },
            canAfford() { return player.speedrun.points.gte(3e48) },
            onPurchase() {
                player.speedrun.points = player.speedrun.points.sub(3e48)
            },
            currencyDisplayName() {
                return `Cleared Courses + ${f(3e48)} Speedrun Courses`
            },
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee1e1097"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        41: {
            title: "A 20-second TA Course",
            description() { return `${f(1000)}x TA Courses gain.` },
            canAfford() { return player.speedrun.points.gte(1e97) },
            onPurchase() {
                player.speedrun.points = player.speedrun.points.sub(1e97)
            },
            currencyDisplayName() {
                return `Cleared Courses + ${f(1e97)} Speedrun Courses`
            },
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee1e1830"),
            unlocked() { return hasUpgrade(this.layer, 35) },
        },
        42: {
            title: "Less than a frame",
            description() { return `Unlock a new buyable for TA Courses.` },
            canAfford() { return player.speedrun.points.gte(1e99) },
            onPurchase() {
                player.speedrun.points = player.speedrun.points.sub(1e99)
            },
            currencyDisplayName() {
                return `Cleared Courses + ${f(1e99)} Speedrun Courses`
            },
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal("ee1e1848"),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        43: {
            title: "Triple jump while holding items",
            description() { return `Extend 11th and 12th effect range, bought row 4 of SR upgrades also works.` },
            currencyDisplayName() {
                return `TA Courses`
            },
            currencyInternalName: "TA",
            currencyLayer: "speedrun",
            cost: new Decimal(1e29),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        44: {
            title: "Over 10CPS",
            description() { return `^2.5 research 2-3 effect.` },
            canAfford() { return player.speedrun.points.gte(1e112) },
            onPurchase() {
                player.speedrun.points = player.speedrun.points.sub(1e112)
            },
            currencyDisplayName() {
                return `Cleared Courses + ${f(1e112)} Speedrun Courses`
            },
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal('ee1e1953'),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        45: {
            title: "500 seconds speedrun marathon",
            description() { return `Unlock a new buyable for TA Courses again.` },
            canAfford() { return player.speedrun.points.gte(1e123) },
            onPurchase() {
                player.speedrun.points = player.speedrun.points.sub(1e123)
            },
            currencyDisplayName() {
                return `Cleared Courses + ${f(1e123)} Speedrun Courses`
            },
            currencyInternalName: "cc",
            currencyLayer: "achievements",
            cost: new Decimal('ee1e2063'),
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
    },

    clickables: {
        11: {
            title: "TA running",
            display() {
                let t = "Hold this button for 1s to gain " + formatWhole(tmp.speedrun.TAmult) + " TA Courses" + `<br><br>Progress: ${f(player.speedrun.holdtime)}s/1s`
                return t
            },
            canClick() { return true },
            onHold() { player.speedrun.holdtime = player.speedrun.holdtime.add(diffout).min(1) },
            style: {
                'width': '200px',
                'min-height': '100px',
                'border-radius': '5px',
                color: 'white',
            },
        },
    },

    theoretical_time() {
        let l = d(10)
        return l.sub(tmp.speedrun.approach_difference)
    },

    approach_difference() {
        let apdf = d(10)
        if (hasUpgrade('speedrun', 21)) apdf = apdf.sub(5)
        if (hasUpgrade('speedrun', 22)) apdf = apdf.sub(upgradeEffect('speedrun', 22))
        if (hasUpgrade('speedrun', 35)) apdf = apdf.sub(2.4)
        if (hasMilestone('speedrun', 2)) apdf = apdf.sub(buyableEffect('speedrun', 11))
        if (hasUpgrade('speedrun', 42)) apdf = apdf.sub(buyableEffect('speedrun', 12))
        if (hasUpgrade('speedrun', 45)) apdf = apdf.div(buyableEffect('speedrun', 13))
        return apdf
    }, //当理论时间到9.999的时候转为10-(approach_difference)显示，避免精度差 “逼近差距”（？

    TAmult() {
        let m = d(1)
        m = m.times(tmp.speedrun.ApDfEff)
        if (hasUpgrade('speedrun', 23)) m = m.times(25)
        if (hasUpgrade('speedrun', 25)) m = m.times(upgradeEffect('speedrun', 25))
        if (hasUpgrade('versus', 322)) m = m.times(2025)
        if (hasUpgrade('versus', 323)) m = m.times(upgradeEffect('versus', 323))
        if (hasUpgrade('speedrun', 41)) m = m.times(1000)
        if (hasNormalAchievement(243)) m = m.times(9.999e9)
        m = m.floor()
        return m
    },

    ApDfEff() {
        let eff = tmp.speedrun.approach_difference.div(10).recip().pow(2.25)
        if (hasUpgrade('speedrun', 32)) eff = eff.pow(upgradeEffect('speedrun', 32))
        return eff
    },

    TAeff() {
        let eff = player.speedrun.TA.add(1).log(10).times(2).pow(2).add(1)
        if (hasUpgrade('speedrun', 31)) eff = eff.pow(upgradeEffect('speedrun', 31))
        return eff
    },

    milestones: {
        0: {
            requirementDescription: "Upload 100 Speedrun Courses",
            effectDescription: "Autobuy Multiplayer Co-op buyables.",
            done() { return player.speedrun.points.gte(100) },
        },
        1: {
            requirementDescription() { return `Upload ${f(1e21)} Speedrun Courses` },
            effectDescription: "Passive gain 10% World 1-1 clears every second.",
            done() { return player.speedrun.points.gte(1e21) },
        },
        2: {
            requirementDescription() { return `Clear ${f(1e15)} TA Courses` },
            effectDescription: "Unlock a SR buyable in TA Course tab.",
            done() { return player.speedrun.TA.gte(1e15) },
        },
        3: {
            requirementDescription() { return `Clear ${f(1e59)} TA Courses` },
            effectDescription: "Unlock a new layer at row 17.",
            done() { return player.speedrun.TA.gte(1e59) },
        },
    },

    buyables: {
        11: {
            title: "What's the theoretical limit I",
            cost(x) { return new Decimal(10).pow(Decimal.pow(x, 1.145)).times(1e15) },
            purchaseLimit: d(9),
            display() {
                let display = ` Increase the theoretical time of your TA course by 10 milliseconds every level. <br>
                level: ${formatWhole(player[this.layer].buyables[this.id])}/9<br>
                Effect: +${formatTimeLong(this.effect())}<br>
                Cost: ${format(this.cost())} TA Courses`
                return display
            },
            canAfford() { return player[this.layer].TA.gte(this.cost()) },
            buyMax() { if (player.speedrun.TA.gte(1e15)) return setBuyableAmount('speedrun', 11, player.speedrun.TA.div(1e15).max(1).log(10).root(1.145).floor().add(1)).min(9) },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].TA = player[this.layer].TA.sub(this.cost()),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effect(x) {
                let effect = d(0.01).times(x)
                return effect
            },
            unlocked() { return hasMilestone('speedrun', 2) },
            auto() {
                //if (this.canAfford()) this.buyMax()
            },
            style() {
                if (this.canAfford() && getBuyableAmount(this.layer, this.id).lt(this.purchaseLimit)) return { color: 'white' }
            },
        },
        12: {
            title: "What's the theoretical limit II",
            cost(x) { return new Decimal(10).pow(Decimal.pow(x, 1.145)).times(1e25) },
            purchaseLimit: d(9),
            display() {
                let display = ` Increase the theoretical time of your TA course by 1 millisecond every level. <br>
                level: ${formatWhole(player[this.layer].buyables[this.id])}/9<br>
                Effect: +${formatTimeLong(this.effect())}<br>
                Cost: ${format(this.cost())} TA Courses`
                return display
            },
            canAfford() { return player[this.layer].TA.gte(this.cost()) },
            buyMax() { if (player.speedrun.TA.gte(1e25)) return setBuyableAmount('speedrun', 12, player.speedrun.TA.div(1e25).max(1).log(10).root(1.145).floor().add(1)).min(9) },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].TA = player[this.layer].TA.sub(this.cost()),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effect(x) {
                let effect = d(0.001).times(x)
                return effect
            },
            unlocked() { return hasUpgrade('speedrun', 42) },
            auto() {
                //if (this.canAfford()) this.buyMax()
            },
            style() {
                if (this.canAfford() && getBuyableAmount(this.layer, this.id).lt(this.purchaseLimit)) return { color: 'white' }
            },
        },
        13: {
            title: "What's the theoretical limit III",
            cost(x) { return new Decimal(10).pow(Decimal.pow(x, 1.145)).times(1e45) },
            base() {
                let b = d(1.5)
                return b
            },
            display() {
                let display = ` Make the theoretical time of your TA course closer to 10 seconds, effect divides the difference. <br>
                base: ${f(this.base())}<br>
                level: ${formatWhole(player[this.layer].buyables[this.id])}<br>
                Effect: /${format(this.effect())}<br>
                Cost: ${format(this.cost())} TA Courses`
                return display
            },
            canAfford() { return player[this.layer].TA.gte(this.cost()) },
            buyMax() { if (player.speedrun.TA.gte(1e45)) return setBuyableAmount('speedrun', 13, player.speedrun.TA.div(1e45).max(1).log(10).root(1.145).floor().add(1)) },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].TA = player[this.layer].TA.sub(this.cost()),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effect(x) {
                let effect = this.base().pow(x)
                return effect
            },
            unlocked() { return hasUpgrade('speedrun', 45) },
            auto() {
                //if (this.canAfford()) this.buyMax()
            },
            style() {
                if (this.canAfford()) return { color: 'white' }
            },
        },
    },

    update(diff) {
        if (player.speedrun.holdtime.gte(1)) {
            player.speedrun.TA = player.speedrun.TA.add(tmp.speedrun.TAmult)
            player.speedrun.holdtime = d(0)
        }
    },

    tabFormat: [
        ["display-text", function () {
            let bef1e1000 = "You have uploaded"
            if (player.speedrun.points.gte("1e1000")) bef1e1000 = ""
            let maindisplay = `${bef1e1000} ${textStyle_h2(formatWhole(player.speedrun.points), '6c3b14')} Speedrun Courses`
            if (hasUpgrade('speedrun', 12)) maindisplay += `, multiplying Pow Block gain and cap by ${textStyle_h2(f(layerEffect('speedrun')) + 'x', '6c3b14')}`
            return maindisplay
        }],
        "blank",
        "prestige-button",
        ["display-text", () => `Speedrun Courses layer resets are like Themed Courses layer, they reset the same contacts`],
        ["display-text", () => `Your have ${formatWhole(player.s_expert.points)} Super Expert Endless Clears`],
        ["display-text", () => `Your best amount of Speedrun Courses is ${formatWhole(player.speedrun.best)}`],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Most speedrun courses have a time limit, such as 10s, 30s, 60s... etc. You should always hold the accelerate botton and keep the max speed or you would be "TIME UP!"'d.<br>Ohh... 500s speedrun course? Really?`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "TA Course": {
                unlocked() { return hasUpgrade('speedrun', 15) },
                content: [
                    ["blank", "15px"],
                    "clickables",
                    "blank",
                    ["display-text", function () {
                        return `You cleared ${textStyle_h2(formatWhole(player.speedrun.TA), '6c3b14')} TA Courses`
                    }],
                    ["display-text", function () {
                        return `Gaining ${textStyle_h2(format(tmp.speedrun.TAeff) + 'x', '6c3b14')} World 1-1 clears and Batoko Wins`
                    }],
                    "blank",
                    ["display-text", function () {
                        let timeshow = textStyle_h2(formatTimeLong(tmp.speedrun.theoretical_time), '6c3b14')
                        if (tmp.speedrun.approach_difference.abs().lt(0.001)) timeshow = textStyle_h2("10 seconds - " + formatTimeLong(tmp.speedrun.approach_difference), '6c3b14')
                        return `The theoretical time of your uploaded TA Course is ${timeshow}`
                    }],
                    ["display-text", function () {
                        return `Multiplying TA Courses gain by ${textStyle_h2(format(tmp.speedrun.ApDfEff) + 'x', '6c3b14')}`
                    }],
                    "blank",
                    "buyables",
                ]
            },
        },
    },
})

// 第三十二层：微操关卡 (Precision Courses)
addLayer("precision", {
    componentStyles: {
        "upgrade"() {
            return {
                'border-radius': '10%',
                'width': '150px',
                'min-height': '150px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: new Decimal(0),             // "points" is the internal name for the main resource of the layer.
            pixel: d(0),
            Tjump: d(0),
            subpixel: d(0),
            fire_bubbles: d(0),
        }
    },

    color: "#808080",                       // The color for this layer, which affects many elements.
    resource: "Precision Courses",            // The name of this layer's main prestige resource.
    row: 16,                                 // The row this layer is on (0 is the first row).
    symbol: "Prc",
    position: 0,
    branches: ['themed'],

    baseResource: "Themed Courses",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.themed.points },  // A function to return the current amount of baseResource.

    requires: new Decimal('10^^1000'),//new Decimal("1e1335"),v0.13              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.0078,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let m = d(1)
        return m               // Factor in any bonuses multiplying gain here.
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        let e = d(1)
        return e
    },

    effect() {
        let eff = d(1)
        return eff
    },

    /*onPrestige() {
        return player.s_expert.points = d(0)
    },*/

    layerShown() { return hasNormalAchievement(244) },          // Returns a bool for if this layer's node should be visible in the tree.

    tabFormat: [
        ["display-text", function () {
            let bef1e1000 = "You have uploaded"
            if (player.precision.points.gte("1e1000")) bef1e1000 = ""
            let maindisplay = `${bef1e1000} ${textStyle_h2(formatWhole(player.precision.points), '808080')} Precision Courses`
            return maindisplay
        }],
        "blank",
        "prestige-button",
        ["display-text", () => `WIP`],
        ["display-text", () => `Your have uploaded ${formatWhole(player.themed.points)} Themed Courses`],
        ["display-text", () => `Your best amount of Precision Courses is ${formatWhole(player.precision.best)}`],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "Upgrades": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<div style="opacity:.5">Spike is the most central part of precision courses. The hitbox of spike is bigger than SMM1's in SMM2. If a block have 16 pixels wide (horizontal), The hitbox of spike is 15.8 pixels wide. It means if players want to jump out between two spike blocks, they have only 0.2 pixels of fault tolarance. This jump is called "Line-up".`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]],
                    ["display-text", () => "coming soon in v0.13! WIP" ]
                ]
            },
            "Milestones": {
                unlocked() { return true },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "Precision Skills": {
                unlocked() { return false },
                content: [
                    ["blank", "15px"],
                ]
            },
        },
    },
})

//剧透警告！！！SPOILER ALERT!!!
//剧透警告！！！SPOILER ALERT!!!
//剧透警告！！！SPOILER ALERT!!!
//剧透警告！！！SPOILER ALERT!!!
//剧透警告！！！SPOILER ALERT!!!
//剧透警告！！！SPOILER ALERT!!!
//剧透警告！！！SPOILER ALERT!!!
//剧透警告！！！SPOILER ALERT!!!
//剧透警告！！！SPOILER ALERT!!!
//剧透警告！！！SPOILER ALERT!!!
//剧透警告！！！SPOILER ALERT!!!
//剧透警告！！！SPOILER ALERT!!!
//剧透警告！！！SPOILER ALERT!!!
//剧透警告！！！SPOILER ALERT!!!











































// 第三十三层：Kaizo关卡 (Kaizo Courses)
// 第三十四层：时间杀关卡 (Time Attack Courses)
// 第三十五层：解谜关卡 (Puzzle Courses)
// 第三十六层：工艺关卡 (Troll Courses)
// 第三十七层：热垃圾关卡 (Hot Garbage Courses)
// 第三十八层：工匠点数 (Maker Points)
// 第三十九层：Maker Teams (#TeamShell, #TeamPrecision, #LetoSquad, #Team0%... etc)
// 第四十层：马造速通活动 (SGDQ, AGDQ, TNA)
// 第四十一层：谁是多人闸总王 (Online Versus Tournments)
// 第四十二层：The End?